{{- define "zservice.deployment" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "zservice.fullname" . }}
  labels:
    {{- include "zservice.labels" . | nindent 4 }}
  annotations:
    # This timestamp annotation is added so 'helm update'
    # will always result in yaml changes and trigger an upgrade
    timestamp: "{{ date "20060102150405" .Release.Time }}"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "zservice.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "zservice.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "zservice.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.global.image.repository }}{{ .Values.global.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          command: ["/app/zqd"]
          args:
            {{- include "zservice.args" .  | nindent 12 }}
          ports:
            - name: http
              containerPort: 9867
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /status
              port: http
          readinessProbe:
            httpGet:
              path: /status
              port: http
          env:
          - name: STATUS_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SPEC_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          {{- if .Values.global.useCredSecret }}
          # These environment variables are set from secrets
          # when there is no service account
          - name: AWS_REGION
            valueFrom:
              secretKeyRef:
                key: aws-region
                name: aws-credentials
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: aws-secret-access-key
                name: aws-credentials
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: aws-access-key-id
                name: aws-credentials
          - name: AWS_SESSION_TOKEN
            valueFrom:
              secretKeyRef:
                key: aws-session-token
                name: aws-credentials
          {{- else }}
          - name: AWS_REGION
            value: "{{ .Values.global.AWSRegion }}"
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: /spaces
              name: spaces-volume
            - mountPath: /tmp
              name: tmp-volume                   
          {{- if or (eq .Values.personality "root") (eq .Values.personality "temporal") }}
            - mountPath: /creds/postgres
              name: postgres-creds-volume
            - mountPath: /creds/redis
              name: redis-creds-volume
          {{- end }}
      {{- if eq .Values.personality "root" }}
      initContainers:
        - name: "initdb"
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.global.image.repository }}{{ .Values.global.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          command: ["/app/pgctl"]
          args:
            - "migrate"
            - "-m=/postgres/migrations"
            - "-addr={{ .Values.global.postgres.addr }}"
            - "-database={{ .Values.global.postgres.database }}"
            - "-user={{ .Values.global.postgres.username }}"
            - "-passwordFile=/creds/postgres/password"
          volumeMounts:
            - mountPath: /creds/postgres
              name: postgres-creds-volume
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: spaces-volume
          emptyDir: {}
        - name: tmp-volume
          emptyDir: {}
        {{- if or (eq .Values.personality "root") (eq .Values.personality "temporal") }}
        - name: postgres-creds-volume
          secret:
            secretName: {{ .Values.global.postgres.passwordSecretName }}
            items:
              - key: postgresql-password
                path: password
        - name: redis-creds-volume
          secret:
            secretName: {{ .Values.redis.passwordSecretName }}
            items:
              - key: redis-password
                path: password
        {{- end }}
{{- end -}}
