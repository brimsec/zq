type port=uint16;
type zenum=string;
type id={orig_h:ip,orig_p:port,resp_h:ip,resp_p:port};

type broker={_path:string,ts:time,ty:zenum,ev:bstring,peer:{address:bstring,bound_port:port=(uint16)},message:bstring,_write_ts:time};
type capture_loss={_path:string,ts:time,ts_delta:duration,peer:bstring,gaps:uint64,acks:uint64,percent_lost:float64,_write_ts:time};
type cluster={_path:string,ts:time,node:bstring,message:bstring,_write_ts:time};
type config={_path:string,ts:time,id:bstring,old_value:bstring,new_value:bstring,location:bstring,_write_ts:time};
type conn={_path:string,ts:time,uid:bstring,id:id,proto:zenum,service:bstring,duration:duration,orig_bytes:uint64,resp_bytes:uint64,conn_state:bstring,local_orig:bool,local_resp:bool,missed_bytes:uint64,history:bstring,orig_pkts:uint64,orig_ip_bytes:uint64,resp_pkts:uint64,resp_ip_bytes:uint64,tunnel_parents:|[bstring]|,_write_ts:time};
type dce_rpc={_path:string,ts:time,uid:bstring,id:id,rtt:duration,named_pipe:bstring,endpoint:bstring,operation:bstring,_write_ts:time};
type dhcp={_path:string,ts:time,uids:|[bstring]|,client_addr:ip,server_addr:ip,mac:bstring,host_name:bstring,client_fqdn:bstring,domain:bstring,requested_addr:ip,assigned_addr:ip,lease_time:duration,client_message:bstring,server_message:bstring,msg_types:[bstring],duration:duration,_write_ts:time};
type dnp3={_path:string,ts:time,uid:bstring,id:id,fc_request:bstring,fc_reply:bstring,iin:uint64,_write_ts:time};
type dns={_path:string,ts:time,uid:bstring,id:id,proto:zenum,trans_id:uint64,rtt:duration,query:bstring,qclass:uint64,qclass_name:bstring,qtype:uint64,qtype_name:bstring,rcode:uint64,rcode_name:bstring,AA:bool,TC:bool,RD:bool,RA:bool,Z:uint64,answers:[bstring],TTLs:[duration],rejected:bool,_write_ts:time};
type dpd={_path:string,ts:time,uid:bstring,id:id,proto:zenum,analyzer:bstring,failure_reason:bstring,_write_ts:time};
type files={_path:string,ts:time,fuid:bstring,tx_hosts:|[ip]|,rx_hosts:|[ip]|,conn_uids:|[bstring]|,source:bstring,depth:uint64,analyzers:|[bstring]|,mime_type:bstring,filename:bstring,duration:duration,local_orig:bool,is_orig:bool,seen_bytes:uint64,total_bytes:uint64,missing_bytes:uint64,overflow_bytes:uint64,timedout:bool,parent_fuid:bstring,md5:bstring,sha1:bstring,sha256:bstring,extracted:bstring,extracted_cutoff:bool,extracted_size:uint64,_write_ts:time};
type ftp={_path:string,ts:time,uid:bstring,id:id,user:bstring,password:bstring,command:bstring,arg:bstring,mime_type:bstring,file_size:uint64,reply_code:uint64,reply_msg:bstring,data_channel:{passive:bool,orig_h:ip,resp_h:ip,resp_p:port=(uint16)},fuid:bstring,_write_ts:time};
type http={_path:string,ts:time,uid:bstring,id:id,trans_depth:uint64,method:bstring,host:bstring,uri:bstring,referrer:bstring,version:bstring,user_agent:bstring,origin:bstring,request_body_len:uint64,response_body_len:uint64,status_code:uint64,status_msg:bstring,info_code:uint64,info_msg:bstring,tags:|[zenum]|,username:bstring,password:bstring,proxied:|[bstring]|,orig_fuids:[bstring],orig_filenames:[bstring],orig_mime_types:[bstring],resp_fuids:[bstring],resp_filenames:[bstring],resp_mime_types:[bstring],_write_ts:time};
type intel={_path:string,ts:time,uid:bstring,id:id,seen:{indicator:bstring,indicator_type:zenum,where:zenum,node:bstring},matched:|[zenum]|,sources:|[bstring]|,fuid:bstring,file_mime_type:bstring,file_desc:bstring,_write_ts:time};
type irc={_path:string,ts:time,uid:bstring,id:id,nick:bstring,user:bstring,command:bstring,value:bstring,addl:bstring,dcc_file_name:bstring,dcc_file_size:uint64,dcc_mime_type:bstring,fuid:bstring,_write_ts:time};
type kerberos={_path:string,ts:time,uid:bstring,id:id,request_type:bstring,client:bstring,service:bstring,success:bool,error_msg:bstring,from:time,till:time,cipher:bstring,forwardable:bool,renewable:bool,client_cert_subject:bstring,client_cert_fuid:bstring,server_cert_subject:bstring,server_cert_fuid:bstring,_write_ts:time};
type known_certs={_path:string,ts:time,host:ip,port_num:port=(uint16),subject:bstring,issuer_subject:bstring,serial:bstring,_write_ts:time};
type known_hosts={_path:string,ts:time,host:ip,_write_ts:time};
type known_services={_path:string,ts:time,host:ip,port_num:port=(uint16),port_proto:zenum,service:|[bstring]|,_write_ts:time};
type loaded_scripts={_path:string,name:bstring,_write_ts:time};
type modbus={_path:string,ts:time,uid:bstring,id:id,func:bstring,exception:bstring,_write_ts:time};
type mysql={_path:string,ts:time,uid:bstring,id:id,cmd:bstring,arg:bstring,success:bool,rows:uint64,response:bstring,_write_ts:time};
type netcontrol={_path:string,ts:time,rule_id:bstring,category:zenum,cmd:bstring,state:zenum,action:bstring,target:zenum,entity_type:bstring,entity:bstring,mod:bstring,msg:bstring,priority:int64,expire:duration,location:bstring,plugin:bstring,_write_ts:time};
type netcontrol_drop={_path:string,ts:time,rule_id:bstring,orig_h:ip,orig_p:port=(uint16),resp_h:ip,resp_p:port=(uint16),expire:duration,location:bstring,_write_ts:time};
type netcontrol_shunt={_path:string,ts:time,rule_id:bstring,f:{src_h:ip,src_p:port=(uint16),dst_h:ip,dst_p:port=(uint16)},expire:duration,location:bstring,_write_ts:time};
type notice={_path:string,ts:time,uid:bstring,id:id,fuid:bstring,file_mime_type:bstring,file_desc:bstring,proto:zenum,note:zenum,msg:bstring,sub:bstring,src:ip,dst:ip,p:port=(uint16),n:uint64,peer_descr:bstring,actions:|[zenum]|,suppress_for:duration,remote_location:{country_code:bstring,region:bstring,city:bstring,latitude:float64,longitude:float64},_write_ts:time};
type notice_alarm={_path:string,ts:time,uid:bstring,id:id,fuid:bstring,file_mime_type:bstring,file_desc:bstring,proto:zenum,note:zenum,msg:bstring,sub:bstring,src:ip,dst:ip,p:port=(uint16),n:uint64,peer_descr:bstring,actions:|[zenum]|,suppress_for:duration,remote_location:{country_code:bstring,region:bstring,city:bstring,latitude:float64,longitude:float64},_write_ts:time};
type ntlm={_path:string,ts:time,uid:bstring,id:id,username:bstring,hostname:bstring,domainname:bstring,server_nb_computer_name:bstring,server_dns_computer_name:bstring,server_tree_name:bstring,success:bool,_write_ts:time};
type ntp={_path:string,ts:time,uid:bstring,id:id,version:uint64,mode:uint64,stratum:uint64,poll:duration,precision:duration,root_delay:duration,root_disp:duration,ref_id:bstring,ref_time:time,org_time:time,rec_time:time,xmt_time:time,num_exts:uint64,_write_ts:time};
type packet_filter={_path:string,ts:time,node:bstring,filter:bstring,init:bool,success:bool,_write_ts:time};
type pe={_path:string,ts:time,id:bstring,machine:bstring,compile_ts:time,os:bstring,subsystem:bstring,is_exe:bool,is_64bit:bool,uses_aslr:bool,uses_dep:bool,uses_code_integrity:bool,uses_seh:bool,has_import_table:bool,has_export_table:bool,has_cert_table:bool,has_debug_data:bool,section_names:[bstring],_write_ts:time};
type radius={_path:string,ts:time,uid:bstring,id:id,username:bstring,mac:bstring,framed_addr:ip,tunnel_client:bstring,connect_info:bstring,reply_msg:bstring,result:bstring,ttl:duration,_write_ts:time};
type rdp={_path:string,ts:time,uid:bstring,id:id,cookie:bstring,result:bstring,security_protocol:bstring,client_channels:[bstring],keyboard_layout:bstring,client_build:bstring,client_name:bstring,client_dig_product_id:bstring,desktop_width:uint64,desktop_height:uint64,requested_color_depth:bstring,cert_type:bstring,cert_count:uint64,cert_permanent:bool,encryption_level:bstring,encryption_method:bstring,_write_ts:time};
type reporter={_path:string,ts:time,level:zenum,message:bstring,location:bstring,_write_ts:time};
type rfb={_path:string,ts:time,uid:bstring,id:id,client_major_version:bstring,client_minor_version:bstring,server_major_version:bstring,server_minor_version:bstring,authentication_method:bstring,auth:bool,share_flag:bool,desktop_name:bstring,width:uint64,height:uint64,_write_ts:time};
type signatures={_path:string,ts:time,uid:bstring,src_addr:ip,src_port:port=(uint16),dst_addr:ip,dst_port:port=(uint16),note:zenum,sig_id:bstring,event_msg:bstring,sub_msg:bstring,sig_count:uint64,host_count:uint64,_write_ts:time};
type sip={_path:string,ts:time,uid:bstring,id:id,trans_depth:uint64,method:bstring,uri:bstring,date:bstring,request_from:bstring,request_to:bstring,response_from:bstring,response_to:bstring,reply_to:bstring,call_id:bstring,seq:bstring,subject:bstring,request_path:[bstring],response_path:[bstring],user_agent:bstring,status_code:uint64,status_msg:bstring,warning:bstring,request_body_len:uint64,response_body_len:uint64,content_type:bstring,_write_ts:time};
type smb_files={_path:string,ts:time,uid:bstring,id:id,fuid:bstring,action:zenum,path:bstring,name:bstring,size:uint64,prev_name:bstring,times:{modified:time,accessed:time,created:time,changed:time},_write_ts:time};
type smb_mapping={_path:string,ts:time,uid:bstring,id:id,path:bstring,service:bstring,native_file_system:bstring,share_type:bstring,_write_ts:time};
type smtp={_path:string,ts:time,uid:bstring,id:id,trans_depth:uint64,helo:bstring,mailfrom:bstring,rcptto:|[bstring]|,date:bstring,from:bstring,to:|[bstring]|,cc:|[bstring]|,reply_to:bstring,msg_id:bstring,in_reply_to:bstring,subject:bstring,x_originating_ip:ip,first_received:bstring,second_received:bstring,last_reply:bstring,path:[ip],user_agent:bstring,tls:bool,fuids:[bstring],is_webmail:bool,_write_ts:time};
type snmp={_path:string,ts:time,uid:bstring,id:id,duration:duration,version:bstring,community:bstring,get_requests:uint64,get_bulk_requests:uint64,get_responses:uint64,set_requests:uint64,display_string:bstring,up_since:time,_write_ts:time};
type socks={_path:string,ts:time,uid:bstring,id:id,version:uint64,user:bstring,password:bstring,status:bstring,request:{host:ip,name:bstring},request_p:port=(uint16),bound:{host:ip,name:bstring},bound_p:port=(uint16),_write_ts:time};
type software={_path:string,ts:time,host:ip,host_p:port=(uint16),software_type:zenum,name:bstring,version:{major:uint64,minor:uint64,minor2:uint64,minor3:uint64,addl:bstring},unparsed_version:bstring,_write_ts:time};
type ssh={_path:string,ts:time,uid:bstring,id:id,version:uint64,auth_success:bool,auth_attempts:uint64,direction:zenum,client:bstring,server:bstring,cipher_alg:bstring,mac_alg:bstring,compression_alg:bstring,kex_alg:bstring,host_key_alg:bstring,host_key:bstring,remote_location:{country_code:bstring,region:bstring,city:bstring,latitude:float64,longitude:float64},_write_ts:time};
type ssl={_path:string,ts:time,uid:bstring,id:id,version:bstring,cipher:bstring,curve:bstring,server_name:bstring,resumed:bool,last_alert:bstring,next_protocol:bstring,established:bool,cert_chain_fuids:[bstring],client_cert_chain_fuids:[bstring],subject:bstring,issuer:bstring,client_subject:bstring,client_issuer:bstring,validation_status:bstring,_write_ts:time};
type stats={_path:string,ts:time,peer:bstring,mem:uint64,pkts_proc:uint64,bytes_recv:uint64,pkts_dropped:uint64,pkts_link:uint64,pkt_lag:duration,events_proc:uint64,events_queued:uint64,active_tcp_conns:uint64,active_udp_conns:uint64,active_icmp_conns:uint64,tcp_conns:uint64,udp_conns:uint64,icmp_conns:uint64,timers:uint64,active_timers:uint64,files:uint64,active_files:uint64,dns_requests:uint64,active_dns_requests:uint64,reassem_tcp_size:uint64,reassem_file_size:uint64,reassem_frag_size:uint64,reassem_unknown_size:uint64,_write_ts:time};
type syslog={_path:string,ts:time,uid:bstring,id:id,proto:zenum,facility:bstring,severity:bstring,message:bstring,_write_ts:time};
type tunnel={_path:string,ts:time,uid:bstring,id:id,tunnel_type:zenum,action:zenum,_write_ts:time};
type weird={_path:string,ts:time,uid:bstring,id:id,name:bstring,addl:bstring,notice:bool,peer:bstring,source:bstring,_write_ts:time};
type x509={_path:string,ts:time,id:bstring,certificate:{version:uint64,serial:bstring,subject:bstring,issuer:bstring,not_valid_before:time,not_valid_after:time,key_alg:bstring,sig_alg:bstring,key_type:bstring,key_length:uint64,exponent:bstring,curve:bstring},san:{dns:[bstring],uri:[bstring],email:[bstring],ip:[ip]},basic_constraints:{ca:bool,path_len:uint64},_write_ts:time};


put ts=iso(ts), _write_ts=iso(_write_ts)
   | put .=unflatten(.)
   | switch (
    case _path=ntp => put ref_time=iso(ref_time), org_time=iso(org_time), rec_time=iso(rec_time), xmt_time=iso(xmt_time)
    case _path=x509 => put certificate.not_valid_before=iso(certificate.not_valid_before), certificate.not_valid_after=iso(certificate.not_valid_after)
    case _path=smb_files => put times.modified=iso(times.modified), times.accessed=iso(times.accessed), times.created=iso(times.created), times.changed=iso(times.changed)
    case _path=kerberos => put from=iso(from), till=iso(till)
    case _path=snmp => put up_since=iso(up_since)
    case _path=pe => put compile_ts=iso(compile_ts)
    case match(*) => *
   )
   | switch (
    case _path=files => put . = shape(files)
    case _path=http => put . = shape(http)
    case _path=rdp => put . = shape(rdp)
    case _path=ssl => put . = shape(ssl)
    case _path=tunnel => put . = shape(tunnel)
    case _path=dns => put . = shape(dns)
    case _path=known_certs => put . = shape(known_certs)
    case _path=dhcp => put . = shape(dhcp)
    case _path=modbus => put . = shape(modbus)
    case _path=ntp => put . = shape(ntp)
    case _path=snmp => put . = shape(snmp)
    case _path=ssh => put . = shape(ssh)
    case _path=syslog => put . = shape(syslog)
    case _path=x509 => put . = shape(x509)
    case _path=capture_loss => put . = shape(capture_loss)
    case _path=dce_rpc => put . = shape(dce_rpc)
    case _path=ftp => put . = shape(ftp)
    case _path=notice => put . = shape(notice)
    case _path=packet_filter => put . = shape(packet_filter)
    case _path=radius => put . = shape(radius)
    case _path=smtp => put . = shape(smtp)
    case _path=stats => put . = shape(stats)
    case _path=weird => put . = shape(weird)
    case _path=dpd => put . = shape(dpd)
    case _path=intel => put . = shape(intel)
    case _path=irc => put . = shape(irc)
    case _path=kerberos => put . = shape(kerberos)
    case _path=loaded_scripts => put . = shape(loaded_scripts)
    case _path=mysql => put . = shape(mysql)
    case _path=netcontrol => put . = shape(netcontrol)
    case _path=netcontrol_shunt => put . = shape(netcontrol_shunt)
    case _path=signatures => put . = shape(signatures)
    case _path=socks => put . = shape(socks)
    case _path=software => put . = shape(software)
    case _path=known_services => put . = shape(known_services)
    case _path=sip => put . = shape(sip)
    case _path=smb_mapping => put . = shape(smb_mapping)
    case _path=broker => put . = shape(broker)
    case _path=config => put . = shape(config)
    case _path=notice_alarm => put . = shape(notice_alarm)
    case _path=pe => put . = shape(pe)
    case _path=smb_files => put . = shape(smb_files)
    case _path=cluster => put . = shape(cluster)
    case _path=conn => put . = shape(conn)
    case _path=dnp3 => put . = shape(dnp3)
    case _path=known_hosts => put . = shape(known_hosts)
    case _path=netcontrol_drop => put . = shape(netcontrol_drop)
    case _path=ntlm => put . = shape(ntlm)
    case _path=reporter => put . = shape(reporter)
    case _path=rfb => put . = shape(rfb)
)
