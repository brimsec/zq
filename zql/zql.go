// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimsec/zq/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 7, col: 1, offset: 23},
			expr: &actionExpr{
				pos: position{line: 7, col: 9, offset: 31},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 7, col: 9, offset: 31},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 7, col: 9, offset: 31},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 7, col: 12, offset: 34},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 7, col: 16, offset: 38},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 18, offset: 40},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 7, col: 21, offset: 43},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 13, col: 1, offset: 349},
			expr: &choiceExpr{
				pos: position{line: 14, col: 5, offset: 429},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 14, col: 5, offset: 429},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 14, col: 5, offset: 429},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 14, col: 5, offset: 429},
									label: "consts",
									expr: &oneOrMoreExpr{
										pos: position{line: 14, col: 12, offset: 436},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 12, offset: 436},
											name: "Const",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 14, col: 19, offset: 443},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 14, col: 22, offset: 446},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 14, col: 28, offset: 452},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 14, col: 38, offset: 462},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 14, col: 43, offset: 467},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 43, offset: 467},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 5, offset: 743},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 24, col: 1, offset: 755},
			expr: &actionExpr{
				pos: position{line: 24, col: 9, offset: 763},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 24, col: 9, offset: 763},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 24, col: 9, offset: 763},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 12, offset: 766},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 14, offset: 768},
								name: "AnyConst",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyConst",
			pos:  position{line: 26, col: 1, offset: 796},
			expr: &choiceExpr{
				pos: position{line: 27, col: 5, offset: 809},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 27, col: 5, offset: 809},
						run: (*parser).callonAnyConst2,
						expr: &seqExpr{
							pos: position{line: 27, col: 5, offset: 809},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 27, col: 5, offset: 809},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 13, offset: 817},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 15, offset: 819},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 18, offset: 822},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 33, offset: 837},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 27, col: 36, offset: 840},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 27, col: 40, offset: 844},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 27, col: 43, offset: 847},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 27, col: 48, offset: 852},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 27, col: 55, offset: 859},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 27, col: 55, offset: 859},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 27, col: 55, offset: 859},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 27, col: 58, offset: 862},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 27, col: 64, offset: 868},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 968},
						run: (*parser).callonAnyConst18,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 968},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 968},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 12, offset: 975},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 14, offset: 977},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 17, offset: 980},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 32, offset: 995},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 35, offset: 998},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 39, offset: 1002},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 42, offset: 1005},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 46, offset: 1009},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 53, offset: 1016},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 53, offset: 1016},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 53, offset: 1016},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 56, offset: 1019},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 62, offset: 1025},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 34, col: 1, offset: 1120},
			expr: &choiceExpr{
				pos: position{line: 35, col: 5, offset: 1135},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 35, col: 5, offset: 1135},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 35, col: 5, offset: 1135},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 35, col: 5, offset: 1135},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 35, col: 11, offset: 1141},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 35, col: 21, offset: 1151},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 35, col: 26, offset: 1156},
										expr: &ruleRefExpr{
											pos:  position{line: 35, col: 26, offset: 1156},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1316},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1316},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 38, col: 8, offset: 1319},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 42, col: 1, offset: 1431},
			expr: &actionExpr{
				pos: position{line: 42, col: 18, offset: 1448},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 42, col: 18, offset: 1448},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 42, col: 18, offset: 1448},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 42, col: 21, offset: 1451},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 25, offset: 1455},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 28, offset: 1458},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 30, offset: 1460},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 44, col: 1, offset: 1489},
			expr: &choiceExpr{
				pos: position{line: 45, col: 5, offset: 1502},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 45, col: 5, offset: 1502},
						run: (*parser).callonParallel2,
						expr: &seqExpr{
							pos: position{line: 45, col: 5, offset: 1502},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 45, col: 5, offset: 1502},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1508},
										name: "Sequential",
									},
								},
								&labeledExpr{
									pos:   position{line: 45, col: 22, offset: 1519},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 45, col: 27, offset: 1524},
										expr: &ruleRefExpr{
											pos:  position{line: 45, col: 27, offset: 1524},
											name: "ParallelTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 1625},
						run: (*parser).callonParallel9,
						expr: &labeledExpr{
							pos:   position{line: 48, col: 5, offset: 1625},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 11, offset: 1631},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "ParallelTail",
			pos:  position{line: 52, col: 1, offset: 1690},
			expr: &actionExpr{
				pos: position{line: 53, col: 5, offset: 1707},
				run: (*parser).callonParallelTail1,
				expr: &seqExpr{
					pos: position{line: 53, col: 5, offset: 1707},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 53, col: 5, offset: 1707},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 53, col: 8, offset: 1710},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 13, offset: 1715},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 16, offset: 1718},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 19, offset: 1721},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchBranch",
			pos:  position{line: 56, col: 1, offset: 1753},
			expr: &actionExpr{
				pos: position{line: 57, col: 5, offset: 1770},
				run: (*parser).callonSwitchBranch1,
				expr: &seqExpr{
					pos: position{line: 57, col: 5, offset: 1770},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 57, col: 5, offset: 1770},
							label: "filter",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 12, offset: 1777},
								name: "SearchBoolean",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 26, offset: 1791},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 57, col: 29, offset: 1794},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 34, offset: 1799},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 57, col: 37, offset: 1802},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 42, offset: 1807},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 61, col: 1, offset: 1896},
			expr: &choiceExpr{
				pos: position{line: 62, col: 5, offset: 1907},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 62, col: 5, offset: 1907},
						run: (*parser).callonSwitch2,
						expr: &seqExpr{
							pos: position{line: 62, col: 5, offset: 1907},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 62, col: 5, offset: 1907},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 62, col: 11, offset: 1913},
										name: "SwitchBranch",
									},
								},
								&labeledExpr{
									pos:   position{line: 62, col: 24, offset: 1926},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 62, col: 29, offset: 1931},
										expr: &ruleRefExpr{
											pos:  position{line: 62, col: 29, offset: 1931},
											name: "SwitchTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 65, col: 5, offset: 2030},
						run: (*parser).callonSwitch9,
						expr: &labeledExpr{
							pos:   position{line: 65, col: 5, offset: 2030},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 65, col: 11, offset: 2036},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchTail",
			pos:  position{line: 69, col: 1, offset: 2097},
			expr: &actionExpr{
				pos: position{line: 70, col: 5, offset: 2112},
				run: (*parser).callonSwitchTail1,
				expr: &seqExpr{
					pos: position{line: 70, col: 5, offset: 2112},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 70, col: 5, offset: 2112},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 70, col: 8, offset: 2115},
							name: "CaseToken",
						},
						&ruleRefExpr{
							pos:  position{line: 70, col: 18, offset: 2125},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 70, col: 21, offset: 2128},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 70, col: 24, offset: 2131},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "CaseToken",
			pos:  position{line: 72, col: 1, offset: 2164},
			expr: &litMatcher{
				pos:        position{line: 72, col: 13, offset: 2176},
				val:        "case",
				ignoreCase: false,
			},
		},
		{
			name: "Operation",
			pos:  position{line: 74, col: 1, offset: 2184},
			expr: &choiceExpr{
				pos: position{line: 75, col: 5, offset: 2198},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 75, col: 5, offset: 2198},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 75, col: 5, offset: 2198},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 75, col: 5, offset: 2198},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 13, offset: 2206},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 16, offset: 2209},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 20, offset: 2213},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 23, offset: 2216},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 28, offset: 2221},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 75, col: 31, offset: 2224},
									label: "procArray",
									expr: &ruleRefExpr{
										pos:  position{line: 75, col: 41, offset: 2234},
										name: "Parallel",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 75, col: 50, offset: 2243},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 75, col: 53, offset: 2246},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2345},
						run: (*parser).callonOperation14,
						expr: &seqExpr{
							pos: position{line: 78, col: 5, offset: 2345},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 78, col: 5, offset: 2345},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 14, offset: 2354},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 17, offset: 2357},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 21, offset: 2361},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 24, offset: 2364},
									name: "CaseToken",
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 34, offset: 2374},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 78, col: 37, offset: 2377},
									label: "caseArray",
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 47, offset: 2387},
										name: "Switch",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 54, offset: 2394},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 57, offset: 2397},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 81, col: 5, offset: 2494},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 82, col: 5, offset: 2507},
						run: (*parser).callonOperation27,
						expr: &seqExpr{
							pos: position{line: 82, col: 5, offset: 2507},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 82, col: 5, offset: 2507},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 7, offset: 2509},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 82, col: 16, offset: 2518},
									expr: &ruleRefExpr{
										pos:  position{line: 82, col: 17, offset: 2519},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 83, col: 5, offset: 2549},
						run: (*parser).callonOperation33,
						expr: &seqExpr{
							pos: position{line: 83, col: 5, offset: 2549},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 83, col: 5, offset: 2549},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 7, offset: 2551},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 83, col: 19, offset: 2563},
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 20, offset: 2564},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 84, col: 5, offset: 2595},
						run: (*parser).callonOperation39,
						expr: &seqExpr{
							pos: position{line: 84, col: 5, offset: 2595},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 84, col: 5, offset: 2595},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 10, offset: 2600},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 84, col: 24, offset: 2614},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 25, offset: 2615},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 88, col: 1, offset: 2710},
			expr: &seqExpr{
				pos: position{line: 88, col: 11, offset: 2720},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 88, col: 11, offset: 2720},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 88, col: 15, offset: 2724},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 88, col: 15, offset: 2724},
								val:        "|",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 88, col: 21, offset: 2730},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 88, col: 28, offset: 2737},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 88, col: 34, offset: 2743},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 90, col: 1, offset: 2749},
			expr: &seqExpr{
				pos: position{line: 90, col: 13, offset: 2761},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 90, col: 13, offset: 2761},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 90, col: 17, offset: 2765},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 90, col: 18, offset: 2766},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 90, col: 18, offset: 2766},
										expr: &litMatcher{
											pos:        position{line: 90, col: 19, offset: 2767},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 90, col: 24, offset: 2772},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 90, col: 38, offset: 2786},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 90, col: 57, offset: 2805},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 90, col: 82, offset: 2830},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 90, col: 88, offset: 2836},
								val:        "(",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 92, col: 1, offset: 2842},
			expr: &choiceExpr{
				pos: position{line: 92, col: 12, offset: 2853},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 92, col: 13, offset: 2854},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 92, col: 13, offset: 2854},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 92, col: 16, offset: 2857},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 92, col: 16, offset: 2857},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 92, col: 26, offset: 2867},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 92, col: 35, offset: 2876},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 92, col: 43, offset: 2884},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 92, col: 43, offset: 2884},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 92, col: 46, offset: 2887},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 94, col: 1, offset: 2893},
			expr: &actionExpr{
				pos: position{line: 95, col: 5, offset: 2911},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 95, col: 5, offset: 2911},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 95, col: 5, offset: 2911},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 95, col: 11, offset: 2917},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 95, col: 21, offset: 2927},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 95, col: 26, offset: 2932},
								expr: &ruleRefExpr{
									pos:  position{line: 95, col: 26, offset: 2932},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 99, col: 1, offset: 3006},
			expr: &actionExpr{
				pos: position{line: 99, col: 16, offset: 3021},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 99, col: 16, offset: 3021},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 99, col: 16, offset: 3021},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 18, offset: 3023},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 26, offset: 3031},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 99, col: 28, offset: 3033},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 30, offset: 3035},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 101, col: 1, offset: 3085},
			expr: &actionExpr{
				pos: position{line: 102, col: 5, offset: 3099},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 102, col: 5, offset: 3099},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 102, col: 5, offset: 3099},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 11, offset: 3105},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 103, col: 5, offset: 3122},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 103, col: 10, offset: 3127},
								expr: &actionExpr{
									pos: position{line: 103, col: 11, offset: 3128},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 103, col: 11, offset: 3128},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 103, col: 11, offset: 3128},
												name: "__",
											},
											&zeroOrOneExpr{
												pos: position{line: 103, col: 14, offset: 3131},
												expr: &seqExpr{
													pos: position{line: 103, col: 15, offset: 3132},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 103, col: 15, offset: 3132},
															name: "AndToken",
														},
														&ruleRefExpr{
															pos:  position{line: 103, col: 24, offset: 3141},
															name: "_",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 103, col: 28, offset: 3145},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 103, col: 31, offset: 3148},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 103, col: 36, offset: 3153},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 107, col: 1, offset: 3269},
			expr: &choiceExpr{
				pos: position{line: 108, col: 5, offset: 3286},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 108, col: 5, offset: 3286},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 108, col: 5, offset: 3286},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 108, col: 6, offset: 3287},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 108, col: 6, offset: 3287},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 108, col: 6, offset: 3287},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 108, col: 15, offset: 3296},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 108, col: 19, offset: 3300},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 108, col: 19, offset: 3300},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 108, col: 23, offset: 3304},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 108, col: 27, offset: 3308},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 108, col: 29, offset: 3310},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 111, col: 5, offset: 3426},
						name: "ShortCut",
					},
					&ruleRefExpr{
						pos:  position{line: 112, col: 5, offset: 3439},
						name: "SearchExpr",
					},
					&actionExpr{
						pos: position{line: 113, col: 5, offset: 3454},
						run: (*parser).callonSearchFactor15,
						expr: &seqExpr{
							pos: position{line: 113, col: 5, offset: 3454},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 113, col: 5, offset: 3454},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 113, col: 9, offset: 3458},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 113, col: 12, offset: 3461},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 17, offset: 3466},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 113, col: 31, offset: 3480},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 113, col: 34, offset: 3483},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortCut",
			pos:  position{line: 115, col: 1, offset: 3509},
			expr: &choiceExpr{
				pos: position{line: 116, col: 5, offset: 3522},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 116, col: 5, offset: 3522},
						run: (*parser).callonShortCut2,
						expr: &seqExpr{
							pos: position{line: 116, col: 5, offset: 3522},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 116, col: 5, offset: 3522},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 116, col: 9, offset: 3526},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 116, col: 12, offset: 3529},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 22, offset: 3539},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 116, col: 36, offset: 3553},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 116, col: 39, offset: 3556},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 116, col: 41, offset: 3558},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 143, col: 5, offset: 4279},
						run: (*parser).callonShortCut11,
						expr: &seqExpr{
							pos: position{line: 143, col: 5, offset: 4279},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 143, col: 5, offset: 4279},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 7, offset: 4281},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 12, offset: 4286},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 143, col: 15, offset: 4289},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 20, offset: 4294},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 143, col: 34, offset: 4308},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 143, col: 37, offset: 4311},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 39, offset: 4313},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 143, col: 57, offset: 4331},
									expr: &ruleRefExpr{
										pos:  position{line: 143, col: 58, offset: 4332},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 146, col: 5, offset: 4450},
						run: (*parser).callonShortCut23,
						expr: &seqExpr{
							pos: position{line: 146, col: 5, offset: 4450},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 146, col: 5, offset: 4450},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 146, col: 7, offset: 4452},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 19, offset: 4464},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 21, offset: 4466},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 29, offset: 4474},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 146, col: 31, offset: 4476},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 173, col: 5, offset: 5190},
						run: (*parser).callonShortCut31,
						expr: &seqExpr{
							pos: position{line: 173, col: 5, offset: 5190},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 173, col: 5, offset: 5190},
									expr: &seqExpr{
										pos: position{line: 173, col: 7, offset: 5192},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 173, col: 7, offset: 5192},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 173, col: 19, offset: 5204},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 173, col: 24, offset: 5209},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 173, col: 26, offset: 5211},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 173, col: 44, offset: 5229},
									expr: &ruleRefExpr{
										pos:  position{line: 173, col: 45, offset: 5230},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 176, col: 5, offset: 5345},
						run: (*parser).callonShortCut41,
						expr: &seqExpr{
							pos: position{line: 176, col: 5, offset: 5345},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 176, col: 5, offset: 5345},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 176, col: 9, offset: 5349},
									expr: &ruleRefExpr{
										pos:  position{line: 176, col: 10, offset: 5350},
										name: "ExprGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 180, col: 1, offset: 5460},
			expr: &choiceExpr{
				pos: position{line: 181, col: 5, offset: 5476},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 181, col: 5, offset: 5476},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 182, col: 5, offset: 5488},
						run: (*parser).callonSearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 182, col: 5, offset: 5488},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 182, col: 7, offset: 5490},
								name: "KeyWord",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobbySearchValue",
			pos:  position{line: 186, col: 1, offset: 5595},
			expr: &choiceExpr{
				pos: position{line: 187, col: 5, offset: 5617},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 187, col: 5, offset: 5617},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 188, col: 5, offset: 5629},
						run: (*parser).callonGlobbySearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 188, col: 5, offset: 5629},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 188, col: 7, offset: 5631},
								name: "SearchGlob",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchGlob",
			pos:  position{line: 198, col: 1, offset: 5917},
			expr: &actionExpr{
				pos: position{line: 199, col: 5, offset: 5932},
				run: (*parser).callonSearchGlob1,
				expr: &seqExpr{
					pos: position{line: 199, col: 5, offset: 5932},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 199, col: 5, offset: 5932},
							label: "head",
							expr: &oneOrMoreExpr{
								pos: position{line: 199, col: 10, offset: 5937},
								expr: &ruleRefExpr{
									pos:  position{line: 199, col: 10, offset: 5937},
									name: "GlobPart",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 199, col: 20, offset: 5947},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 199, col: 25, offset: 5952},
								expr: &litMatcher{
									pos:        position{line: 199, col: 26, offset: 5953},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPart",
			pos:  position{line: 203, col: 1, offset: 6020},
			expr: &choiceExpr{
				pos: position{line: 204, col: 5, offset: 6033},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 204, col: 5, offset: 6033},
						run: (*parser).callonGlobPart2,
						expr: &seqExpr{
							pos: position{line: 204, col: 5, offset: 6033},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 204, col: 5, offset: 6033},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 7, offset: 6035},
										name: "Stars",
									},
								},
								&labeledExpr{
									pos:   position{line: 204, col: 13, offset: 6041},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 204, col: 15, offset: 6043},
										name: "KeyWord",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 5, offset: 6093},
						name: "KeyWord",
					},
				},
			},
		},
		{
			name: "Stars",
			pos:  position{line: 207, col: 1, offset: 6102},
			expr: &actionExpr{
				pos: position{line: 207, col: 9, offset: 6110},
				run: (*parser).callonStars1,
				expr: &oneOrMoreExpr{
					pos: position{line: 207, col: 9, offset: 6110},
					expr: &litMatcher{
						pos:        position{line: 207, col: 9, offset: 6110},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 209, col: 1, offset: 6147},
			expr: &choiceExpr{
				pos: position{line: 210, col: 5, offset: 6163},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 210, col: 5, offset: 6163},
						name: "SqlTokenSentinels",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 5, offset: 6185},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 5, offset: 6198},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 213, col: 5, offset: 6210},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 214, col: 5, offset: 6223},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 5, offset: 6235},
						name: "ByToken",
					},
					&ruleRefExpr{
						pos:  position{line: 216, col: 5, offset: 6247},
						name: "CaseToken",
					},
					&litMatcher{
						pos:        position{line: 217, col: 5, offset: 6261},
						val:        "type(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 221, col: 1, offset: 6318},
			expr: &ruleRefExpr{
				pos:  position{line: 221, col: 14, offset: 6331},
				name: "SearchExprRelative",
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 223, col: 1, offset: 6351},
			expr: &actionExpr{
				pos: position{line: 223, col: 14, offset: 6364},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 223, col: 15, offset: 6365},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 223, col: 15, offset: 6365},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 21, offset: 6371},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 28, offset: 6378},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 35, offset: 6385},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 42, offset: 6392},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 48, offset: 6398},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 223, col: 55, offset: 6405},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchExprRelative",
			pos:  position{line: 225, col: 1, offset: 6442},
			expr: &actionExpr{
				pos: position{line: 226, col: 5, offset: 6465},
				run: (*parser).callonSearchExprRelative1,
				expr: &seqExpr{
					pos: position{line: 226, col: 5, offset: 6465},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 226, col: 5, offset: 6465},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 11, offset: 6471},
								name: "SearchExprAdd",
							},
						},
						&labeledExpr{
							pos:   position{line: 227, col: 5, offset: 6489},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 227, col: 10, offset: 6494},
								expr: &actionExpr{
									pos: position{line: 227, col: 11, offset: 6495},
									run: (*parser).callonSearchExprRelative7,
									expr: &seqExpr{
										pos: position{line: 227, col: 11, offset: 6495},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 227, col: 11, offset: 6495},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 227, col: 14, offset: 6498},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 227, col: 17, offset: 6501},
													name: "Comparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 227, col: 28, offset: 6512},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 227, col: 31, offset: 6515},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 227, col: 36, offset: 6520},
													name: "SearchExprAdd",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprAdd",
			pos:  position{line: 231, col: 1, offset: 6637},
			expr: &actionExpr{
				pos: position{line: 232, col: 5, offset: 6655},
				run: (*parser).callonSearchExprAdd1,
				expr: &seqExpr{
					pos: position{line: 232, col: 5, offset: 6655},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 232, col: 5, offset: 6655},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 11, offset: 6661},
								name: "SearchExprMul",
							},
						},
						&labeledExpr{
							pos:   position{line: 233, col: 5, offset: 6679},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 233, col: 10, offset: 6684},
								expr: &actionExpr{
									pos: position{line: 233, col: 11, offset: 6685},
									run: (*parser).callonSearchExprAdd7,
									expr: &seqExpr{
										pos: position{line: 233, col: 11, offset: 6685},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 233, col: 11, offset: 6685},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 233, col: 14, offset: 6688},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 233, col: 17, offset: 6691},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 233, col: 34, offset: 6708},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 233, col: 37, offset: 6711},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 233, col: 42, offset: 6716},
													name: "SearchExprMul",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprMul",
			pos:  position{line: 237, col: 1, offset: 6833},
			expr: &actionExpr{
				pos: position{line: 238, col: 5, offset: 6851},
				run: (*parser).callonSearchExprMul1,
				expr: &seqExpr{
					pos: position{line: 238, col: 5, offset: 6851},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 238, col: 5, offset: 6851},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 238, col: 11, offset: 6857},
								name: "SearchExprCast",
							},
						},
						&labeledExpr{
							pos:   position{line: 239, col: 5, offset: 6876},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 239, col: 10, offset: 6881},
								expr: &actionExpr{
									pos: position{line: 239, col: 11, offset: 6882},
									run: (*parser).callonSearchExprMul7,
									expr: &seqExpr{
										pos: position{line: 239, col: 11, offset: 6882},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 239, col: 11, offset: 6882},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 239, col: 14, offset: 6885},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 239, col: 17, offset: 6888},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 239, col: 40, offset: 6911},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 239, col: 43, offset: 6914},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 239, col: 48, offset: 6919},
													name: "SearchExprCast",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprCast",
			pos:  position{line: 243, col: 1, offset: 7037},
			expr: &choiceExpr{
				pos: position{line: 244, col: 5, offset: 7056},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 244, col: 5, offset: 7056},
						run: (*parser).callonSearchExprCast2,
						expr: &seqExpr{
							pos: position{line: 244, col: 5, offset: 7056},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 244, col: 5, offset: 7056},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 244, col: 7, offset: 7058},
										name: "SearchExprFunc",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 244, col: 22, offset: 7073},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 244, col: 25, offset: 7076},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 244, col: 29, offset: 7080},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 244, col: 32, offset: 7083},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 244, col: 36, offset: 7087},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 247, col: 5, offset: 7191},
						name: "SearchExprFunc",
					},
				},
			},
		},
		{
			name: "SearchExprFunc",
			pos:  position{line: 249, col: 1, offset: 7207},
			expr: &choiceExpr{
				pos: position{line: 250, col: 5, offset: 7226},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 250, col: 5, offset: 7226},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 7240},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 252, col: 5, offset: 7256},
						run: (*parser).callonSearchExprFunc4,
						expr: &seqExpr{
							pos: position{line: 252, col: 5, offset: 7256},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 252, col: 5, offset: 7256},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 252, col: 11, offset: 7262},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 252, col: 20, offset: 7271},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 252, col: 25, offset: 7276},
										expr: &ruleRefExpr{
											pos:  position{line: 252, col: 26, offset: 7277},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 7349},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7361},
						name: "DerefExpr",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 260, col: 1, offset: 7398},
			expr: &choiceExpr{
				pos: position{line: 261, col: 5, offset: 7414},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 261, col: 5, offset: 7414},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 261, col: 5, offset: 7414},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 261, col: 5, offset: 7414},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 261, col: 15, offset: 7424},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 21, offset: 7430},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 261, col: 30, offset: 7439},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 35, offset: 7444},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 261, col: 47, offset: 7456},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 53, offset: 7462},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 264, col: 5, offset: 7611},
						run: (*parser).callonAggregation11,
						expr: &seqExpr{
							pos: position{line: 264, col: 5, offset: 7611},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 264, col: 5, offset: 7611},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 264, col: 15, offset: 7621},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 21, offset: 7627},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 264, col: 30, offset: 7636},
									label: "reducers",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 39, offset: 7645},
										name: "Reducers",
									},
								},
								&labeledExpr{
									pos:   position{line: 264, col: 48, offset: 7654},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 264, col: 53, offset: 7659},
										expr: &seqExpr{
											pos: position{line: 264, col: 54, offset: 7660},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 264, col: 54, offset: 7660},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 264, col: 56, offset: 7662},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 264, col: 70, offset: 7676},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 76, offset: 7682},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 272, col: 1, offset: 7923},
			expr: &choiceExpr{
				pos: position{line: 272, col: 13, offset: 7935},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 272, col: 13, offset: 7935},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 272, col: 13, offset: 7935},
								val:        "summarize",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 272, col: 25, offset: 7947},
								name: "_",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 272, col: 29, offset: 7951},
						val:        "",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 274, col: 1, offset: 7955},
			expr: &choiceExpr{
				pos: position{line: 275, col: 5, offset: 7968},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 275, col: 5, offset: 7968},
						run: (*parser).callonEveryDur2,
						expr: &seqExpr{
							pos: position{line: 275, col: 5, offset: 7968},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 275, col: 5, offset: 7968},
									val:        "every",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 275, col: 14, offset: 7977},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 275, col: 16, offset: 7979},
									label: "dur",
									expr: &ruleRefExpr{
										pos:  position{line: 275, col: 20, offset: 7983},
										name: "Duration",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 275, col: 29, offset: 7992},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 276, col: 5, offset: 8018},
						run: (*parser).callonEveryDur9,
						expr: &litMatcher{
							pos:        position{line: 276, col: 5, offset: 8018},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 278, col: 1, offset: 8043},
			expr: &actionExpr{
				pos: position{line: 279, col: 5, offset: 8059},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 279, col: 5, offset: 8059},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 279, col: 5, offset: 8059},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 279, col: 13, offset: 8067},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 279, col: 15, offset: 8069},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 23, offset: 8077},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 281, col: 1, offset: 8118},
			expr: &choiceExpr{
				pos: position{line: 282, col: 5, offset: 8131},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 282, col: 5, offset: 8131},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 282, col: 5, offset: 8131},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 282, col: 5, offset: 8131},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 282, col: 7, offset: 8133},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 282, col: 14, offset: 8140},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 282, col: 16, offset: 8142},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 282, col: 25, offset: 8151},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 282, col: 27, offset: 8153},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 282, col: 33, offset: 8159},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 283, col: 5, offset: 8190},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 283, col: 5, offset: 8190},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 288, col: 1, offset: 8450},
			expr: &choiceExpr{
				pos: position{line: 289, col: 5, offset: 8469},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 289, col: 5, offset: 8469},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 290, col: 5, offset: 8484},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 290, col: 5, offset: 8484},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 10, offset: 8489},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 292, col: 1, offset: 8579},
			expr: &actionExpr{
				pos: position{line: 293, col: 5, offset: 8599},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 293, col: 5, offset: 8599},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 293, col: 5, offset: 8599},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 293, col: 11, offset: 8605},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 293, col: 26, offset: 8620},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 293, col: 31, offset: 8625},
								expr: &actionExpr{
									pos: position{line: 293, col: 32, offset: 8626},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 293, col: 32, offset: 8626},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 293, col: 32, offset: 8626},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 293, col: 35, offset: 8629},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 293, col: 39, offset: 8633},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 293, col: 42, offset: 8636},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 293, col: 47, offset: 8641},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerAssignment",
			pos:  position{line: 297, col: 1, offset: 8763},
			expr: &choiceExpr{
				pos: position{line: 298, col: 5, offset: 8785},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 298, col: 5, offset: 8785},
						run: (*parser).callonReducerAssignment2,
						expr: &seqExpr{
							pos: position{line: 298, col: 5, offset: 8785},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 298, col: 5, offset: 8785},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 298, col: 10, offset: 8790},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 298, col: 15, offset: 8795},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 298, col: 18, offset: 8798},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 298, col: 22, offset: 8802},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 298, col: 25, offset: 8805},
									label: "reducer",
									expr: &ruleRefExpr{
										pos:  position{line: 298, col: 33, offset: 8813},
										name: "Reducer",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 301, col: 5, offset: 8923},
						run: (*parser).callonReducerAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 301, col: 5, offset: 8923},
							label: "reducer",
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 13, offset: 8931},
								name: "Reducer",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducer",
			pos:  position{line: 305, col: 1, offset: 9037},
			expr: &actionExpr{
				pos: position{line: 306, col: 5, offset: 9049},
				run: (*parser).callonReducer1,
				expr: &seqExpr{
					pos: position{line: 306, col: 5, offset: 9049},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 306, col: 5, offset: 9049},
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 6, offset: 9050},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 306, col: 16, offset: 9060},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 19, offset: 9063},
								name: "ReducerName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 31, offset: 9075},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 306, col: 34, offset: 9078},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 38, offset: 9082},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 306, col: 41, offset: 9085},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 306, col: 46, offset: 9090},
								expr: &ruleRefExpr{
									pos:  position{line: 306, col: 46, offset: 9090},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 53, offset: 9097},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 306, col: 56, offset: 9100},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 306, col: 60, offset: 9104},
							expr: &seqExpr{
								pos: position{line: 306, col: 62, offset: 9106},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 306, col: 62, offset: 9106},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 306, col: 65, offset: 9109},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 306, col: 70, offset: 9114},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 306, col: 76, offset: 9120},
								expr: &ruleRefExpr{
									pos:  position{line: 306, col: 76, offset: 9120},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerName",
			pos:  position{line: 314, col: 1, offset: 9316},
			expr: &choiceExpr{
				pos: position{line: 315, col: 5, offset: 9332},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 315, col: 5, offset: 9332},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 316, col: 5, offset: 9351},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 317, col: 5, offset: 9364},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 319, col: 1, offset: 9373},
			expr: &actionExpr{
				pos: position{line: 319, col: 15, offset: 9387},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 319, col: 15, offset: 9387},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 319, col: 15, offset: 9387},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 319, col: 17, offset: 9389},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 319, col: 25, offset: 9397},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 319, col: 27, offset: 9399},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 319, col: 32, offset: 9404},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducers",
			pos:  position{line: 321, col: 1, offset: 9440},
			expr: &actionExpr{
				pos: position{line: 322, col: 5, offset: 9453},
				run: (*parser).callonReducers1,
				expr: &seqExpr{
					pos: position{line: 322, col: 5, offset: 9453},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 322, col: 5, offset: 9453},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 11, offset: 9459},
								name: "ReducerAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 29, offset: 9477},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 322, col: 34, offset: 9482},
								expr: &seqExpr{
									pos: position{line: 322, col: 35, offset: 9483},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 322, col: 35, offset: 9483},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 322, col: 38, offset: 9486},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 322, col: 42, offset: 9490},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 322, col: 45, offset: 9493},
											name: "ReducerAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 332, col: 1, offset: 9733},
			expr: &choiceExpr{
				pos: position{line: 333, col: 5, offset: 9746},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 333, col: 5, offset: 9746},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 334, col: 5, offset: 9759},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 335, col: 5, offset: 9771},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 336, col: 5, offset: 9783},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 337, col: 5, offset: 9796},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 338, col: 5, offset: 9809},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 339, col: 5, offset: 9822},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 5, offset: 9835},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 341, col: 5, offset: 9850},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 342, col: 5, offset: 9863},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 343, col: 5, offset: 9875},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 344, col: 5, offset: 9890},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 345, col: 5, offset: 9903},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 346, col: 5, offset: 9916},
						name: "TasteProc",
					},
					&ruleRefExpr{
						pos:  position{line: 347, col: 5, offset: 9930},
						name: "SqlProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 349, col: 1, offset: 9939},
			expr: &actionExpr{
				pos: position{line: 350, col: 5, offset: 9952},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 350, col: 5, offset: 9952},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 5, offset: 9952},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 350, col: 13, offset: 9960},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 18, offset: 9965},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 350, col: 27, offset: 9974},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 350, col: 32, offset: 9979},
								expr: &actionExpr{
									pos: position{line: 350, col: 33, offset: 9980},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 350, col: 33, offset: 9980},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 350, col: 33, offset: 9980},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 350, col: 35, offset: 9982},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 350, col: 37, offset: 9984},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 364, col: 1, offset: 10403},
			expr: &actionExpr{
				pos: position{line: 364, col: 12, offset: 10414},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 364, col: 12, offset: 10414},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 364, col: 17, offset: 10419},
						expr: &actionExpr{
							pos: position{line: 364, col: 18, offset: 10420},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 364, col: 18, offset: 10420},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 364, col: 18, offset: 10420},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 364, col: 20, offset: 10422},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 364, col: 22, offset: 10424},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 366, col: 1, offset: 10480},
			expr: &choiceExpr{
				pos: position{line: 367, col: 5, offset: 10492},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 367, col: 5, offset: 10492},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 367, col: 5, offset: 10492},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 368, col: 5, offset: 10567},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 368, col: 5, offset: 10567},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 368, col: 5, offset: 10567},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 368, col: 14, offset: 10576},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 368, col: 16, offset: 10578},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 368, col: 23, offset: 10585},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 368, col: 24, offset: 10586},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 368, col: 24, offset: 10586},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 368, col: 34, offset: 10596},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 370, col: 1, offset: 10710},
			expr: &actionExpr{
				pos: position{line: 371, col: 5, offset: 10722},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 371, col: 5, offset: 10722},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 5, offset: 10722},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 371, col: 12, offset: 10729},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 371, col: 18, offset: 10735},
								expr: &actionExpr{
									pos: position{line: 371, col: 19, offset: 10736},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 371, col: 19, offset: 10736},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 371, col: 19, offset: 10736},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 371, col: 21, offset: 10738},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 371, col: 23, offset: 10740},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 371, col: 47, offset: 10764},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 371, col: 53, offset: 10770},
								expr: &seqExpr{
									pos: position{line: 371, col: 54, offset: 10771},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 371, col: 54, offset: 10771},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 371, col: 56, offset: 10773},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 371, col: 67, offset: 10784},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 371, col: 74, offset: 10791},
								expr: &actionExpr{
									pos: position{line: 371, col: 75, offset: 10792},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 371, col: 75, offset: 10792},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 371, col: 75, offset: 10792},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 371, col: 77, offset: 10794},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 371, col: 79, offset: 10796},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 385, col: 1, offset: 11147},
			expr: &actionExpr{
				pos: position{line: 386, col: 5, offset: 11159},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 386, col: 5, offset: 11159},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 386, col: 5, offset: 11159},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 386, col: 12, offset: 11166},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 386, col: 14, offset: 11168},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 386, col: 22, offset: 11176},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 390, col: 1, offset: 11278},
			expr: &actionExpr{
				pos: position{line: 391, col: 5, offset: 11291},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 391, col: 5, offset: 11291},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 391, col: 5, offset: 11291},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 391, col: 13, offset: 11299},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 391, col: 15, offset: 11301},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 23, offset: 11309},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 395, col: 1, offset: 11412},
			expr: &actionExpr{
				pos: position{line: 396, col: 5, offset: 11425},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 396, col: 5, offset: 11425},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 396, col: 5, offset: 11425},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 396, col: 13, offset: 11433},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 396, col: 15, offset: 11435},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 23, offset: 11443},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 400, col: 1, offset: 11541},
			expr: &choiceExpr{
				pos: position{line: 401, col: 5, offset: 11554},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 401, col: 5, offset: 11554},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 401, col: 5, offset: 11554},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 401, col: 5, offset: 11554},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 401, col: 13, offset: 11562},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 401, col: 15, offset: 11564},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 401, col: 21, offset: 11570},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 402, col: 5, offset: 11652},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 402, col: 5, offset: 11652},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 404, col: 1, offset: 11730},
			expr: &choiceExpr{
				pos: position{line: 405, col: 5, offset: 11743},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 405, col: 5, offset: 11743},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 405, col: 5, offset: 11743},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 405, col: 5, offset: 11743},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 405, col: 13, offset: 11751},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 405, col: 15, offset: 11753},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 405, col: 21, offset: 11759},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 406, col: 5, offset: 11841},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 406, col: 5, offset: 11841},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 408, col: 1, offset: 11919},
			expr: &actionExpr{
				pos: position{line: 409, col: 5, offset: 11934},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 409, col: 5, offset: 11934},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 409, col: 5, offset: 11934},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 409, col: 15, offset: 11944},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 409, col: 17, offset: 11946},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 409, col: 20, offset: 11949},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 413, col: 1, offset: 11986},
			expr: &actionExpr{
				pos: position{line: 414, col: 5, offset: 11997},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 414, col: 5, offset: 11997},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 414, col: 10, offset: 12002},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 418, col: 1, offset: 12102},
			expr: &choiceExpr{
				pos: position{line: 419, col: 5, offset: 12115},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 419, col: 5, offset: 12115},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 419, col: 5, offset: 12115},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 419, col: 5, offset: 12115},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 419, col: 13, offset: 12123},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 419, col: 15, offset: 12125},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 422, col: 5, offset: 12216},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 422, col: 5, offset: 12216},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 426, col: 1, offset: 12308},
			expr: &actionExpr{
				pos: position{line: 427, col: 5, offset: 12320},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 427, col: 5, offset: 12320},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 427, col: 5, offset: 12320},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 427, col: 12, offset: 12327},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 427, col: 14, offset: 12329},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 22, offset: 12337},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 431, col: 1, offset: 12440},
			expr: &actionExpr{
				pos: position{line: 432, col: 5, offset: 12455},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 432, col: 5, offset: 12455},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 432, col: 5, offset: 12455},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 432, col: 15, offset: 12465},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 432, col: 17, offset: 12467},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 23, offset: 12473},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 432, col: 34, offset: 12484},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 432, col: 39, offset: 12489},
								expr: &actionExpr{
									pos: position{line: 432, col: 40, offset: 12490},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 432, col: 40, offset: 12490},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 432, col: 40, offset: 12490},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 432, col: 43, offset: 12493},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 432, col: 47, offset: 12497},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 432, col: 50, offset: 12500},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 432, col: 53, offset: 12503},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 440, col: 1, offset: 12914},
			expr: &actionExpr{
				pos: position{line: 441, col: 5, offset: 12927},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 441, col: 5, offset: 12927},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 441, col: 5, offset: 12927},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 441, col: 13, offset: 12935},
							expr: &seqExpr{
								pos: position{line: 441, col: 15, offset: 12937},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 441, col: 15, offset: 12937},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 441, col: 18, offset: 12940},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 445, col: 1, offset: 13013},
			expr: &choiceExpr{
				pos: position{line: 446, col: 5, offset: 13026},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 446, col: 5, offset: 13026},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 446, col: 5, offset: 13026},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 446, col: 5, offset: 13026},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 446, col: 10, offset: 13031},
										name: "JoinKind",
									},
								},
								&litMatcher{
									pos:        position{line: 446, col: 19, offset: 13040},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 446, col: 27, offset: 13048},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 446, col: 29, offset: 13050},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 446, col: 37, offset: 13058},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 446, col: 45, offset: 13066},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 446, col: 48, offset: 13069},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 446, col: 52, offset: 13073},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 446, col: 55, offset: 13076},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 446, col: 64, offset: 13085},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 446, col: 72, offset: 13093},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 446, col: 80, offset: 13101},
										expr: &seqExpr{
											pos: position{line: 446, col: 81, offset: 13102},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 446, col: 81, offset: 13102},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 446, col: 83, offset: 13104},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 453, col: 5, offset: 13376},
						run: (*parser).callonJoinProc20,
						expr: &seqExpr{
							pos: position{line: 453, col: 5, offset: 13376},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 453, col: 5, offset: 13376},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 453, col: 10, offset: 13381},
										name: "JoinKind",
									},
								},
								&litMatcher{
									pos:        position{line: 453, col: 20, offset: 13391},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 453, col: 28, offset: 13399},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 453, col: 30, offset: 13401},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 453, col: 34, offset: 13405},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 453, col: 42, offset: 13413},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 453, col: 50, offset: 13421},
										expr: &seqExpr{
											pos: position{line: 453, col: 51, offset: 13422},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 453, col: 51, offset: 13422},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 453, col: 53, offset: 13424},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinKind",
			pos:  position{line: 461, col: 1, offset: 13684},
			expr: &choiceExpr{
				pos: position{line: 462, col: 5, offset: 13697},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 462, col: 5, offset: 13697},
						run: (*parser).callonJoinKind2,
						expr: &seqExpr{
							pos: position{line: 462, col: 5, offset: 13697},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 462, col: 5, offset: 13697},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 462, col: 14, offset: 13706},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 463, col: 5, offset: 13736},
						run: (*parser).callonJoinKind6,
						expr: &seqExpr{
							pos: position{line: 463, col: 5, offset: 13736},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 463, col: 5, offset: 13736},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 463, col: 14, offset: 13745},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 464, col: 5, offset: 13774},
						run: (*parser).callonJoinKind10,
						expr: &seqExpr{
							pos: position{line: 464, col: 5, offset: 13774},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 464, col: 5, offset: 13774},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 464, col: 14, offset: 13783},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 465, col: 5, offset: 13813},
						run: (*parser).callonJoinKind14,
						expr: &litMatcher{
							pos:        position{line: 465, col: 5, offset: 13813},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 467, col: 1, offset: 13849},
			expr: &choiceExpr{
				pos: position{line: 468, col: 5, offset: 13861},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 468, col: 5, offset: 13861},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 469, col: 5, offset: 13870},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 469, col: 5, offset: 13870},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 469, col: 5, offset: 13870},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 469, col: 9, offset: 13874},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 469, col: 14, offset: 13879},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 469, col: 19, offset: 13884},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TasteProc",
			pos:  position{line: 471, col: 1, offset: 13910},
			expr: &actionExpr{
				pos: position{line: 472, col: 5, offset: 13924},
				run: (*parser).callonTasteProc1,
				expr: &seqExpr{
					pos: position{line: 472, col: 5, offset: 13924},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 472, col: 5, offset: 13924},
							val:        "taste",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 472, col: 14, offset: 13933},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 16, offset: 13935},
								name: "TasteExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TasteExpr",
			pos:  position{line: 509, col: 1, offset: 15265},
			expr: &choiceExpr{
				pos: position{line: 510, col: 5, offset: 15279},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 510, col: 5, offset: 15279},
						run: (*parser).callonTasteExpr2,
						expr: &seqExpr{
							pos: position{line: 510, col: 5, offset: 15279},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 510, col: 5, offset: 15279},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 510, col: 7, offset: 15281},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 510, col: 12, offset: 15286},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 511, col: 5, offset: 15315},
						run: (*parser).callonTasteExpr7,
						expr: &litMatcher{
							pos:        position{line: 511, col: 5, offset: 15315},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 515, col: 1, offset: 15402},
			expr: &ruleRefExpr{
				pos:  position{line: 515, col: 8, offset: 15409},
				name: "DerefExpr",
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 517, col: 1, offset: 15420},
			expr: &ruleRefExpr{
				pos:  position{line: 517, col: 13, offset: 15432},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 519, col: 1, offset: 15438},
			expr: &actionExpr{
				pos: position{line: 520, col: 5, offset: 15453},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 520, col: 5, offset: 15453},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 520, col: 5, offset: 15453},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 520, col: 11, offset: 15459},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 520, col: 21, offset: 15469},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 520, col: 26, offset: 15474},
								expr: &seqExpr{
									pos: position{line: 520, col: 27, offset: 15475},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 520, col: 27, offset: 15475},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 520, col: 30, offset: 15478},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 520, col: 34, offset: 15482},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 520, col: 37, offset: 15485},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 530, col: 1, offset: 15684},
			expr: &actionExpr{
				pos: position{line: 531, col: 5, offset: 15694},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 531, col: 5, offset: 15694},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 531, col: 5, offset: 15694},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 531, col: 11, offset: 15700},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 531, col: 16, offset: 15705},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 531, col: 21, offset: 15710},
								expr: &seqExpr{
									pos: position{line: 531, col: 22, offset: 15711},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 531, col: 22, offset: 15711},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 531, col: 25, offset: 15714},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 531, col: 29, offset: 15718},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 531, col: 32, offset: 15721},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 541, col: 1, offset: 15915},
			expr: &actionExpr{
				pos: position{line: 542, col: 5, offset: 15930},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 542, col: 5, offset: 15930},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 542, col: 5, offset: 15930},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 9, offset: 15934},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 542, col: 14, offset: 15939},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 542, col: 17, offset: 15942},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 542, col: 21, offset: 15946},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 542, col: 24, offset: 15949},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 542, col: 28, offset: 15953},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 544, col: 1, offset: 16042},
			expr: &ruleRefExpr{
				pos:  position{line: 544, col: 8, offset: 16049},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 546, col: 1, offset: 16066},
			expr: &choiceExpr{
				pos: position{line: 547, col: 5, offset: 16086},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 547, col: 5, offset: 16086},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 547, col: 5, offset: 16086},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 547, col: 5, offset: 16086},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 547, col: 15, offset: 16096},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 547, col: 29, offset: 16110},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 547, col: 32, offset: 16113},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 547, col: 36, offset: 16117},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 547, col: 39, offset: 16120},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 547, col: 50, offset: 16131},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 547, col: 55, offset: 16136},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 547, col: 58, offset: 16139},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 547, col: 62, offset: 16143},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 547, col: 65, offset: 16146},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 547, col: 76, offset: 16157},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 550, col: 5, offset: 16304},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 552, col: 1, offset: 16319},
			expr: &actionExpr{
				pos: position{line: 553, col: 5, offset: 16337},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 553, col: 5, offset: 16337},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 553, col: 5, offset: 16337},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 11, offset: 16343},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 5, offset: 16362},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 554, col: 10, offset: 16367},
								expr: &actionExpr{
									pos: position{line: 554, col: 11, offset: 16368},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 554, col: 11, offset: 16368},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 554, col: 11, offset: 16368},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 554, col: 14, offset: 16371},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 554, col: 17, offset: 16374},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 554, col: 25, offset: 16382},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 554, col: 28, offset: 16385},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 554, col: 33, offset: 16390},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 558, col: 1, offset: 16508},
			expr: &actionExpr{
				pos: position{line: 559, col: 5, offset: 16527},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 559, col: 5, offset: 16527},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 559, col: 5, offset: 16527},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 11, offset: 16533},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 5, offset: 16557},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 560, col: 10, offset: 16562},
								expr: &actionExpr{
									pos: position{line: 560, col: 11, offset: 16563},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 560, col: 11, offset: 16563},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 560, col: 11, offset: 16563},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 560, col: 14, offset: 16566},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 560, col: 17, offset: 16569},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 560, col: 26, offset: 16578},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 560, col: 29, offset: 16581},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 560, col: 34, offset: 16586},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 564, col: 1, offset: 16709},
			expr: &actionExpr{
				pos: position{line: 565, col: 5, offset: 16733},
				run: (*parser).callonEqualityCompareExpr1,
				expr: &seqExpr{
					pos: position{line: 565, col: 5, offset: 16733},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 565, col: 5, offset: 16733},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 11, offset: 16739},
								name: "RelativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 5, offset: 16756},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 566, col: 10, offset: 16761},
								expr: &actionExpr{
									pos: position{line: 566, col: 11, offset: 16762},
									run: (*parser).callonEqualityCompareExpr7,
									expr: &seqExpr{
										pos: position{line: 566, col: 11, offset: 16762},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 566, col: 11, offset: 16762},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 566, col: 14, offset: 16765},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 566, col: 19, offset: 16770},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 566, col: 38, offset: 16789},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 566, col: 41, offset: 16792},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 566, col: 46, offset: 16797},
													name: "RelativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 570, col: 1, offset: 16915},
			expr: &actionExpr{
				pos: position{line: 571, col: 5, offset: 16936},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 571, col: 6, offset: 16937},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 571, col: 6, offset: 16937},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 571, col: 12, offset: 16943},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 573, col: 1, offset: 16981},
			expr: &choiceExpr{
				pos: position{line: 574, col: 5, offset: 17004},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 574, col: 5, offset: 17004},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 575, col: 5, offset: 17025},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 575, col: 5, offset: 17025},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 577, col: 1, offset: 17062},
			expr: &actionExpr{
				pos: position{line: 578, col: 5, offset: 17079},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 578, col: 5, offset: 17079},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 578, col: 5, offset: 17079},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 578, col: 11, offset: 17085},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 579, col: 5, offset: 17102},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 579, col: 10, offset: 17107},
								expr: &actionExpr{
									pos: position{line: 579, col: 11, offset: 17108},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 579, col: 11, offset: 17108},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 579, col: 11, offset: 17108},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 579, col: 14, offset: 17111},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 579, col: 17, offset: 17114},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 579, col: 34, offset: 17131},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 579, col: 37, offset: 17134},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 579, col: 42, offset: 17139},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 583, col: 1, offset: 17255},
			expr: &actionExpr{
				pos: position{line: 583, col: 20, offset: 17274},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 583, col: 21, offset: 17275},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 583, col: 21, offset: 17275},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 583, col: 28, offset: 17282},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 583, col: 34, offset: 17288},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 583, col: 41, offset: 17295},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 585, col: 1, offset: 17332},
			expr: &actionExpr{
				pos: position{line: 586, col: 5, offset: 17349},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 586, col: 5, offset: 17349},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 586, col: 5, offset: 17349},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 11, offset: 17355},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 587, col: 5, offset: 17378},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 587, col: 10, offset: 17383},
								expr: &actionExpr{
									pos: position{line: 587, col: 11, offset: 17384},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 587, col: 11, offset: 17384},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 587, col: 11, offset: 17384},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 587, col: 14, offset: 17387},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 587, col: 17, offset: 17390},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 587, col: 34, offset: 17407},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 587, col: 37, offset: 17410},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 587, col: 42, offset: 17415},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 591, col: 1, offset: 17537},
			expr: &actionExpr{
				pos: position{line: 591, col: 20, offset: 17556},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 591, col: 21, offset: 17557},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 591, col: 21, offset: 17557},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 591, col: 27, offset: 17563},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 593, col: 1, offset: 17600},
			expr: &actionExpr{
				pos: position{line: 594, col: 5, offset: 17623},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 594, col: 5, offset: 17623},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 594, col: 5, offset: 17623},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 11, offset: 17629},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 595, col: 5, offset: 17641},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 595, col: 10, offset: 17646},
								expr: &actionExpr{
									pos: position{line: 595, col: 11, offset: 17647},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 595, col: 11, offset: 17647},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 595, col: 11, offset: 17647},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 595, col: 14, offset: 17650},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 595, col: 17, offset: 17653},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 595, col: 40, offset: 17676},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 595, col: 43, offset: 17679},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 595, col: 48, offset: 17684},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 599, col: 1, offset: 17795},
			expr: &actionExpr{
				pos: position{line: 599, col: 26, offset: 17820},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 599, col: 27, offset: 17821},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 599, col: 27, offset: 17821},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 599, col: 33, offset: 17827},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 601, col: 1, offset: 17864},
			expr: &choiceExpr{
				pos: position{line: 602, col: 5, offset: 17876},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 602, col: 5, offset: 17876},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 602, col: 5, offset: 17876},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 602, col: 5, offset: 17876},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 602, col: 9, offset: 17880},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 602, col: 12, offset: 17883},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 602, col: 14, offset: 17885},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 605, col: 5, offset: 17998},
						name: "CastExpr",
					},
				},
			},
		},
		{
			name: "CastExpr",
			pos:  position{line: 607, col: 1, offset: 18008},
			expr: &choiceExpr{
				pos: position{line: 608, col: 5, offset: 18021},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 608, col: 5, offset: 18021},
						run: (*parser).callonCastExpr2,
						expr: &seqExpr{
							pos: position{line: 608, col: 5, offset: 18021},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 608, col: 5, offset: 18021},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 608, col: 7, offset: 18023},
										name: "FuncExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 608, col: 16, offset: 18032},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 608, col: 19, offset: 18035},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 608, col: 23, offset: 18039},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 608, col: 26, offset: 18042},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 608, col: 30, offset: 18046},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 611, col: 5, offset: 18150},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 613, col: 1, offset: 18160},
			expr: &choiceExpr{
				pos: position{line: 614, col: 5, offset: 18173},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 614, col: 5, offset: 18173},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 615, col: 5, offset: 18188},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 616, col: 5, offset: 18202},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 617, col: 5, offset: 18218},
						run: (*parser).callonFuncExpr5,
						expr: &seqExpr{
							pos: position{line: 617, col: 5, offset: 18218},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 617, col: 5, offset: 18218},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 617, col: 11, offset: 18224},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 617, col: 20, offset: 18233},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 617, col: 25, offset: 18238},
										expr: &ruleRefExpr{
											pos:  position{line: 617, col: 26, offset: 18239},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 620, col: 5, offset: 18310},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 621, col: 5, offset: 18324},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 623, col: 1, offset: 18333},
			expr: &seqExpr{
				pos: position{line: 623, col: 13, offset: 18345},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 623, col: 13, offset: 18345},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 623, col: 22, offset: 18354},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 623, col: 25, offset: 18357},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 625, col: 1, offset: 18362},
			expr: &choiceExpr{
				pos: position{line: 626, col: 5, offset: 18375},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 626, col: 5, offset: 18375},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 627, col: 5, offset: 18385},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 628, col: 5, offset: 18397},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 629, col: 5, offset: 18410},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 631, col: 1, offset: 18418},
			expr: &actionExpr{
				pos: position{line: 632, col: 5, offset: 18432},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 632, col: 5, offset: 18432},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 632, col: 5, offset: 18432},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 632, col: 13, offset: 18440},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 632, col: 16, offset: 18443},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 632, col: 20, offset: 18447},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 25, offset: 18452},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 632, col: 39, offset: 18466},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 634, col: 1, offset: 18492},
			expr: &actionExpr{
				pos: position{line: 635, col: 5, offset: 18507},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 635, col: 5, offset: 18507},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 635, col: 5, offset: 18507},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 635, col: 14, offset: 18516},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 635, col: 17, offset: 18519},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 635, col: 21, offset: 18523},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 635, col: 24, offset: 18526},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 29, offset: 18531},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 635, col: 42, offset: 18544},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 635, col: 45, offset: 18547},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 635, col: 49, offset: 18551},
							label: "methods",
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 57, offset: 18559},
								name: "Methods",
							},
						},
					},
				},
			},
		},
		{
			name: "Methods",
			pos:  position{line: 643, col: 1, offset: 18955},
			expr: &choiceExpr{
				pos: position{line: 644, col: 5, offset: 18967},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 644, col: 5, offset: 18967},
						run: (*parser).callonMethods2,
						expr: &labeledExpr{
							pos:   position{line: 644, col: 5, offset: 18967},
							label: "methods",
							expr: &oneOrMoreExpr{
								pos: position{line: 644, col: 13, offset: 18975},
								expr: &ruleRefExpr{
									pos:  position{line: 644, col: 13, offset: 18975},
									name: "Method",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 645, col: 5, offset: 19011},
						run: (*parser).callonMethods6,
						expr: &litMatcher{
							pos:        position{line: 645, col: 5, offset: 19011},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Method",
			pos:  position{line: 647, col: 1, offset: 19035},
			expr: &actionExpr{
				pos: position{line: 648, col: 5, offset: 19046},
				run: (*parser).callonMethod1,
				expr: &seqExpr{
					pos: position{line: 648, col: 5, offset: 19046},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 648, col: 5, offset: 19046},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 648, col: 8, offset: 19049},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 648, col: 12, offset: 19053},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 648, col: 15, offset: 19056},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 17, offset: 19058},
								name: "Function",
							},
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 650, col: 1, offset: 19086},
			expr: &actionExpr{
				pos: position{line: 651, col: 5, offset: 19099},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 651, col: 5, offset: 19099},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 651, col: 5, offset: 19099},
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 6, offset: 19100},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 651, col: 16, offset: 19110},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 19, offset: 19113},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 651, col: 34, offset: 19128},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 651, col: 37, offset: 19131},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 651, col: 41, offset: 19135},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 651, col: 44, offset: 19138},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 49, offset: 19143},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 651, col: 62, offset: 19156},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 651, col: 65, offset: 19159},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ArgumentList",
			pos:  position{line: 655, col: 1, offset: 19265},
			expr: &choiceExpr{
				pos: position{line: 656, col: 5, offset: 19282},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 656, col: 5, offset: 19282},
						run: (*parser).callonArgumentList2,
						expr: &seqExpr{
							pos: position{line: 656, col: 5, offset: 19282},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 656, col: 5, offset: 19282},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 656, col: 11, offset: 19288},
										name: "Expr",
									},
								},
								&labeledExpr{
									pos:   position{line: 656, col: 16, offset: 19293},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 656, col: 21, offset: 19298},
										expr: &actionExpr{
											pos: position{line: 656, col: 22, offset: 19299},
											run: (*parser).callonArgumentList8,
											expr: &seqExpr{
												pos: position{line: 656, col: 22, offset: 19299},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 656, col: 22, offset: 19299},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 656, col: 25, offset: 19302},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 656, col: 29, offset: 19306},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 656, col: 32, offset: 19309},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 656, col: 34, offset: 19311},
															name: "Expr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 659, col: 5, offset: 19423},
						run: (*parser).callonArgumentList15,
						expr: &ruleRefExpr{
							pos:  position{line: 659, col: 5, offset: 19423},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 661, col: 1, offset: 19459},
			expr: &choiceExpr{
				pos: position{line: 662, col: 5, offset: 19473},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 662, col: 5, offset: 19473},
						run: (*parser).callonDerefExpr2,
						expr: &seqExpr{
							pos: position{line: 662, col: 5, offset: 19473},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 662, col: 5, offset: 19473},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 662, col: 11, offset: 19479},
										name: "DotId",
									},
								},
								&labeledExpr{
									pos:   position{line: 662, col: 17, offset: 19485},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 662, col: 22, offset: 19490},
										expr: &ruleRefExpr{
											pos:  position{line: 662, col: 23, offset: 19491},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 665, col: 5, offset: 19562},
						run: (*parser).callonDerefExpr9,
						expr: &seqExpr{
							pos: position{line: 665, col: 5, offset: 19562},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 665, col: 5, offset: 19562},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 665, col: 11, offset: 19568},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 665, col: 22, offset: 19579},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 665, col: 27, offset: 19584},
										expr: &ruleRefExpr{
											pos:  position{line: 665, col: 28, offset: 19585},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 668, col: 5, offset: 19656},
						run: (*parser).callonDerefExpr16,
						expr: &litMatcher{
							pos:        position{line: 668, col: 5, offset: 19656},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DotId",
			pos:  position{line: 672, col: 1, offset: 19729},
			expr: &choiceExpr{
				pos: position{line: 673, col: 5, offset: 19739},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 673, col: 5, offset: 19739},
						run: (*parser).callonDotId2,
						expr: &seqExpr{
							pos: position{line: 673, col: 5, offset: 19739},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 673, col: 5, offset: 19739},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 673, col: 9, offset: 19743},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 673, col: 15, offset: 19749},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 682, col: 5, offset: 19973},
						run: (*parser).callonDotId7,
						expr: &seqExpr{
							pos: position{line: 682, col: 5, offset: 19973},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 682, col: 5, offset: 19973},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 682, col: 9, offset: 19977},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 682, col: 13, offset: 19981},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 682, col: 18, offset: 19986},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 682, col: 23, offset: 19991},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 692, col: 1, offset: 20204},
			expr: &choiceExpr{
				pos: position{line: 693, col: 5, offset: 20214},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 693, col: 5, offset: 20214},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 693, col: 5, offset: 20214},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 693, col: 5, offset: 20214},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 693, col: 9, offset: 20218},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 693, col: 14, offset: 20223},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 693, col: 27, offset: 20236},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 693, col: 30, offset: 20239},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 693, col: 34, offset: 20243},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 693, col: 37, offset: 20246},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 693, col: 40, offset: 20249},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 693, col: 53, offset: 20262},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 699, col: 5, offset: 20437},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 699, col: 5, offset: 20437},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 699, col: 5, offset: 20437},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 699, col: 9, offset: 20441},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 699, col: 12, offset: 20444},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 699, col: 16, offset: 20448},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 699, col: 19, offset: 20451},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 699, col: 22, offset: 20454},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 699, col: 35, offset: 20467},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 705, col: 5, offset: 20642},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 705, col: 5, offset: 20642},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 705, col: 5, offset: 20642},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 705, col: 9, offset: 20646},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 705, col: 14, offset: 20651},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 705, col: 27, offset: 20664},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 705, col: 30, offset: 20667},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 705, col: 34, offset: 20671},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 705, col: 37, offset: 20674},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 711, col: 5, offset: 20851},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 711, col: 5, offset: 20851},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 711, col: 5, offset: 20851},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 711, col: 9, offset: 20855},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 711, col: 14, offset: 20860},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 711, col: 19, offset: 20865},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 20914},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 712, col: 5, offset: 20914},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 712, col: 5, offset: 20914},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 712, col: 9, offset: 20918},
									expr: &litMatcher{
										pos:        position{line: 712, col: 11, offset: 20920},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 712, col: 16, offset: 20925},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 712, col: 19, offset: 20928},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 714, col: 1, offset: 20979},
			expr: &choiceExpr{
				pos: position{line: 715, col: 5, offset: 20991},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 715, col: 5, offset: 20991},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 716, col: 5, offset: 21003},
						run: (*parser).callonPrimary3,
						expr: &seqExpr{
							pos: position{line: 716, col: 5, offset: 21003},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 716, col: 5, offset: 21003},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 716, col: 9, offset: 21007},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 716, col: 12, offset: 21010},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 716, col: 17, offset: 21015},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 716, col: 22, offset: 21020},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 716, col: 25, offset: 21023},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SqlProc",
			pos:  position{line: 721, col: 1, offset: 21074},
			expr: &actionExpr{
				pos: position{line: 722, col: 5, offset: 21086},
				run: (*parser).callonSqlProc1,
				expr: &seqExpr{
					pos: position{line: 722, col: 5, offset: 21086},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 722, col: 5, offset: 21086},
							label: "selection",
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 15, offset: 21096},
								name: "SqlSelect",
							},
						},
						&labeledExpr{
							pos:   position{line: 723, col: 5, offset: 21110},
							label: "from",
							expr: &ruleRefExpr{
								pos:  position{line: 723, col: 10, offset: 21115},
								name: "SqlFrom",
							},
						},
						&labeledExpr{
							pos:   position{line: 724, col: 5, offset: 21127},
							label: "joins",
							expr: &ruleRefExpr{
								pos:  position{line: 724, col: 11, offset: 21133},
								name: "SqlJoins",
							},
						},
						&labeledExpr{
							pos:   position{line: 725, col: 5, offset: 21146},
							label: "where",
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 11, offset: 21152},
								name: "SqlWhere",
							},
						},
						&labeledExpr{
							pos:   position{line: 726, col: 5, offset: 21165},
							label: "groupby",
							expr: &ruleRefExpr{
								pos:  position{line: 726, col: 13, offset: 21173},
								name: "SqlGroupBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 727, col: 5, offset: 21188},
							label: "having",
							expr: &ruleRefExpr{
								pos:  position{line: 727, col: 12, offset: 21195},
								name: "SqlHaving",
							},
						},
						&labeledExpr{
							pos:   position{line: 728, col: 5, offset: 21209},
							label: "orderby",
							expr: &ruleRefExpr{
								pos:  position{line: 728, col: 13, offset: 21217},
								name: "SqlOrderBy",
							},
						},
						&labeledExpr{
							pos:   position{line: 729, col: 5, offset: 21232},
							label: "limit",
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 11, offset: 21238},
								name: "SqlLimit",
							},
						},
					},
				},
			},
		},
		{
			name: "SqlSelect",
			pos:  position{line: 758, col: 1, offset: 21885},
			expr: &choiceExpr{
				pos: position{line: 759, col: 5, offset: 21899},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 759, col: 5, offset: 21899},
						run: (*parser).callonSqlSelect2,
						expr: &seqExpr{
							pos: position{line: 759, col: 5, offset: 21899},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 759, col: 5, offset: 21899},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 759, col: 12, offset: 21906},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 759, col: 14, offset: 21908},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 760, col: 5, offset: 21936},
						run: (*parser).callonSqlSelect7,
						expr: &seqExpr{
							pos: position{line: 760, col: 5, offset: 21936},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 760, col: 5, offset: 21936},
									name: "SELECT",
								},
								&ruleRefExpr{
									pos:  position{line: 760, col: 12, offset: 21943},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 760, col: 14, offset: 21945},
									label: "assignments",
									expr: &ruleRefExpr{
										pos:  position{line: 760, col: 26, offset: 21957},
										name: "SqlAssignments",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SqlAssignment",
			pos:  position{line: 762, col: 1, offset: 22001},
			expr: &choiceExpr{
				pos: position{line: 763, col: 5, offset: 22019},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 763, col: 5, offset: 22019},
						run: (*parser).callonSqlAssignment2,
						expr: &seqExpr{
							pos: position{line: 763, col: 5, offset: 22019},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 763, col: 5, offset: 22019},
									label: "rhs",
									expr: &ruleRefExpr{
										pos:  position{line: 763, col: 9, offset: 22023},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 763, col: 14, offset: 22028},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 763, col: 16, offset: 22030},
									name: "AS",
								},
								&ruleRefExpr{
									pos:  position{line: 763, col: 19, offset: 22033},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 763, col: 21, offset: 22035},
									label: "lhs",
									expr: &ruleRefExpr{
										pos:  position{line: 763, col: 25, offset: 22039},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 764, col: 5, offset: 22131},
						run: (*parser).callonSqlAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 764, col: 5, offset: 22131},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 764, col: 10, offset: 22136},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "SqlAssignments",
			pos:  position{line: 766, col: 1, offset: 22226},
			expr: &actionExpr{
				pos: position{line: 767, col: 5, offset: 22245},
				run: (*parser).callonSqlAssignments1,
				expr: &seqExpr{
					pos: position{line: 767, col: 5, offset: 22245},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 767, col: 5, offset: 22245},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 11, offset: 22251},
								name: "SqlAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 767, col: 25, offset: 22265},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 767, col: 30, offset: 22270},
								expr: &actionExpr{
									pos: position{line: 767, col: 31, offset: 22271},
									run: (*parser).callonSqlAssignments7,
									expr: &seqExpr{
										pos: position{line: 767, col: 31, offset: 22271},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 767, col: 31, offset: 22271},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 767, col: 34, offset: 22274},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 767, col: 38, offset: 22278},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 767, col: 41, offset: 22281},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 767, col: 46, offset: 22286},
													name: "SqlAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SqlFrom",
			pos:  position{line: 771, col: 1, offset: 22407},
			expr: &choiceExpr{
				pos: position{line: 772, col: 5, offset: 22419},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 772, col: 5, offset: 22419},
						run: (*parser).callonSqlFrom2,
						expr: &seqExpr{
							pos: position{line: 772, col: 5, offset: 22419},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 772, col: 5, offset: 22419},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 772, col: 7, offset: 22421},
									name: "FROM",
								},
								&ruleRefExpr{
									pos:  position{line: 772, col: 12, offset: 22426},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 772, col: 14, offset: 22428},
									label: "table",
									expr: &ruleRefExpr{
										pos:  position{line: 772, col: 20, offset: 22434},
										name: "SqlTable",
									},
								},
								&labeledExpr{
									pos:   position{line: 772, col: 29, offset: 22443},
									label: "alias",
									expr: &ruleRefExpr{
										pos:  position{line: 772, col: 35, offset: 22449},
										name: "SqlAlias",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 775, col: 5, offset: 22543},
						run: (*parser).callonSqlFrom11,
						expr: &litMatcher{
							pos:        position{line: 775, col: 5, offset: 22543},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SqlAlias",
			pos:  position{line: 777, col: 1, offset: 22567},
			expr: &choiceExpr{
				pos: position{line: 778, col: 5, offset: 22580},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 778, col: 5, offset: 22580},
						run: (*parser).callonSqlAlias2,
						expr: &seqExpr{
							pos: position{line: 778, col: 5, offset: 22580},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 778, col: 5, offset: 22580},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 778, col: 7, offset: 22582},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 778, col: 10, offset: 22585},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 779, col: 5, offset: 22613},
						run: (*parser).callonSqlAlias7,
						expr: &litMatcher{
							pos:        position{line: 779, col: 5, offset: 22613},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SqlTable",
			pos:  position{line: 785, col: 1, offset: 22960},
			expr: &choiceExpr{
				pos: position{line: 786, col: 5, offset: 22973},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 786, col: 5, offset: 22973},
						name: "Expr",
					},
					&actionExpr{
						pos: position{line: 787, col: 5, offset: 22982},
						run: (*parser).callonSqlTable3,
						expr: &litMatcher{
							pos:        position{line: 787, col: 5, offset: 22982},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SqlJoins",
			pos:  position{line: 789, col: 1, offset: 23073},
			expr: &choiceExpr{
				pos: position{line: 790, col: 5, offset: 23086},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 790, col: 5, offset: 23086},
						run: (*parser).callonSqlJoins2,
						expr: &seqExpr{
							pos: position{line: 790, col: 5, offset: 23086},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 790, col: 5, offset: 23086},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 790, col: 11, offset: 23092},
										name: "SqlJoin",
									},
								},
								&labeledExpr{
									pos:   position{line: 790, col: 19, offset: 23100},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 790, col: 24, offset: 23105},
										expr: &actionExpr{
											pos: position{line: 790, col: 25, offset: 23106},
											run: (*parser).callonSqlJoins8,
											expr: &labeledExpr{
												pos:   position{line: 790, col: 25, offset: 23106},
												label: "join",
												expr: &ruleRefExpr{
													pos:  position{line: 790, col: 30, offset: 23111},
													name: "SqlJoin",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 793, col: 5, offset: 23229},
						run: (*parser).callonSqlJoins11,
						expr: &litMatcher{
							pos:        position{line: 793, col: 5, offset: 23229},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SqlJoin",
			pos:  position{line: 797, col: 1, offset: 23376},
			expr: &actionExpr{
				pos: position{line: 798, col: 5, offset: 23388},
				run: (*parser).callonSqlJoin1,
				expr: &seqExpr{
					pos: position{line: 798, col: 5, offset: 23388},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 798, col: 5, offset: 23388},
							label: "kind",
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 10, offset: 23393},
								name: "SqlJoinKind",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 798, col: 22, offset: 23405},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 798, col: 24, offset: 23407},
							name: "JOIN",
						},
						&ruleRefExpr{
							pos:  position{line: 798, col: 29, offset: 23412},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 798, col: 31, offset: 23414},
							label: "table",
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 37, offset: 23420},
								name: "SqlTable",
							},
						},
						&labeledExpr{
							pos:   position{line: 798, col: 46, offset: 23429},
							label: "alias",
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 52, offset: 23435},
								name: "SqlAlias",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 798, col: 61, offset: 23444},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 798, col: 63, offset: 23446},
							name: "ON",
						},
						&ruleRefExpr{
							pos:  position{line: 798, col: 66, offset: 23449},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 798, col: 68, offset: 23451},
							label: "leftKey",
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 76, offset: 23459},
								name: "JoinKey",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 798, col: 84, offset: 23467},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 798, col: 87, offset: 23470},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 798, col: 91, offset: 23474},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 798, col: 94, offset: 23477},
							label: "rightKey",
							expr: &ruleRefExpr{
								pos:  position{line: 798, col: 103, offset: 23486},
								name: "JoinKey",
							},
						},
					},
				},
			},
		},
		{
			name: "SqlJoinKind",
			pos:  position{line: 817, col: 1, offset: 23719},
			expr: &choiceExpr{
				pos: position{line: 818, col: 5, offset: 23735},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 818, col: 5, offset: 23735},
						run: (*parser).callonSqlJoinKind2,
						expr: &seqExpr{
							pos: position{line: 818, col: 5, offset: 23735},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 818, col: 5, offset: 23735},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 818, col: 7, offset: 23737},
									label: "kind",
									expr: &choiceExpr{
										pos: position{line: 818, col: 13, offset: 23743},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 818, col: 13, offset: 23743},
												name: "LEFT",
											},
											&ruleRefExpr{
												pos:  position{line: 818, col: 20, offset: 23750},
												name: "RIGHT",
											},
											&ruleRefExpr{
												pos:  position{line: 818, col: 28, offset: 23758},
												name: "INNER",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 819, col: 5, offset: 23790},
						run: (*parser).callonSqlJoinKind10,
						expr: &litMatcher{
							pos:        position{line: 819, col: 5, offset: 23790},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SqlWhere",
			pos:  position{line: 825, col: 1, offset: 24024},
			expr: &choiceExpr{
				pos: position{line: 826, col: 5, offset: 24037},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 826, col: 5, offset: 24037},
						run: (*parser).callonSqlWhere2,
						expr: &seqExpr{
							pos: position{line: 826, col: 5, offset: 24037},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 826, col: 5, offset: 24037},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 826, col: 7, offset: 24039},
									name: "WHERE",
								},
								&ruleRefExpr{
									pos:  position{line: 826, col: 13, offset: 24045},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 826, col: 15, offset: 24047},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 826, col: 20, offset: 24052},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 827, col: 5, offset: 24091},
						run: (*parser).callonSqlWhere9,
						expr: &litMatcher{
							pos:        position{line: 827, col: 5, offset: 24091},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SqlGroupBy",
			pos:  position{line: 829, col: 1, offset: 24115},
			expr: &choiceExpr{
				pos: position{line: 830, col: 5, offset: 24130},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 830, col: 5, offset: 24130},
						run: (*parser).callonSqlGroupBy2,
						expr: &seqExpr{
							pos: position{line: 830, col: 5, offset: 24130},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 830, col: 5, offset: 24130},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 830, col: 7, offset: 24132},
									name: "GROUP",
								},
								&ruleRefExpr{
									pos:  position{line: 830, col: 13, offset: 24138},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 830, col: 15, offset: 24140},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 830, col: 18, offset: 24143},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 830, col: 20, offset: 24145},
									label: "columns",
									expr: &ruleRefExpr{
										pos:  position{line: 830, col: 28, offset: 24153},
										name: "FieldExprs",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 831, col: 5, offset: 24192},
						run: (*parser).callonSqlGroupBy11,
						expr: &litMatcher{
							pos:        position{line: 831, col: 5, offset: 24192},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SqlHaving",
			pos:  position{line: 833, col: 1, offset: 24216},
			expr: &choiceExpr{
				pos: position{line: 834, col: 5, offset: 24230},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 834, col: 5, offset: 24230},
						run: (*parser).callonSqlHaving2,
						expr: &seqExpr{
							pos: position{line: 834, col: 5, offset: 24230},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 834, col: 5, offset: 24230},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 834, col: 7, offset: 24232},
									name: "HAVING",
								},
								&ruleRefExpr{
									pos:  position{line: 834, col: 14, offset: 24239},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 834, col: 16, offset: 24241},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 834, col: 21, offset: 24246},
										name: "SearchBoolean",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 835, col: 5, offset: 24285},
						run: (*parser).callonSqlHaving9,
						expr: &litMatcher{
							pos:        position{line: 835, col: 5, offset: 24285},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SqlOrderBy",
			pos:  position{line: 837, col: 1, offset: 24309},
			expr: &choiceExpr{
				pos: position{line: 838, col: 5, offset: 24324},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 838, col: 5, offset: 24324},
						run: (*parser).callonSqlOrderBy2,
						expr: &seqExpr{
							pos: position{line: 838, col: 5, offset: 24324},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 838, col: 5, offset: 24324},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 838, col: 7, offset: 24326},
									name: "ORDER",
								},
								&ruleRefExpr{
									pos:  position{line: 838, col: 13, offset: 24332},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 838, col: 15, offset: 24334},
									name: "BY",
								},
								&ruleRefExpr{
									pos:  position{line: 838, col: 18, offset: 24337},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 838, col: 20, offset: 24339},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 838, col: 25, offset: 24344},
										name: "Exprs",
									},
								},
								&labeledExpr{
									pos:   position{line: 838, col: 31, offset: 24350},
									label: "direction",
									expr: &ruleRefExpr{
										pos:  position{line: 838, col: 41, offset: 24360},
										name: "SqlDirection",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 841, col: 5, offset: 24483},
						run: (*parser).callonSqlOrderBy13,
						expr: &litMatcher{
							pos:        position{line: 841, col: 5, offset: 24483},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SqlDirection",
			pos:  position{line: 843, col: 1, offset: 24507},
			expr: &choiceExpr{
				pos: position{line: 844, col: 5, offset: 24524},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 844, col: 5, offset: 24524},
						run: (*parser).callonSqlDirection2,
						expr: &seqExpr{
							pos: position{line: 844, col: 5, offset: 24524},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 844, col: 5, offset: 24524},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 844, col: 7, offset: 24526},
									label: "dir",
									expr: &choiceExpr{
										pos: position{line: 844, col: 12, offset: 24531},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 844, col: 12, offset: 24531},
												name: "ASC",
											},
											&ruleRefExpr{
												pos:  position{line: 844, col: 18, offset: 24537},
												name: "DESC",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 845, col: 5, offset: 24567},
						run: (*parser).callonSqlDirection9,
						expr: &litMatcher{
							pos:        position{line: 845, col: 5, offset: 24567},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SqlLimit",
			pos:  position{line: 847, col: 1, offset: 24593},
			expr: &choiceExpr{
				pos: position{line: 848, col: 5, offset: 24606},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 848, col: 5, offset: 24606},
						run: (*parser).callonSqlLimit2,
						expr: &seqExpr{
							pos: position{line: 848, col: 5, offset: 24606},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 848, col: 5, offset: 24606},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 848, col: 7, offset: 24608},
									name: "LIMIT",
								},
								&ruleRefExpr{
									pos:  position{line: 848, col: 13, offset: 24614},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 848, col: 15, offset: 24616},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 848, col: 21, offset: 24622},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 849, col: 5, offset: 24653},
						run: (*parser).callonSqlLimit9,
						expr: &litMatcher{
							pos:        position{line: 849, col: 5, offset: 24653},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SELECT",
			pos:  position{line: 851, col: 1, offset: 24675},
			expr: &actionExpr{
				pos: position{line: 851, col: 10, offset: 24684},
				run: (*parser).callonSELECT1,
				expr: &litMatcher{
					pos:        position{line: 851, col: 10, offset: 24684},
					val:        "select",
					ignoreCase: true,
				},
			},
		},
		{
			name: "AS",
			pos:  position{line: 852, col: 1, offset: 24719},
			expr: &actionExpr{
				pos: position{line: 852, col: 6, offset: 24724},
				run: (*parser).callonAS1,
				expr: &litMatcher{
					pos:        position{line: 852, col: 6, offset: 24724},
					val:        "as",
					ignoreCase: true,
				},
			},
		},
		{
			name: "FROM",
			pos:  position{line: 853, col: 1, offset: 24751},
			expr: &actionExpr{
				pos: position{line: 853, col: 8, offset: 24758},
				run: (*parser).callonFROM1,
				expr: &litMatcher{
					pos:        position{line: 853, col: 8, offset: 24758},
					val:        "from",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JOIN",
			pos:  position{line: 854, col: 1, offset: 24789},
			expr: &actionExpr{
				pos: position{line: 854, col: 8, offset: 24796},
				run: (*parser).callonJOIN1,
				expr: &litMatcher{
					pos:        position{line: 854, col: 8, offset: 24796},
					val:        "join",
					ignoreCase: true,
				},
			},
		},
		{
			name: "WHERE",
			pos:  position{line: 855, col: 1, offset: 24827},
			expr: &actionExpr{
				pos: position{line: 855, col: 9, offset: 24835},
				run: (*parser).callonWHERE1,
				expr: &litMatcher{
					pos:        position{line: 855, col: 9, offset: 24835},
					val:        "where",
					ignoreCase: true,
				},
			},
		},
		{
			name: "GROUP",
			pos:  position{line: 856, col: 1, offset: 24868},
			expr: &actionExpr{
				pos: position{line: 856, col: 9, offset: 24876},
				run: (*parser).callonGROUP1,
				expr: &litMatcher{
					pos:        position{line: 856, col: 9, offset: 24876},
					val:        "group",
					ignoreCase: true,
				},
			},
		},
		{
			name: "BY",
			pos:  position{line: 857, col: 1, offset: 24909},
			expr: &ruleRefExpr{
				pos:  position{line: 857, col: 6, offset: 24914},
				name: "ByToken",
			},
		},
		{
			name: "HAVING",
			pos:  position{line: 858, col: 1, offset: 24922},
			expr: &actionExpr{
				pos: position{line: 858, col: 10, offset: 24931},
				run: (*parser).callonHAVING1,
				expr: &litMatcher{
					pos:        position{line: 858, col: 10, offset: 24931},
					val:        "having",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ORDER",
			pos:  position{line: 859, col: 1, offset: 24966},
			expr: &actionExpr{
				pos: position{line: 859, col: 9, offset: 24974},
				run: (*parser).callonORDER1,
				expr: &litMatcher{
					pos:        position{line: 859, col: 9, offset: 24974},
					val:        "order",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ON",
			pos:  position{line: 860, col: 1, offset: 25007},
			expr: &actionExpr{
				pos: position{line: 860, col: 6, offset: 25012},
				run: (*parser).callonON1,
				expr: &litMatcher{
					pos:        position{line: 860, col: 6, offset: 25012},
					val:        "on",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LIMIT",
			pos:  position{line: 861, col: 1, offset: 25039},
			expr: &actionExpr{
				pos: position{line: 861, col: 9, offset: 25047},
				run: (*parser).callonLIMIT1,
				expr: &litMatcher{
					pos:        position{line: 861, col: 9, offset: 25047},
					val:        "limit",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ASC",
			pos:  position{line: 862, col: 1, offset: 25080},
			expr: &actionExpr{
				pos: position{line: 862, col: 7, offset: 25086},
				run: (*parser).callonASC1,
				expr: &litMatcher{
					pos:        position{line: 862, col: 7, offset: 25086},
					val:        "asc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "DESC",
			pos:  position{line: 863, col: 1, offset: 25115},
			expr: &actionExpr{
				pos: position{line: 863, col: 8, offset: 25122},
				run: (*parser).callonDESC1,
				expr: &litMatcher{
					pos:        position{line: 863, col: 8, offset: 25122},
					val:        "desc",
					ignoreCase: true,
				},
			},
		},
		{
			name: "LEFT",
			pos:  position{line: 864, col: 1, offset: 25153},
			expr: &actionExpr{
				pos: position{line: 864, col: 8, offset: 25160},
				run: (*parser).callonLEFT1,
				expr: &litMatcher{
					pos:        position{line: 864, col: 8, offset: 25160},
					val:        "left",
					ignoreCase: true,
				},
			},
		},
		{
			name: "RIGHT",
			pos:  position{line: 865, col: 1, offset: 25191},
			expr: &actionExpr{
				pos: position{line: 865, col: 9, offset: 25199},
				run: (*parser).callonRIGHT1,
				expr: &litMatcher{
					pos:        position{line: 865, col: 9, offset: 25199},
					val:        "right",
					ignoreCase: true,
				},
			},
		},
		{
			name: "INNER",
			pos:  position{line: 866, col: 1, offset: 25232},
			expr: &actionExpr{
				pos: position{line: 866, col: 9, offset: 25240},
				run: (*parser).callonINNER1,
				expr: &litMatcher{
					pos:        position{line: 866, col: 9, offset: 25240},
					val:        "inner",
					ignoreCase: true,
				},
			},
		},
		{
			name: "SqlTokenSentinels",
			pos:  position{line: 868, col: 1, offset: 25274},
			expr: &choiceExpr{
				pos: position{line: 869, col: 5, offset: 25296},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 869, col: 5, offset: 25296},
						name: "SELECT",
					},
					&ruleRefExpr{
						pos:  position{line: 869, col: 14, offset: 25305},
						name: "AS",
					},
					&ruleRefExpr{
						pos:  position{line: 869, col: 19, offset: 25310},
						name: "FROM",
					},
					&ruleRefExpr{
						pos:  position{line: 869, col: 27, offset: 25318},
						name: "JOIN",
					},
					&ruleRefExpr{
						pos:  position{line: 869, col: 34, offset: 25325},
						name: "WHERE",
					},
					&ruleRefExpr{
						pos:  position{line: 869, col: 42, offset: 25333},
						name: "GROUP",
					},
					&ruleRefExpr{
						pos:  position{line: 869, col: 50, offset: 25341},
						name: "HAVING",
					},
					&ruleRefExpr{
						pos:  position{line: 869, col: 59, offset: 25350},
						name: "ORDER",
					},
					&ruleRefExpr{
						pos:  position{line: 869, col: 67, offset: 25358},
						name: "LIMIT",
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 873, col: 1, offset: 25387},
			expr: &choiceExpr{
				pos: position{line: 874, col: 5, offset: 25399},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 874, col: 5, offset: 25399},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 875, col: 5, offset: 25415},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 876, col: 5, offset: 25433},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 877, col: 5, offset: 25451},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 878, col: 5, offset: 25469},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 879, col: 5, offset: 25488},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 880, col: 5, offset: 25505},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 881, col: 5, offset: 25524},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 882, col: 5, offset: 25543},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 884, col: 1, offset: 25556},
			expr: &actionExpr{
				pos: position{line: 885, col: 5, offset: 25574},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 885, col: 5, offset: 25574},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 885, col: 7, offset: 25576},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "RegexpLiteral",
			pos:  position{line: 889, col: 1, offset: 25686},
			expr: &actionExpr{
				pos: position{line: 890, col: 5, offset: 25704},
				run: (*parser).callonRegexpLiteral1,
				expr: &seqExpr{
					pos: position{line: 890, col: 5, offset: 25704},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 890, col: 5, offset: 25704},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 890, col: 7, offset: 25706},
								name: "Regexp",
							},
						},
						&notExpr{
							pos: position{line: 890, col: 14, offset: 25713},
							expr: &ruleRefExpr{
								pos:  position{line: 890, col: 15, offset: 25714},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 894, col: 1, offset: 25824},
			expr: &choiceExpr{
				pos: position{line: 895, col: 5, offset: 25842},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 895, col: 5, offset: 25842},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 895, col: 5, offset: 25842},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 895, col: 5, offset: 25842},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 895, col: 7, offset: 25844},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 895, col: 14, offset: 25851},
									expr: &ruleRefExpr{
										pos:  position{line: 895, col: 15, offset: 25852},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 898, col: 5, offset: 25964},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 898, col: 5, offset: 25964},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 898, col: 7, offset: 25966},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 902, col: 1, offset: 26067},
			expr: &choiceExpr{
				pos: position{line: 903, col: 5, offset: 26086},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 903, col: 5, offset: 26086},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 903, col: 5, offset: 26086},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 903, col: 5, offset: 26086},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 903, col: 7, offset: 26088},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 903, col: 11, offset: 26092},
									expr: &ruleRefExpr{
										pos:  position{line: 903, col: 12, offset: 26093},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 906, col: 5, offset: 26204},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 906, col: 5, offset: 26204},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 906, col: 7, offset: 26206},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 910, col: 1, offset: 26302},
			expr: &actionExpr{
				pos: position{line: 911, col: 5, offset: 26319},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 911, col: 5, offset: 26319},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 911, col: 7, offset: 26321},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 915, col: 1, offset: 26431},
			expr: &actionExpr{
				pos: position{line: 916, col: 5, offset: 26450},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 916, col: 5, offset: 26450},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 916, col: 7, offset: 26452},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 920, col: 1, offset: 26558},
			expr: &choiceExpr{
				pos: position{line: 921, col: 5, offset: 26577},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 921, col: 5, offset: 26577},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 921, col: 5, offset: 26577},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 922, col: 5, offset: 26687},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 922, col: 5, offset: 26687},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 924, col: 1, offset: 26795},
			expr: &actionExpr{
				pos: position{line: 925, col: 5, offset: 26811},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 925, col: 5, offset: 26811},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 927, col: 1, offset: 26914},
			expr: &actionExpr{
				pos: position{line: 928, col: 5, offset: 26930},
				run: (*parser).callonTypeLiteral1,
				expr: &seqExpr{
					pos: position{line: 928, col: 5, offset: 26930},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 928, col: 5, offset: 26930},
							expr: &seqExpr{
								pos: position{line: 928, col: 7, offset: 26932},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 928, col: 7, offset: 26932},
										name: "SqlTokenSentinels",
									},
									&ruleRefExpr{
										pos:  position{line: 928, col: 25, offset: 26950},
										name: "EOT",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 928, col: 30, offset: 26955},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 928, col: 34, offset: 26959},
								name: "TypeExternal",
							},
						},
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 932, col: 1, offset: 27055},
			expr: &choiceExpr{
				pos: position{line: 933, col: 5, offset: 27068},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 933, col: 5, offset: 27068},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 934, col: 5, offset: 27085},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "TypeExternal",
			pos:  position{line: 936, col: 1, offset: 27100},
			expr: &choiceExpr{
				pos: position{line: 937, col: 5, offset: 27117},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 937, col: 5, offset: 27117},
						run: (*parser).callonTypeExternal2,
						expr: &seqExpr{
							pos: position{line: 937, col: 5, offset: 27117},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 937, col: 5, offset: 27117},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 937, col: 12, offset: 27124},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 937, col: 15, offset: 27127},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 937, col: 19, offset: 27131},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 937, col: 22, offset: 27134},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 937, col: 26, offset: 27138},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 937, col: 31, offset: 27143},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 937, col: 34, offset: 27146},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 938, col: 5, offset: 27173},
						run: (*parser).callonTypeExternal12,
						expr: &seqExpr{
							pos: position{line: 938, col: 5, offset: 27173},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 938, col: 5, offset: 27173},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 938, col: 12, offset: 27180},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 938, col: 15, offset: 27183},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 938, col: 19, offset: 27187},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 938, col: 22, offset: 27190},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 938, col: 26, offset: 27194},
										name: "TypeUnion",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 938, col: 36, offset: 27204},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 938, col: 39, offset: 27207},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 939, col: 5, offset: 27235},
						name: "ComplexType",
					},
					&actionExpr{
						pos: position{line: 940, col: 5, offset: 27251},
						run: (*parser).callonTypeExternal23,
						expr: &seqExpr{
							pos: position{line: 940, col: 5, offset: 27251},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 940, col: 5, offset: 27251},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 940, col: 9, offset: 27255},
										name: "PrimitiveTypeExternal",
									},
								},
								&notExpr{
									pos: position{line: 940, col: 31, offset: 27277},
									expr: &ruleRefExpr{
										pos:  position{line: 940, col: 32, offset: 27278},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 942, col: 1, offset: 27314},
			expr: &choiceExpr{
				pos: position{line: 943, col: 5, offset: 27323},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 943, col: 5, offset: 27323},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 944, col: 5, offset: 27341},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 946, col: 1, offset: 27354},
			expr: &choiceExpr{
				pos: position{line: 947, col: 5, offset: 27372},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 947, col: 5, offset: 27372},
						run: (*parser).callonAmbiguousType2,
						expr: &litMatcher{
							pos:        position{line: 947, col: 5, offset: 27372},
							val:        "null",
							ignoreCase: false,
						},
					},
					&labeledExpr{
						pos:   position{line: 950, col: 5, offset: 27450},
						label: "name",
						expr: &ruleRefExpr{
							pos:  position{line: 950, col: 10, offset: 27455},
							name: "PrimitiveType",
						},
					},
					&actionExpr{
						pos: position{line: 951, col: 5, offset: 27473},
						run: (*parser).callonAmbiguousType6,
						expr: &seqExpr{
							pos: position{line: 951, col: 5, offset: 27473},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 951, col: 5, offset: 27473},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 951, col: 10, offset: 27478},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 951, col: 25, offset: 27493},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 951, col: 28, offset: 27496},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 951, col: 32, offset: 27500},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 951, col: 35, offset: 27503},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 951, col: 39, offset: 27507},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 951, col: 42, offset: 27510},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 951, col: 46, offset: 27514},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 951, col: 51, offset: 27519},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 951, col: 54, offset: 27522},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 954, col: 5, offset: 27621},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 954, col: 5, offset: 27621},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 954, col: 10, offset: 27626},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 957, col: 5, offset: 27726},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 957, col: 5, offset: 27726},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 957, col: 5, offset: 27726},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 957, col: 9, offset: 27730},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 957, col: 12, offset: 27733},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 957, col: 14, offset: 27735},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 957, col: 25, offset: 27746},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 959, col: 1, offset: 27769},
			expr: &actionExpr{
				pos: position{line: 960, col: 5, offset: 27783},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 960, col: 5, offset: 27783},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 960, col: 11, offset: 27789},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 964, col: 1, offset: 27883},
			expr: &actionExpr{
				pos: position{line: 965, col: 5, offset: 27896},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 965, col: 5, offset: 27896},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 965, col: 5, offset: 27896},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 11, offset: 27902},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 965, col: 16, offset: 27907},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 965, col: 21, offset: 27912},
								expr: &ruleRefExpr{
									pos:  position{line: 965, col: 21, offset: 27912},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 969, col: 1, offset: 28006},
			expr: &actionExpr{
				pos: position{line: 969, col: 16, offset: 28021},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 969, col: 16, offset: 28021},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 969, col: 16, offset: 28021},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 969, col: 19, offset: 28024},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 969, col: 23, offset: 28028},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 969, col: 26, offset: 28031},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 969, col: 30, offset: 28035},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 971, col: 1, offset: 28061},
			expr: &choiceExpr{
				pos: position{line: 972, col: 5, offset: 28077},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 972, col: 5, offset: 28077},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 972, col: 5, offset: 28077},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 972, col: 5, offset: 28077},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 972, col: 9, offset: 28081},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 972, col: 12, offset: 28084},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 972, col: 19, offset: 28091},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 972, col: 33, offset: 28105},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 972, col: 36, offset: 28108},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 975, col: 5, offset: 28201},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 975, col: 5, offset: 28201},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 975, col: 5, offset: 28201},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 975, col: 9, offset: 28205},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 975, col: 12, offset: 28208},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 975, col: 16, offset: 28212},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 975, col: 21, offset: 28217},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 975, col: 24, offset: 28220},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 978, col: 5, offset: 28307},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 978, col: 5, offset: 28307},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 978, col: 5, offset: 28307},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 978, col: 10, offset: 28312},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 978, col: 13, offset: 28315},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 978, col: 17, offset: 28319},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 978, col: 22, offset: 28324},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 978, col: 25, offset: 28327},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 981, col: 5, offset: 28413},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 981, col: 5, offset: 28413},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 981, col: 5, offset: 28413},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 981, col: 10, offset: 28418},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 981, col: 13, offset: 28421},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 981, col: 21, offset: 28429},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 981, col: 26, offset: 28434},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 981, col: 29, offset: 28437},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 981, col: 33, offset: 28441},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 981, col: 36, offset: 28444},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 981, col: 44, offset: 28452},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 981, col: 49, offset: 28457},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 981, col: 52, offset: 28460},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 985, col: 1, offset: 28572},
			expr: &choiceExpr{
				pos: position{line: 986, col: 5, offset: 28590},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 986, col: 5, offset: 28590},
						name: "PrimitiveTypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 987, col: 5, offset: 28616},
						name: "PrimitiveTypeInternal",
					},
				},
			},
		},
		{
			name: "PrimitiveTypeExternal",
			pos:  position{line: 993, col: 1, offset: 28875},
			expr: &actionExpr{
				pos: position{line: 994, col: 5, offset: 28901},
				run: (*parser).callonPrimitiveTypeExternal1,
				expr: &choiceExpr{
					pos: position{line: 994, col: 9, offset: 28905},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 994, col: 9, offset: 28905},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 994, col: 19, offset: 28915},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 994, col: 30, offset: 28926},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 994, col: 41, offset: 28937},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 995, col: 9, offset: 28954},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 995, col: 18, offset: 28963},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 995, col: 28, offset: 28973},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 995, col: 38, offset: 28983},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 996, col: 9, offset: 28999},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 997, col: 9, offset: 29017},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 997, col: 18, offset: 29026},
							val:        "string",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveTypeInternal",
			pos:  position{line: 1006, col: 1, offset: 29508},
			expr: &actionExpr{
				pos: position{line: 1007, col: 5, offset: 29534},
				run: (*parser).callonPrimitiveTypeInternal1,
				expr: &choiceExpr{
					pos: position{line: 1007, col: 9, offset: 29538},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 1007, col: 9, offset: 29538},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1007, col: 22, offset: 29551},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1008, col: 9, offset: 29566},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1009, col: 9, offset: 29582},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1010, col: 9, offset: 29600},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1010, col: 16, offset: 29607},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1011, col: 9, offset: 29621},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1011, col: 18, offset: 29630},
							val:        "error",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 1015, col: 1, offset: 29745},
			expr: &actionExpr{
				pos: position{line: 1016, col: 5, offset: 29763},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 1016, col: 5, offset: 29763},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1016, col: 5, offset: 29763},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 1016, col: 11, offset: 29769},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 1016, col: 21, offset: 29779},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1016, col: 26, offset: 29784},
								expr: &ruleRefExpr{
									pos:  position{line: 1016, col: 26, offset: 29784},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 1020, col: 1, offset: 29883},
			expr: &actionExpr{
				pos: position{line: 1020, col: 21, offset: 29903},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 1020, col: 21, offset: 29903},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1020, col: 21, offset: 29903},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1020, col: 24, offset: 29906},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1020, col: 28, offset: 29910},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1020, col: 31, offset: 29913},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1020, col: 35, offset: 29917},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 1022, col: 1, offset: 29948},
			expr: &actionExpr{
				pos: position{line: 1023, col: 5, offset: 29962},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 1023, col: 5, offset: 29962},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1023, col: 5, offset: 29962},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 1023, col: 10, offset: 29967},
								name: "FieldName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1023, col: 20, offset: 29977},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 1023, col: 23, offset: 29980},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1023, col: 27, offset: 29984},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 1023, col: 30, offset: 29987},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 1023, col: 34, offset: 29991},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "FieldName",
			pos:  position{line: 1027, col: 1, offset: 30073},
			expr: &choiceExpr{
				pos: position{line: 1028, col: 5, offset: 30087},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1028, col: 5, offset: 30087},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 1029, col: 5, offset: 30106},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 1031, col: 1, offset: 30120},
			expr: &choiceExpr{
				pos: position{line: 1032, col: 5, offset: 30138},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1032, col: 5, offset: 30138},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 1032, col: 24, offset: 30157},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 1034, col: 1, offset: 30175},
			expr: &actionExpr{
				pos: position{line: 1034, col: 12, offset: 30186},
				run: (*parser).callonAndToken1,
				expr: &seqExpr{
					pos: position{line: 1034, col: 12, offset: 30186},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1034, col: 12, offset: 30186},
							val:        "and",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1034, col: 19, offset: 30193},
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 20, offset: 30194},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 1035, col: 1, offset: 30231},
			expr: &actionExpr{
				pos: position{line: 1035, col: 11, offset: 30241},
				run: (*parser).callonOrToken1,
				expr: &seqExpr{
					pos: position{line: 1035, col: 11, offset: 30241},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1035, col: 11, offset: 30241},
							val:        "or",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1035, col: 17, offset: 30247},
							expr: &ruleRefExpr{
								pos:  position{line: 1035, col: 18, offset: 30248},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 1036, col: 1, offset: 30284},
			expr: &actionExpr{
				pos: position{line: 1036, col: 11, offset: 30294},
				run: (*parser).callonInToken1,
				expr: &seqExpr{
					pos: position{line: 1036, col: 11, offset: 30294},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1036, col: 11, offset: 30294},
							val:        "in",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1036, col: 17, offset: 30300},
							expr: &ruleRefExpr{
								pos:  position{line: 1036, col: 18, offset: 30301},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 1037, col: 1, offset: 30337},
			expr: &actionExpr{
				pos: position{line: 1037, col: 12, offset: 30348},
				run: (*parser).callonNotToken1,
				expr: &seqExpr{
					pos: position{line: 1037, col: 12, offset: 30348},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1037, col: 12, offset: 30348},
							val:        "not",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1037, col: 19, offset: 30355},
							expr: &ruleRefExpr{
								pos:  position{line: 1037, col: 20, offset: 30356},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 1038, col: 1, offset: 30393},
			expr: &actionExpr{
				pos: position{line: 1038, col: 11, offset: 30403},
				run: (*parser).callonByToken1,
				expr: &seqExpr{
					pos: position{line: 1038, col: 11, offset: 30403},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1038, col: 11, offset: 30403},
							val:        "by",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 1038, col: 17, offset: 30409},
							expr: &ruleRefExpr{
								pos:  position{line: 1038, col: 18, offset: 30410},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 1040, col: 1, offset: 30447},
			expr: &charClassMatcher{
				pos:        position{line: 1040, col: 19, offset: 30465},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 1042, col: 1, offset: 30477},
			expr: &choiceExpr{
				pos: position{line: 1042, col: 18, offset: 30494},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1042, col: 18, offset: 30494},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 1042, col: 36, offset: 30512},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 1044, col: 1, offset: 30519},
			expr: &actionExpr{
				pos: position{line: 1045, col: 5, offset: 30534},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 1045, col: 5, offset: 30534},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 1045, col: 8, offset: 30537},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 1051, col: 1, offset: 30822},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 5, offset: 30841},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1052, col: 5, offset: 30841},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 1052, col: 5, offset: 30841},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1052, col: 5, offset: 30841},
									expr: &seqExpr{
										pos: position{line: 1052, col: 7, offset: 30843},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1052, col: 7, offset: 30843},
												name: "IdGuard",
											},
											&notExpr{
												pos: position{line: 1052, col: 15, offset: 30851},
												expr: &ruleRefExpr{
													pos:  position{line: 1052, col: 16, offset: 30852},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1052, col: 32, offset: 30868},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1052, col: 48, offset: 30884},
									expr: &ruleRefExpr{
										pos:  position{line: 1052, col: 48, offset: 30884},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1053, col: 5, offset: 30936},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 1053, col: 5, offset: 30936},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1054, col: 5, offset: 30975},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 1054, col: 5, offset: 30975},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1054, col: 5, offset: 30975},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1054, col: 10, offset: 30980},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1054, col: 13, offset: 30983},
										name: "IdGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1056, col: 5, offset: 31074},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 1056, col: 5, offset: 31074},
							val:        "type",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1057, col: 5, offset: 31116},
						run: (*parser).callonIdentifierName21,
						expr: &seqExpr{
							pos: position{line: 1057, col: 5, offset: 31116},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1057, col: 5, offset: 31116},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1057, col: 8, offset: 31119},
										name: "SqlTokenSentinels",
									},
								},
								&andExpr{
									pos: position{line: 1057, col: 26, offset: 31137},
									expr: &seqExpr{
										pos: position{line: 1057, col: 28, offset: 31139},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1057, col: 28, offset: 31139},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 1057, col: 31, offset: 31142},
												val:        "(",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IdGuard",
			pos:  position{line: 1059, col: 1, offset: 31167},
			expr: &choiceExpr{
				pos: position{line: 1060, col: 5, offset: 31179},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1060, col: 5, offset: 31179},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1061, col: 5, offset: 31198},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 1062, col: 5, offset: 31214},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 1063, col: 5, offset: 31231},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 1065, col: 1, offset: 31244},
			expr: &choiceExpr{
				pos: position{line: 1066, col: 5, offset: 31257},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1066, col: 5, offset: 31257},
						name: "Seconds",
					},
					&ruleRefExpr{
						pos:  position{line: 1067, col: 5, offset: 31269},
						name: "Minutes",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 5, offset: 31281},
						name: "Hours",
					},
					&seqExpr{
						pos: position{line: 1069, col: 5, offset: 31291},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1069, col: 5, offset: 31291},
								name: "Hours",
							},
							&ruleRefExpr{
								pos:  position{line: 1069, col: 11, offset: 31297},
								name: "_",
							},
							&litMatcher{
								pos:        position{line: 1069, col: 13, offset: 31299},
								val:        "and",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 1069, col: 19, offset: 31305},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 1069, col: 21, offset: 31307},
								name: "Minutes",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1070, col: 5, offset: 31319},
						name: "Days",
					},
					&ruleRefExpr{
						pos:  position{line: 1071, col: 5, offset: 31328},
						name: "Weeks",
					},
				},
			},
		},
		{
			name: "SecondsToken",
			pos:  position{line: 1073, col: 1, offset: 31335},
			expr: &choiceExpr{
				pos: position{line: 1074, col: 5, offset: 31352},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1074, col: 5, offset: 31352},
						val:        "seconds",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1075, col: 5, offset: 31366},
						val:        "second",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1076, col: 5, offset: 31379},
						val:        "secs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1077, col: 5, offset: 31390},
						val:        "sec",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1078, col: 5, offset: 31400},
						val:        "s",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MinutesToken",
			pos:  position{line: 1080, col: 1, offset: 31405},
			expr: &choiceExpr{
				pos: position{line: 1081, col: 5, offset: 31422},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1081, col: 5, offset: 31422},
						val:        "minutes",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1082, col: 5, offset: 31436},
						val:        "minute",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1083, col: 5, offset: 31449},
						val:        "mins",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1084, col: 5, offset: 31460},
						val:        "min",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1085, col: 5, offset: 31470},
						val:        "m",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "HoursToken",
			pos:  position{line: 1087, col: 1, offset: 31475},
			expr: &choiceExpr{
				pos: position{line: 1088, col: 5, offset: 31490},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1088, col: 5, offset: 31490},
						val:        "hours",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1089, col: 5, offset: 31502},
						val:        "hrs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1090, col: 5, offset: 31512},
						val:        "hr",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1091, col: 5, offset: 31521},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1092, col: 5, offset: 31529},
						val:        "hour",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "DaysToken",
			pos:  position{line: 1094, col: 1, offset: 31537},
			expr: &choiceExpr{
				pos: position{line: 1094, col: 13, offset: 31549},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1094, col: 13, offset: 31549},
						val:        "days",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1094, col: 20, offset: 31556},
						val:        "day",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1094, col: 26, offset: 31562},
						val:        "d",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "WeeksToken",
			pos:  position{line: 1096, col: 1, offset: 31567},
			expr: &choiceExpr{
				pos: position{line: 1096, col: 14, offset: 31580},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1096, col: 14, offset: 31580},
						val:        "weeks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1096, col: 22, offset: 31588},
						val:        "week",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1096, col: 29, offset: 31595},
						val:        "wks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1096, col: 35, offset: 31601},
						val:        "wk",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1096, col: 40, offset: 31606},
						val:        "w",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Seconds",
			pos:  position{line: 1098, col: 1, offset: 31611},
			expr: &choiceExpr{
				pos: position{line: 1099, col: 5, offset: 31623},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1099, col: 5, offset: 31623},
						run: (*parser).callonSeconds2,
						expr: &litMatcher{
							pos:        position{line: 1099, col: 5, offset: 31623},
							val:        "second",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1100, col: 5, offset: 31709},
						run: (*parser).callonSeconds4,
						expr: &seqExpr{
							pos: position{line: 1100, col: 5, offset: 31709},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1100, col: 5, offset: 31709},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 1100, col: 9, offset: 31713},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 14, offset: 31718},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 17, offset: 31721},
									name: "SecondsToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Minutes",
			pos:  position{line: 1102, col: 1, offset: 31810},
			expr: &choiceExpr{
				pos: position{line: 1103, col: 5, offset: 31822},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1103, col: 5, offset: 31822},
						run: (*parser).callonMinutes2,
						expr: &litMatcher{
							pos:        position{line: 1103, col: 5, offset: 31822},
							val:        "minute",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1104, col: 5, offset: 31909},
						run: (*parser).callonMinutes4,
						expr: &seqExpr{
							pos: position{line: 1104, col: 5, offset: 31909},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1104, col: 5, offset: 31909},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 1104, col: 9, offset: 31913},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1104, col: 14, offset: 31918},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 1104, col: 17, offset: 31921},
									name: "MinutesToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Hours",
			pos:  position{line: 1106, col: 1, offset: 32019},
			expr: &choiceExpr{
				pos: position{line: 1107, col: 5, offset: 32029},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1107, col: 5, offset: 32029},
						run: (*parser).callonHours2,
						expr: &litMatcher{
							pos:        position{line: 1107, col: 5, offset: 32029},
							val:        "hour",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1108, col: 5, offset: 32116},
						run: (*parser).callonHours4,
						expr: &seqExpr{
							pos: position{line: 1108, col: 5, offset: 32116},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1108, col: 5, offset: 32116},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 1108, col: 9, offset: 32120},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1108, col: 14, offset: 32125},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 1108, col: 17, offset: 32128},
									name: "HoursToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Days",
			pos:  position{line: 1110, col: 1, offset: 32226},
			expr: &choiceExpr{
				pos: position{line: 1111, col: 5, offset: 32235},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1111, col: 5, offset: 32235},
						run: (*parser).callonDays2,
						expr: &litMatcher{
							pos:        position{line: 1111, col: 5, offset: 32235},
							val:        "day",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1112, col: 5, offset: 32324},
						run: (*parser).callonDays4,
						expr: &seqExpr{
							pos: position{line: 1112, col: 5, offset: 32324},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1112, col: 5, offset: 32324},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 1112, col: 9, offset: 32328},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1112, col: 14, offset: 32333},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 1112, col: 17, offset: 32336},
									name: "DaysToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Weeks",
			pos:  position{line: 1114, col: 1, offset: 32438},
			expr: &choiceExpr{
				pos: position{line: 1115, col: 5, offset: 32448},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1115, col: 5, offset: 32448},
						run: (*parser).callonWeeks2,
						expr: &litMatcher{
							pos:        position{line: 1115, col: 5, offset: 32448},
							val:        "week",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1116, col: 5, offset: 32540},
						run: (*parser).callonWeeks4,
						expr: &seqExpr{
							pos: position{line: 1116, col: 5, offset: 32540},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1116, col: 5, offset: 32540},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 1116, col: 9, offset: 32544},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1116, col: 14, offset: 32549},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 1116, col: 17, offset: 32552},
									name: "WeeksToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 1119, col: 1, offset: 32683},
			expr: &actionExpr{
				pos: position{line: 1120, col: 5, offset: 32690},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 1120, col: 5, offset: 32690},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1120, col: 5, offset: 32690},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1120, col: 10, offset: 32695},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1120, col: 14, offset: 32699},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1120, col: 19, offset: 32704},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1120, col: 23, offset: 32708},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 1120, col: 28, offset: 32713},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1120, col: 32, offset: 32717},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 1122, col: 1, offset: 32754},
			expr: &actionExpr{
				pos: position{line: 1123, col: 5, offset: 32762},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 1123, col: 5, offset: 32762},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1123, col: 5, offset: 32762},
							expr: &seqExpr{
								pos: position{line: 1123, col: 8, offset: 32765},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1123, col: 8, offset: 32765},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 1123, col: 12, offset: 32769},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 1123, col: 16, offset: 32773},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 1123, col: 20, offset: 32777},
										expr: &choiceExpr{
											pos: position{line: 1123, col: 22, offset: 32779},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1123, col: 22, offset: 32779},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 1123, col: 33, offset: 32790},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1123, col: 39, offset: 32796},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1123, col: 41, offset: 32798},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 1127, col: 1, offset: 32962},
			expr: &choiceExpr{
				pos: position{line: 1128, col: 5, offset: 32980},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1128, col: 5, offset: 32980},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 1128, col: 5, offset: 32980},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1128, col: 5, offset: 32980},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 1128, col: 7, offset: 32982},
										expr: &ruleRefExpr{
											pos:  position{line: 1128, col: 7, offset: 32982},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1128, col: 17, offset: 32992},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1128, col: 19, offset: 32994},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1131, col: 5, offset: 33058},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 1131, col: 5, offset: 33058},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1131, col: 5, offset: 33058},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1131, col: 7, offset: 33060},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1131, col: 11, offset: 33064},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1131, col: 13, offset: 33066},
										expr: &ruleRefExpr{
											pos:  position{line: 1131, col: 13, offset: 33066},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1131, col: 23, offset: 33076},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1131, col: 28, offset: 33081},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1131, col: 30, offset: 33083},
										expr: &ruleRefExpr{
											pos:  position{line: 1131, col: 30, offset: 33083},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1131, col: 40, offset: 33093},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 1131, col: 42, offset: 33095},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1134, col: 5, offset: 33194},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 1134, col: 5, offset: 33194},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1134, col: 5, offset: 33194},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1134, col: 10, offset: 33199},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1134, col: 12, offset: 33201},
										expr: &ruleRefExpr{
											pos:  position{line: 1134, col: 12, offset: 33201},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1134, col: 22, offset: 33211},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 1134, col: 24, offset: 33213},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1137, col: 5, offset: 33284},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 1137, col: 5, offset: 33284},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1137, col: 5, offset: 33284},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 1137, col: 7, offset: 33286},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 1137, col: 11, offset: 33290},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1137, col: 13, offset: 33292},
										expr: &ruleRefExpr{
											pos:  position{line: 1137, col: 13, offset: 33292},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1137, col: 23, offset: 33302},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1140, col: 5, offset: 33370},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 1140, col: 5, offset: 33370},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 1144, col: 1, offset: 33407},
			expr: &choiceExpr{
				pos: position{line: 1145, col: 5, offset: 33419},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1145, col: 5, offset: 33419},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 5, offset: 33426},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 1148, col: 1, offset: 33431},
			expr: &actionExpr{
				pos: position{line: 1148, col: 12, offset: 33442},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 1148, col: 12, offset: 33442},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1148, col: 12, offset: 33442},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1148, col: 16, offset: 33446},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1148, col: 18, offset: 33448},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 1150, col: 1, offset: 33486},
			expr: &actionExpr{
				pos: position{line: 1150, col: 12, offset: 33497},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 1150, col: 12, offset: 33497},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1150, col: 12, offset: 33497},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 1150, col: 14, offset: 33499},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 1150, col: 18, offset: 33503},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 1152, col: 1, offset: 33541},
			expr: &actionExpr{
				pos: position{line: 1153, col: 5, offset: 33552},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 1153, col: 5, offset: 33552},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1153, col: 5, offset: 33552},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1153, col: 7, offset: 33554},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 1153, col: 10, offset: 33557},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1153, col: 14, offset: 33561},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1153, col: 16, offset: 33563},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 1157, col: 1, offset: 33636},
			expr: &actionExpr{
				pos: position{line: 1158, col: 5, offset: 33647},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 1158, col: 5, offset: 33647},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1158, col: 5, offset: 33647},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 1158, col: 7, offset: 33649},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 1158, col: 11, offset: 33653},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1158, col: 15, offset: 33657},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 1158, col: 17, offset: 33659},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 1162, col: 1, offset: 33722},
			expr: &actionExpr{
				pos: position{line: 1163, col: 4, offset: 33730},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 1163, col: 4, offset: 33730},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 1163, col: 6, offset: 33732},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 1165, col: 1, offset: 33772},
			expr: &choiceExpr{
				pos: position{line: 1166, col: 5, offset: 33786},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1166, col: 5, offset: 33786},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 1167, col: 5, offset: 33801},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 1169, col: 1, offset: 33817},
			expr: &actionExpr{
				pos: position{line: 1169, col: 14, offset: 33830},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1169, col: 14, offset: 33830},
					expr: &charClassMatcher{
						pos:        position{line: 1169, col: 14, offset: 33830},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1171, col: 1, offset: 33869},
			expr: &actionExpr{
				pos: position{line: 1172, col: 5, offset: 33888},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1172, col: 5, offset: 33888},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1172, col: 5, offset: 33888},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1172, col: 9, offset: 33892},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1174, col: 1, offset: 33935},
			expr: &choiceExpr{
				pos: position{line: 1175, col: 5, offset: 33951},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1175, col: 5, offset: 33951},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1175, col: 5, offset: 33951},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1175, col: 5, offset: 33951},
									expr: &litMatcher{
										pos:        position{line: 1175, col: 5, offset: 33951},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1175, col: 10, offset: 33956},
									expr: &charClassMatcher{
										pos:        position{line: 1175, col: 10, offset: 33956},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1175, col: 17, offset: 33963},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1175, col: 21, offset: 33967},
									expr: &charClassMatcher{
										pos:        position{line: 1175, col: 21, offset: 33967},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1175, col: 28, offset: 33974},
									expr: &ruleRefExpr{
										pos:  position{line: 1175, col: 28, offset: 33974},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1178, col: 5, offset: 34033},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1178, col: 5, offset: 34033},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1178, col: 5, offset: 34033},
									expr: &litMatcher{
										pos:        position{line: 1178, col: 5, offset: 34033},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1178, col: 10, offset: 34038},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1178, col: 14, offset: 34042},
									expr: &charClassMatcher{
										pos:        position{line: 1178, col: 14, offset: 34042},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1178, col: 21, offset: 34049},
									expr: &ruleRefExpr{
										pos:  position{line: 1178, col: 21, offset: 34049},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1182, col: 1, offset: 34105},
			expr: &seqExpr{
				pos: position{line: 1182, col: 16, offset: 34120},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1182, col: 16, offset: 34120},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1182, col: 21, offset: 34125},
						expr: &charClassMatcher{
							pos:        position{line: 1182, col: 21, offset: 34125},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1182, col: 27, offset: 34131},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1184, col: 1, offset: 34143},
			expr: &actionExpr{
				pos: position{line: 1184, col: 7, offset: 34149},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1184, col: 7, offset: 34149},
					expr: &ruleRefExpr{
						pos:  position{line: 1184, col: 7, offset: 34149},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1186, col: 1, offset: 34191},
			expr: &charClassMatcher{
				pos:        position{line: 1186, col: 12, offset: 34202},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1189, col: 1, offset: 34216},
			expr: &choiceExpr{
				pos: position{line: 1190, col: 5, offset: 34233},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1190, col: 5, offset: 34233},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1190, col: 5, offset: 34233},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1190, col: 5, offset: 34233},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1190, col: 9, offset: 34237},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1190, col: 11, offset: 34239},
										expr: &ruleRefExpr{
											pos:  position{line: 1190, col: 11, offset: 34239},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1190, col: 29, offset: 34257},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1191, col: 5, offset: 34294},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1191, col: 5, offset: 34294},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1191, col: 5, offset: 34294},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1191, col: 9, offset: 34298},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1191, col: 11, offset: 34300},
										expr: &ruleRefExpr{
											pos:  position{line: 1191, col: 11, offset: 34300},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1191, col: 29, offset: 34318},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1193, col: 1, offset: 34352},
			expr: &choiceExpr{
				pos: position{line: 1194, col: 5, offset: 34373},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1194, col: 5, offset: 34373},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1194, col: 5, offset: 34373},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1194, col: 5, offset: 34373},
									expr: &choiceExpr{
										pos: position{line: 1194, col: 7, offset: 34375},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1194, col: 7, offset: 34375},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1194, col: 13, offset: 34381},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1194, col: 26, offset: 34394,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1195, col: 5, offset: 34431},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1195, col: 5, offset: 34431},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1195, col: 5, offset: 34431},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1195, col: 10, offset: 34436},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1195, col: 12, offset: 34438},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1197, col: 1, offset: 34472},
			expr: &actionExpr{
				pos: position{line: 1198, col: 5, offset: 34484},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1198, col: 5, offset: 34484},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1198, col: 5, offset: 34484},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1198, col: 10, offset: 34489},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1198, col: 23, offset: 34502},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1198, col: 28, offset: 34507},
								expr: &ruleRefExpr{
									pos:  position{line: 1198, col: 28, offset: 34507},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1200, col: 1, offset: 34569},
			expr: &choiceExpr{
				pos: position{line: 1201, col: 5, offset: 34586},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1201, col: 5, offset: 34586},
						run: (*parser).callonKeyWordStart2,
						expr: &charClassMatcher{
							pos:        position{line: 1201, col: 5, offset: 34586},
							val:        "[a-zA-Z_.:/%#@~]",
							chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 5, offset: 34638},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1204, col: 1, offset: 34650},
			expr: &choiceExpr{
				pos: position{line: 1205, col: 5, offset: 34666},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1205, col: 5, offset: 34666},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1206, col: 5, offset: 34683},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1208, col: 1, offset: 34690},
			expr: &actionExpr{
				pos: position{line: 1208, col: 14, offset: 34703},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1208, col: 14, offset: 34703},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1208, col: 14, offset: 34703},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1208, col: 19, offset: 34708},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1208, col: 22, offset: 34711},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1208, col: 22, offset: 34711},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1208, col: 38, offset: 34727},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1210, col: 1, offset: 34763},
			expr: &choiceExpr{
				pos: position{line: 1211, col: 5, offset: 34784},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1211, col: 5, offset: 34784},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1211, col: 5, offset: 34784},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1211, col: 5, offset: 34784},
									expr: &choiceExpr{
										pos: position{line: 1211, col: 7, offset: 34786},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1211, col: 7, offset: 34786},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1211, col: 13, offset: 34792},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1211, col: 26, offset: 34805,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1212, col: 5, offset: 34842},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1212, col: 5, offset: 34842},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1212, col: 5, offset: 34842},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1212, col: 10, offset: 34847},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1212, col: 12, offset: 34849},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1214, col: 1, offset: 34883},
			expr: &choiceExpr{
				pos: position{line: 1215, col: 5, offset: 34902},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1215, col: 5, offset: 34902},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1215, col: 5, offset: 34902},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1215, col: 5, offset: 34902},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1215, col: 9, offset: 34906},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1215, col: 18, offset: 34915},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1216, col: 5, offset: 34966},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1217, col: 5, offset: 34987},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1219, col: 1, offset: 35002},
			expr: &choiceExpr{
				pos: position{line: 1220, col: 5, offset: 35023},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1220, col: 5, offset: 35023},
						val:        "'",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1221, col: 5, offset: 35031},
						val:        "\"",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1222, col: 5, offset: 35040},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1223, col: 5, offset: 35049},
						run: (*parser).callonSingleCharEscape5,
						expr: &litMatcher{
							pos:        position{line: 1223, col: 5, offset: 35049},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1224, col: 5, offset: 35078},
						run: (*parser).callonSingleCharEscape7,
						expr: &litMatcher{
							pos:        position{line: 1224, col: 5, offset: 35078},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1225, col: 5, offset: 35107},
						run: (*parser).callonSingleCharEscape9,
						expr: &litMatcher{
							pos:        position{line: 1225, col: 5, offset: 35107},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1226, col: 5, offset: 35136},
						run: (*parser).callonSingleCharEscape11,
						expr: &litMatcher{
							pos:        position{line: 1226, col: 5, offset: 35136},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1227, col: 5, offset: 35165},
						run: (*parser).callonSingleCharEscape13,
						expr: &litMatcher{
							pos:        position{line: 1227, col: 5, offset: 35165},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1228, col: 5, offset: 35194},
						run: (*parser).callonSingleCharEscape15,
						expr: &litMatcher{
							pos:        position{line: 1228, col: 5, offset: 35194},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1230, col: 1, offset: 35220},
			expr: &choiceExpr{
				pos: position{line: 1231, col: 5, offset: 35238},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1231, col: 5, offset: 35238},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1231, col: 5, offset: 35238},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1232, col: 5, offset: 35266},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1232, col: 5, offset: 35266},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1233, col: 5, offset: 35296},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1235, col: 1, offset: 35302},
			expr: &choiceExpr{
				pos: position{line: 1236, col: 5, offset: 35320},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1236, col: 5, offset: 35320},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1236, col: 5, offset: 35320},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1236, col: 5, offset: 35320},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1236, col: 9, offset: 35324},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1236, col: 16, offset: 35331},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1236, col: 16, offset: 35331},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1236, col: 25, offset: 35340},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1236, col: 34, offset: 35349},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1236, col: 43, offset: 35358},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1239, col: 5, offset: 35421},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1239, col: 5, offset: 35421},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1239, col: 5, offset: 35421},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1239, col: 9, offset: 35425},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1239, col: 13, offset: 35429},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1239, col: 20, offset: 35436},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1239, col: 20, offset: 35436},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1239, col: 29, offset: 35445},
												expr: &ruleRefExpr{
													pos:  position{line: 1239, col: 29, offset: 35445},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1239, col: 39, offset: 35455},
												expr: &ruleRefExpr{
													pos:  position{line: 1239, col: 39, offset: 35455},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1239, col: 49, offset: 35465},
												expr: &ruleRefExpr{
													pos:  position{line: 1239, col: 49, offset: 35465},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1239, col: 59, offset: 35475},
												expr: &ruleRefExpr{
													pos:  position{line: 1239, col: 59, offset: 35475},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1239, col: 69, offset: 35485},
												expr: &ruleRefExpr{
													pos:  position{line: 1239, col: 69, offset: 35485},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1239, col: 80, offset: 35496},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1243, col: 1, offset: 35550},
			expr: &actionExpr{
				pos: position{line: 1244, col: 5, offset: 35561},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1244, col: 5, offset: 35561},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1244, col: 5, offset: 35561},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1244, col: 9, offset: 35565},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1244, col: 14, offset: 35570},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1244, col: 25, offset: 35581},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1246, col: 1, offset: 35607},
			expr: &actionExpr{
				pos: position{line: 1247, col: 5, offset: 35622},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1247, col: 5, offset: 35622},
					expr: &choiceExpr{
						pos: position{line: 1247, col: 6, offset: 35623},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1247, col: 6, offset: 35623},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 1247, col: 13, offset: 35630},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1249, col: 1, offset: 35670},
			expr: &charClassMatcher{
				pos:        position{line: 1250, col: 5, offset: 35686},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1252, col: 1, offset: 35701},
			expr: &oneOrMoreExpr{
				pos: position{line: 1252, col: 6, offset: 35706},
				expr: &ruleRefExpr{
					pos:  position{line: 1252, col: 6, offset: 35706},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1254, col: 1, offset: 35717},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1254, col: 6, offset: 35722},
				expr: &ruleRefExpr{
					pos:  position{line: 1254, col: 6, offset: 35722},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1256, col: 1, offset: 35733},
			expr: &choiceExpr{
				pos: position{line: 1257, col: 5, offset: 35746},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1257, col: 5, offset: 35746},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1258, col: 5, offset: 35761},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1259, col: 5, offset: 35780},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1261, col: 1, offset: 35789},
			expr: &anyMatcher{
				line: 1262, col: 5, offset: 35809,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1264, col: 1, offset: 35812},
			expr: &choiceExpr{
				pos: position{line: 1265, col: 5, offset: 35840},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1265, col: 5, offset: 35840},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1266, col: 5, offset: 35849},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1267, col: 5, offset: 35858},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1268, col: 5, offset: 35867},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1269, col: 5, offset: 35875},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1270, col: 5, offset: 35888},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1272, col: 1, offset: 35898},
			expr: &charClassMatcher{
				pos:        position{line: 1273, col: 5, offset: 35917},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1279, col: 1, offset: 36247},
			expr: &ruleRefExpr{
				pos:  position{line: 1282, col: 5, offset: 36318},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1284, col: 1, offset: 36337},
			expr: &seqExpr{
				pos: position{line: 1285, col: 5, offset: 36358},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1285, col: 5, offset: 36358},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1285, col: 10, offset: 36363},
						expr: &seqExpr{
							pos: position{line: 1285, col: 11, offset: 36364},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1285, col: 11, offset: 36364},
									expr: &litMatcher{
										pos:        position{line: 1285, col: 12, offset: 36365},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1285, col: 17, offset: 36370},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1285, col: 35, offset: 36388},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1287, col: 1, offset: 36394},
			expr: &seqExpr{
				pos: position{line: 1288, col: 5, offset: 36416},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1288, col: 5, offset: 36416},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1288, col: 10, offset: 36421},
						expr: &seqExpr{
							pos: position{line: 1288, col: 11, offset: 36422},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1288, col: 11, offset: 36422},
									expr: &ruleRefExpr{
										pos:  position{line: 1288, col: 12, offset: 36423},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1288, col: 27, offset: 36438},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1290, col: 1, offset: 36457},
			expr: &seqExpr{
				pos: position{line: 1290, col: 7, offset: 36463},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1290, col: 7, offset: 36463},
						expr: &ruleRefExpr{
							pos:  position{line: 1290, col: 7, offset: 36463},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1290, col: 19, offset: 36475},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1292, col: 1, offset: 36491},
			expr: &choiceExpr{
				pos: position{line: 1292, col: 7, offset: 36497},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1292, col: 7, offset: 36497},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1292, col: 11, offset: 36501},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1294, col: 1, offset: 36506},
			expr: &notExpr{
				pos: position{line: 1294, col: 7, offset: 36512},
				expr: &anyMatcher{
					line: 1294, col: 8, offset: 36513,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(consts, first, rest interface{}) (interface{}, error) {
	var procs = consts.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"op": "SequentialProc", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onAnyConst2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ConstProc", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyConst2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyConst2(stack["id"], stack["expr"])
}

func (c *current) onAnyConst18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyConst18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyConst18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParallel2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel2(stack["first"], stack["rest"])
}

func (c *current) onParallel9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonParallel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel9(stack["first"])
}

func (c *current) onParallelTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonParallelTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallelTail1(stack["ch"])
}

func (c *current) onSwitchBranch1(filter, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"filter": filter, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch1(stack["filter"], stack["proc"])
}

func (c *current) onSwitch2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSwitch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch2(stack["first"], stack["rest"])
}

func (c *current) onSwitch9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonSwitch9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch9(stack["first"])
}

func (c *current) onSwitchTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonSwitchTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchTail1(stack["ch"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ParallelProc", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation14(caseArray interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SwitchProc", "cases": caseArray}, nil

}

func (p *parser) callonOperation14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation14(stack["caseArray"])
}

func (c *current) onOperation27(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation27(stack["f"])
}

func (c *current) onOperation33(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation33(stack["a"])
}

func (c *current) onOperation39(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonOperation39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation39(stack["expr"])
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor15(stack["expr"])
}

func (c *current) onShortCut2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": "or",

		"args": []interface{}{

			map[string]interface{}{"op": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"op": "RootRecord"}},

				"methods": []interface{}{

					map[string]interface{}{"op": "FunctionCall", "function": "map",

						"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "=",

							"lhs": map[string]interface{}{"op": "Identifier", "name": "$"},

							"rhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut2(stack["compareOp"], stack["v"])
}

func (c *current) onShortCut11(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": comp, "lhs": f, "rhs": v}, nil

}

func (p *parser) callonShortCut11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut11(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onShortCut23(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": "or",

		"args": []interface{}{

			map[string]interface{}{"op": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"op": "RootRecord"}},

				"methods": []interface{}{

					map[string]interface{}{"op": "FunctionCall", "function": "map",

						"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "in",

							"rhs": map[string]interface{}{"op": "Identifier", "name": "$"},

							"lhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut23(stack["v"])
}

func (c *current) onShortCut31(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonShortCut31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut31(stack["v"])
}

func (c *current) onShortCut41() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil

}

func (p *parser) callonShortCut41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut41()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlobbySearchValue3(v interface{}) (interface{}, error) {
	var str = v.(string)
	var literal = map[string]interface{}{"op": "Literal", "type": "string", "value": v}
	if reglob.IsGlobby(str) {
		literal["type"] = "regexp"
		literal["value"] = reglob.Reglob(str)
	}
	return literal, nil

}

func (p *parser) callonGlobbySearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobbySearchValue3(stack["v"])
}

func (c *current) onSearchGlob1(head, tail interface{}) (interface{}, error) {
	return joinChars(head) + joinChars(tail), nil

}

func (p *parser) callonSearchGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobPart2(s, v interface{}) (interface{}, error) {
	return s.(string) + v.(string), nil
}

func (p *parser) callonGlobPart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPart2(stack["s"], stack["v"])
}

func (c *current) onStars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonStars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStars1()
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchExprRelative7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprRelative7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprRelative1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprRelative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprAdd7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprAdd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprAdd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprAdd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprMul7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprMul7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprMul1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprMul1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprCast2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonSearchExprCast2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast2(stack["e"], stack["typ"])
}

func (c *current) onSearchExprFunc4(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprFunc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprFunc4(stack["first"], stack["rest"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "GroupByProc", "keys": keys, "reducers": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation11(every, reducers, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"op": "GroupByProc", "keys": nil, "reducers": reducers, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation11(stack["every"], stack["reducers"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur2(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur2(stack["dur"])
}

func (c *current) onEveryDur9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonEveryDur9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur9()
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onReducerAssignment2(lval, reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lval, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment2(stack["lval"], stack["reducer"])
}

func (c *current) onReducerAssignment11(reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment11(stack["reducer"])
}

func (c *current) onReducer1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"op": "Reducer", "operator": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonReducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducer1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onReducers1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonReducers1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducers1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"op": "SortProc", "fields": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "TopProc", "limit": 0, "fields": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["fields"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CutProc", "fields": columns}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["columns"])
}

func (c *current) onPickProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PickProc", "fields": columns}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["columns"])
}

func (c *current) onDropProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "DropProc", "fields": columns}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["columns"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PutProc", "clauses": columns}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["columns"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "RenameProc", "fields": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"op": "FuseProc"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onJoinProc2(kind, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "JoinProc", "kind": kind, "left_key": leftKey, "right_key": rightKey, "clauses": nil}
	if columns != nil {
		proc["clauses"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["kind"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc20(kind, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "JoinProc", "kind": kind, "left_key": key, "right_key": key, "clauses": nil}
	if columns != nil {
		proc["clauses"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc20(stack["kind"], stack["key"], stack["columns"])
}

func (c *current) onJoinKind2() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKind2()
}

func (c *current) onJoinKind6() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKind6()
}

func (c *current) onJoinKind10() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKind10()
}

func (c *current) onJoinKind14() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinKind14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKind14()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onTasteProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": []interface{}{

		map[string]interface{}{"op": "GroupByProc",

			"keys": []interface{}{map[string]interface{}{"op": "Assignment",

				"lhs": map[string]interface{}{"op": "Identifier", "name": "shape"},

				"rhs": map[string]interface{}{"op": "FunctionCall", "function": "typeof",

					"args": []interface{}{e}}}},

			"reducers": []interface{}{map[string]interface{}{"op": "Assignment",

				"lhs": map[string]interface{}{"op": "Identifier", "name": "taste"},

				"rhs": map[string]interface{}{"op": "Reducer",

					"operator": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"op": "CutProc",

			"fields": []interface{}{map[string]interface{}{"op": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"op": "Identifier", "name": "taste"}}}}}}, nil

}

func (p *parser) callonTasteProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteProc1(stack["e"])
}

func (c *current) onTasteExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonTasteExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteExpr2(stack["lval"])
}

func (c *current) onTasteExpr7() (interface{}, error) {
	return map[string]interface{}{"op": "RootRecord"}, nil
}

func (p *parser) callonTasteExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteExpr7()
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ConditionalExpr", "condition": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onCastExpr2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonCastExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpr2(stack["e"], stack["typ"])
}

func (c *current) onFuncExpr5(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr5(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SelectExpr", "selectors": args, "methods": methods}, nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onMethods2(methods interface{}) (interface{}, error) {
	return methods, nil
}

func (p *parser) callonMethods2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods2(stack["methods"])
}

func (c *current) onMethods6() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonMethods6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods6()
}

func (c *current) onMethod1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMethod1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethod1(stack["f"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onArgumentList8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonArgumentList8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList8(stack["e"])
}

func (c *current) onArgumentList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonArgumentList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList2(stack["first"], stack["rest"])
}

func (c *current) onArgumentList15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonArgumentList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList15()
}

func (c *current) onDerefExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr2(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr9(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr16() (interface{}, error) {
	return map[string]interface{}{"op": "RootRecord"}, nil

}

func (p *parser) callonDerefExpr16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr16()
}

func (c *current) onDotId2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": ".",

		"lhs": map[string]interface{}{"op": "RootRecord"},

		"rhs": field}, nil

}

func (p *parser) callonDotId2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId2(stack["field"])
}

func (c *current) onDotId7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": "[",

		"lhs": map[string]interface{}{"op": "RootRecord"},

		"rhs": expr}, nil

}

func (p *parser) callonDotId7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary3(stack["expr"])
}

func (c *current) onSqlProc1(selection, from, joins, where, groupby, having, orderby, limit interface{}) (interface{}, error) {
	return map[string]interface{}{

		"op": "SqlExpr",

		"select": selection,

		"from": from,

		"joins": joins,

		"where": where,

		"groupby": groupby,

		"having": having,

		"orderby": orderby,

		"limit": limit}, nil

}

func (p *parser) callonSqlProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlProc1(stack["selection"], stack["from"], stack["joins"], stack["where"], stack["groupby"], stack["having"], stack["orderby"], stack["limit"])
}

func (c *current) onSqlSelect2() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSqlSelect2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlSelect2()
}

func (c *current) onSqlSelect7(assignments interface{}) (interface{}, error) {
	return assignments, nil
}

func (p *parser) callonSqlSelect7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlSelect7(stack["assignments"])
}

func (c *current) onSqlAssignment2(rhs, lhs interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonSqlAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlAssignment2(stack["rhs"], stack["lhs"])
}

func (c *current) onSqlAssignment11(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonSqlAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlAssignment11(stack["expr"])
}

func (c *current) onSqlAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSqlAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlAssignments7(stack["expr"])
}

func (c *current) onSqlAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSqlAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlAssignments1(stack["first"], stack["rest"])
}

func (c *current) onSqlFrom2(table, alias interface{}) (interface{}, error) {
	return map[string]interface{}{"table": table, "alias": alias}, nil

}

func (p *parser) callonSqlFrom2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlFrom2(stack["table"], stack["alias"])
}

func (c *current) onSqlFrom11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSqlFrom11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlFrom11()
}

func (c *current) onSqlAlias2(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonSqlAlias2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlAlias2(stack["id"])
}

func (c *current) onSqlAlias7() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSqlAlias7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlAlias7()
}

func (c *current) onSqlTable3() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil
}

func (p *parser) callonSqlTable3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlTable3()
}

func (c *current) onSqlJoins8(join interface{}) (interface{}, error) {
	return join, nil
}

func (p *parser) callonSqlJoins8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlJoins8(stack["join"])
}

func (c *current) onSqlJoins2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSqlJoins2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlJoins2(stack["first"], stack["rest"])
}

func (c *current) onSqlJoins11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSqlJoins11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlJoins11()
}

func (c *current) onSqlJoin1(kind, table, alias, leftKey, rightKey interface{}) (interface{}, error) {
	return map[string]interface{}{

		"kind": kind,

		"table": table,

		"left_key": leftKey,

		"right_key": rightKey,

		"alias": alias}, nil

}

func (p *parser) callonSqlJoin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlJoin1(stack["kind"], stack["table"], stack["alias"], stack["leftKey"], stack["rightKey"])
}

func (c *current) onSqlJoinKind2(kind interface{}) (interface{}, error) {
	return kind, nil
}

func (p *parser) callonSqlJoinKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlJoinKind2(stack["kind"])
}

func (c *current) onSqlJoinKind10() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonSqlJoinKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlJoinKind10()
}

func (c *current) onSqlWhere2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSqlWhere2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlWhere2(stack["expr"])
}

func (c *current) onSqlWhere9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSqlWhere9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlWhere9()
}

func (c *current) onSqlGroupBy2(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonSqlGroupBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlGroupBy2(stack["columns"])
}

func (c *current) onSqlGroupBy11() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSqlGroupBy11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlGroupBy11()
}

func (c *current) onSqlHaving2(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSqlHaving2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlHaving2(stack["expr"])
}

func (c *current) onSqlHaving9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSqlHaving9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlHaving9()
}

func (c *current) onSqlOrderBy2(keys, direction interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SqlOrderBy", "keys": keys, "direction": direction}, nil

}

func (p *parser) callonSqlOrderBy2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlOrderBy2(stack["keys"], stack["direction"])
}

func (c *current) onSqlOrderBy13() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonSqlOrderBy13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlOrderBy13()
}

func (c *current) onSqlDirection2(dir interface{}) (interface{}, error) {
	return dir, nil
}

func (p *parser) callonSqlDirection2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlDirection2(stack["dir"])
}

func (c *current) onSqlDirection9() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonSqlDirection9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlDirection9()
}

func (c *current) onSqlLimit2(count interface{}) (interface{}, error) {
	return count, nil
}

func (p *parser) callonSqlLimit2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlLimit2(stack["count"])
}

func (c *current) onSqlLimit9() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonSqlLimit9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSqlLimit9()
}

func (c *current) onSELECT1() (interface{}, error) {
	return "select", nil
}

func (p *parser) callonSELECT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSELECT1()
}

func (c *current) onAS1() (interface{}, error) {
	return "as", nil
}

func (p *parser) callonAS1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAS1()
}

func (c *current) onFROM1() (interface{}, error) {
	return "from", nil
}

func (p *parser) callonFROM1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFROM1()
}

func (c *current) onJOIN1() (interface{}, error) {
	return "join", nil
}

func (p *parser) callonJOIN1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJOIN1()
}

func (c *current) onWHERE1() (interface{}, error) {
	return "where", nil
}

func (p *parser) callonWHERE1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWHERE1()
}

func (c *current) onGROUP1() (interface{}, error) {
	return "group", nil
}

func (p *parser) callonGROUP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGROUP1()
}

func (c *current) onHAVING1() (interface{}, error) {
	return "having", nil
}

func (p *parser) callonHAVING1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHAVING1()
}

func (c *current) onORDER1() (interface{}, error) {
	return "order", nil
}

func (p *parser) callonORDER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onORDER1()
}

func (c *current) onON1() (interface{}, error) {
	return "on", nil
}

func (p *parser) callonON1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onON1()
}

func (c *current) onLIMIT1() (interface{}, error) {
	return "limit", nil
}

func (p *parser) callonLIMIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLIMIT1()
}

func (c *current) onASC1() (interface{}, error) {
	return "asc", nil
}

func (p *parser) callonASC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onASC1()
}

func (c *current) onDESC1() (interface{}, error) {
	return "desc", nil
}

func (p *parser) callonDESC1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDESC1()
}

func (c *current) onLEFT1() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonLEFT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLEFT1()
}

func (c *current) onRIGHT1() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonRIGHT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRIGHT1()
}

func (c *current) onINNER1() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonINNER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onINNER1()
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onRegexpLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "regexp", "value": v}, nil

}

func (p *parser) callonRegexpLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "float64", "value": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "int64", "value": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "null", "value": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeValue", "value": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onTypeExternal2(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal2(stack["typ"])
}

func (c *current) onTypeExternal12(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal12(stack["typ"])
}

func (c *current) onTypeExternal23(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal23(stack["typ"])
}

func (c *current) onAmbiguousType2() (interface{}, error) {
	return map[string]interface{}{"op": "TypeNull"}, nil

}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2()
}

func (c *current) onAmbiguousType6(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType6(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveTypeExternal1() (interface{}, error) {
	return map[string]interface{}{"op": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeExternal1()
}

func (c *current) onPrimitiveTypeInternal1() (interface{}, error) {
	return map[string]interface{}{"op": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeInternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeInternal1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Identifier", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onIdentifierName21(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName21(stack["id"])
}

func (c *current) onSeconds2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 1}, nil
}

func (p *parser) callonSeconds2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds2()
}

func (c *current) onSeconds4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num}, nil
}

func (p *parser) callonSeconds4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds4(stack["num"])
}

func (c *current) onMinutes2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 60}, nil
}

func (p *parser) callonMinutes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes2()
}

func (c *current) onMinutes4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 60}, nil
}

func (p *parser) callonMinutes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes4(stack["num"])
}

func (c *current) onHours2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600}, nil
}

func (p *parser) callonHours2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours2()
}

func (c *current) onHours4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600}, nil
}

func (p *parser) callonHours4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours4(stack["num"])
}

func (c *current) onDays2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24}, nil
}

func (p *parser) callonDays2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays2()
}

func (c *current) onDays4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": (num.(int) * 3600 * 24)}, nil
}

func (p *parser) callonDays4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays4(stack["num"])
}

func (c *current) onWeeks2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks2()
}

func (c *current) onWeeks4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks4(stack["num"])
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordStart2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordStart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordStart2()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape5() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape5()
}

func (c *current) onSingleCharEscape7() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape7()
}

func (c *current) onSingleCharEscape9() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape9()
}

func (c *current) onSingleCharEscape11() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape11()
}

func (c *current) onSingleCharEscape13() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape13()
}

func (c *current) onSingleCharEscape15() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape15()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
