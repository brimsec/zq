// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimsec/zq/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 10, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 10, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 10, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 10, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 10, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 16, offset: 41},
								name: "Z",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 18, offset: 43},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 21, offset: 46},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Z",
			pos:  position{line: 16, col: 1, offset: 352},
			expr: &choiceExpr{
				pos: position{line: 17, col: 5, offset: 432},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 17, col: 5, offset: 432},
						run: (*parser).callonZ2,
						expr: &seqExpr{
							pos: position{line: 17, col: 5, offset: 432},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 17, col: 5, offset: 432},
									label: "consts",
									expr: &oneOrMoreExpr{
										pos: position{line: 17, col: 12, offset: 439},
										expr: &ruleRefExpr{
											pos:  position{line: 17, col: 12, offset: 439},
											name: "Const",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 19, offset: 446},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 17, col: 22, offset: 449},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 17, col: 28, offset: 455},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 17, col: 38, offset: 465},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 17, col: 43, offset: 470},
										expr: &ruleRefExpr{
											pos:  position{line: 17, col: 43, offset: 470},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 5, offset: 746},
						name: "Sequential",
					},
				},
			},
		},
		{
			name: "Const",
			pos:  position{line: 27, col: 1, offset: 758},
			expr: &actionExpr{
				pos: position{line: 27, col: 9, offset: 766},
				run: (*parser).callonConst1,
				expr: &seqExpr{
					pos: position{line: 27, col: 9, offset: 766},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 27, col: 9, offset: 766},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 27, col: 12, offset: 769},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 14, offset: 771},
								name: "AnyConst",
							},
						},
					},
				},
			},
		},
		{
			name: "AnyConst",
			pos:  position{line: 29, col: 1, offset: 799},
			expr: &choiceExpr{
				pos: position{line: 30, col: 5, offset: 812},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 30, col: 5, offset: 812},
						run: (*parser).callonAnyConst2,
						expr: &seqExpr{
							pos: position{line: 30, col: 5, offset: 812},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 30, col: 5, offset: 812},
									val:        "const",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 13, offset: 820},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 15, offset: 822},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 18, offset: 825},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 33, offset: 840},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 30, col: 36, offset: 843},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 30, col: 40, offset: 847},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 30, col: 43, offset: 850},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 30, col: 48, offset: 855},
										name: "Expr",
									},
								},
								&choiceExpr{
									pos: position{line: 30, col: 55, offset: 862},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 30, col: 55, offset: 862},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 30, col: 55, offset: 862},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 30, col: 58, offset: 865},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 30, col: 64, offset: 871},
											name: "EOL",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 33, col: 5, offset: 971},
						run: (*parser).callonAnyConst18,
						expr: &seqExpr{
							pos: position{line: 33, col: 5, offset: 971},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 33, col: 5, offset: 971},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 33, col: 12, offset: 978},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 33, col: 14, offset: 980},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 33, col: 17, offset: 983},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 33, col: 32, offset: 998},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 33, col: 35, offset: 1001},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 33, col: 39, offset: 1005},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 33, col: 42, offset: 1008},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 33, col: 46, offset: 1012},
										name: "Type",
									},
								},
								&choiceExpr{
									pos: position{line: 33, col: 53, offset: 1019},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 33, col: 53, offset: 1019},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 33, col: 53, offset: 1019},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 33, col: 56, offset: 1022},
													val:        ";",
													ignoreCase: false,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 33, col: 62, offset: 1028},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Sequential",
			pos:  position{line: 37, col: 1, offset: 1123},
			expr: &choiceExpr{
				pos: position{line: 38, col: 5, offset: 1138},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 38, col: 5, offset: 1138},
						run: (*parser).callonSequential2,
						expr: &seqExpr{
							pos: position{line: 38, col: 5, offset: 1138},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 38, col: 5, offset: 1138},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 38, col: 11, offset: 1144},
										name: "Operation",
									},
								},
								&labeledExpr{
									pos:   position{line: 38, col: 21, offset: 1154},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 38, col: 26, offset: 1159},
										expr: &ruleRefExpr{
											pos:  position{line: 38, col: 26, offset: 1159},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 41, col: 5, offset: 1319},
						run: (*parser).callonSequential9,
						expr: &labeledExpr{
							pos:   position{line: 41, col: 5, offset: 1319},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 8, offset: 1322},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 45, col: 1, offset: 1434},
			expr: &actionExpr{
				pos: position{line: 45, col: 18, offset: 1451},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 45, col: 18, offset: 1451},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 45, col: 18, offset: 1451},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 45, col: 21, offset: 1454},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 45, col: 25, offset: 1458},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 45, col: 28, offset: 1461},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 45, col: 30, offset: 1463},
								name: "Operation",
							},
						},
					},
				},
			},
		},
		{
			name: "Parallel",
			pos:  position{line: 47, col: 1, offset: 1492},
			expr: &choiceExpr{
				pos: position{line: 48, col: 5, offset: 1505},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 1505},
						run: (*parser).callonParallel2,
						expr: &seqExpr{
							pos: position{line: 48, col: 5, offset: 1505},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 48, col: 5, offset: 1505},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1511},
										name: "Sequential",
									},
								},
								&labeledExpr{
									pos:   position{line: 48, col: 22, offset: 1522},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 48, col: 27, offset: 1527},
										expr: &ruleRefExpr{
											pos:  position{line: 48, col: 27, offset: 1527},
											name: "ParallelTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 51, col: 5, offset: 1628},
						run: (*parser).callonParallel9,
						expr: &labeledExpr{
							pos:   position{line: 51, col: 5, offset: 1628},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 51, col: 11, offset: 1634},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "ParallelTail",
			pos:  position{line: 55, col: 1, offset: 1693},
			expr: &actionExpr{
				pos: position{line: 56, col: 5, offset: 1710},
				run: (*parser).callonParallelTail1,
				expr: &seqExpr{
					pos: position{line: 56, col: 5, offset: 1710},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 56, col: 5, offset: 1710},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 56, col: 8, offset: 1713},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 13, offset: 1718},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 16, offset: 1721},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 19, offset: 1724},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchBranch",
			pos:  position{line: 59, col: 1, offset: 1756},
			expr: &actionExpr{
				pos: position{line: 60, col: 5, offset: 1773},
				run: (*parser).callonSwitchBranch1,
				expr: &seqExpr{
					pos: position{line: 60, col: 5, offset: 1773},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 60, col: 5, offset: 1773},
							label: "filter",
							expr: &ruleRefExpr{
								pos:  position{line: 60, col: 12, offset: 1780},
								name: "SearchBoolean",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 60, col: 26, offset: 1794},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 60, col: 29, offset: 1797},
							val:        "=>",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 60, col: 34, offset: 1802},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 60, col: 37, offset: 1805},
							label: "proc",
							expr: &ruleRefExpr{
								pos:  position{line: 60, col: 42, offset: 1810},
								name: "Sequential",
							},
						},
					},
				},
			},
		},
		{
			name: "Switch",
			pos:  position{line: 64, col: 1, offset: 1899},
			expr: &choiceExpr{
				pos: position{line: 65, col: 5, offset: 1910},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 65, col: 5, offset: 1910},
						run: (*parser).callonSwitch2,
						expr: &seqExpr{
							pos: position{line: 65, col: 5, offset: 1910},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 65, col: 5, offset: 1910},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1916},
										name: "SwitchBranch",
									},
								},
								&labeledExpr{
									pos:   position{line: 65, col: 24, offset: 1929},
									label: "rest",
									expr: &oneOrMoreExpr{
										pos: position{line: 65, col: 29, offset: 1934},
										expr: &ruleRefExpr{
											pos:  position{line: 65, col: 29, offset: 1934},
											name: "SwitchTail",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 68, col: 5, offset: 2033},
						run: (*parser).callonSwitch9,
						expr: &labeledExpr{
							pos:   position{line: 68, col: 5, offset: 2033},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 68, col: 11, offset: 2039},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "SwitchTail",
			pos:  position{line: 72, col: 1, offset: 2100},
			expr: &actionExpr{
				pos: position{line: 73, col: 5, offset: 2115},
				run: (*parser).callonSwitchTail1,
				expr: &seqExpr{
					pos: position{line: 73, col: 5, offset: 2115},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 73, col: 5, offset: 2115},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 73, col: 8, offset: 2118},
							name: "CaseToken",
						},
						&ruleRefExpr{
							pos:  position{line: 73, col: 18, offset: 2128},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 73, col: 21, offset: 2131},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 73, col: 24, offset: 2134},
								name: "SwitchBranch",
							},
						},
					},
				},
			},
		},
		{
			name: "CaseToken",
			pos:  position{line: 75, col: 1, offset: 2167},
			expr: &litMatcher{
				pos:        position{line: 75, col: 13, offset: 2179},
				val:        "case",
				ignoreCase: false,
			},
		},
		{
			name: "Operation",
			pos:  position{line: 77, col: 1, offset: 2187},
			expr: &choiceExpr{
				pos: position{line: 78, col: 5, offset: 2201},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 78, col: 5, offset: 2201},
						run: (*parser).callonOperation2,
						expr: &seqExpr{
							pos: position{line: 78, col: 5, offset: 2201},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 78, col: 5, offset: 2201},
									val:        "split",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 13, offset: 2209},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 16, offset: 2212},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 20, offset: 2216},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 23, offset: 2219},
									val:        "=>",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 28, offset: 2224},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 78, col: 31, offset: 2227},
									label: "procArray",
									expr: &ruleRefExpr{
										pos:  position{line: 78, col: 41, offset: 2237},
										name: "Parallel",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 78, col: 50, offset: 2246},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 78, col: 53, offset: 2249},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 81, col: 5, offset: 2348},
						run: (*parser).callonOperation14,
						expr: &seqExpr{
							pos: position{line: 81, col: 5, offset: 2348},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 81, col: 5, offset: 2348},
									val:        "switch",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 81, col: 14, offset: 2357},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 81, col: 17, offset: 2360},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 81, col: 21, offset: 2364},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 81, col: 24, offset: 2367},
									name: "CaseToken",
								},
								&ruleRefExpr{
									pos:  position{line: 81, col: 34, offset: 2377},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 81, col: 37, offset: 2380},
									label: "caseArray",
									expr: &ruleRefExpr{
										pos:  position{line: 81, col: 47, offset: 2390},
										name: "Switch",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 81, col: 54, offset: 2397},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 81, col: 57, offset: 2400},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 84, col: 5, offset: 2497},
						name: "Operator",
					},
					&actionExpr{
						pos: position{line: 85, col: 5, offset: 2510},
						run: (*parser).callonOperation27,
						expr: &seqExpr{
							pos: position{line: 85, col: 5, offset: 2510},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 85, col: 5, offset: 2510},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 85, col: 7, offset: 2512},
										name: "Function",
									},
								},
								&andExpr{
									pos: position{line: 85, col: 16, offset: 2521},
									expr: &ruleRefExpr{
										pos:  position{line: 85, col: 17, offset: 2522},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 86, col: 5, offset: 2552},
						run: (*parser).callonOperation33,
						expr: &seqExpr{
							pos: position{line: 86, col: 5, offset: 2552},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 86, col: 5, offset: 2552},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 86, col: 7, offset: 2554},
										name: "Aggregation",
									},
								},
								&andExpr{
									pos: position{line: 86, col: 19, offset: 2566},
									expr: &ruleRefExpr{
										pos:  position{line: 86, col: 20, offset: 2567},
										name: "EndOfOp",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 87, col: 5, offset: 2598},
						run: (*parser).callonOperation39,
						expr: &seqExpr{
							pos: position{line: 87, col: 5, offset: 2598},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 87, col: 5, offset: 2598},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 87, col: 10, offset: 2603},
										name: "SearchBoolean",
									},
								},
								&notExpr{
									pos: position{line: 87, col: 24, offset: 2617},
									expr: &ruleRefExpr{
										pos:  position{line: 87, col: 25, offset: 2618},
										name: "AggGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EndOfOp",
			pos:  position{line: 91, col: 1, offset: 2713},
			expr: &seqExpr{
				pos: position{line: 91, col: 11, offset: 2723},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 91, col: 11, offset: 2723},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 91, col: 15, offset: 2727},
						alternatives: []interface{}{
							&litMatcher{
								pos:        position{line: 91, col: 15, offset: 2727},
								val:        "|",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 91, col: 21, offset: 2733},
								val:        "=>",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 91, col: 28, offset: 2740},
								val:        ")",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 91, col: 34, offset: 2746},
								name: "EOF",
							},
						},
					},
				},
			},
		},
		{
			name: "ExprGuard",
			pos:  position{line: 93, col: 1, offset: 2752},
			expr: &seqExpr{
				pos: position{line: 93, col: 13, offset: 2764},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 93, col: 13, offset: 2764},
						name: "__",
					},
					&choiceExpr{
						pos: position{line: 93, col: 17, offset: 2768},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 93, col: 18, offset: 2769},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 93, col: 18, offset: 2769},
										expr: &litMatcher{
											pos:        position{line: 93, col: 19, offset: 2770},
											val:        "=>",
											ignoreCase: false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 93, col: 24, offset: 2775},
										name: "Comparator",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 93, col: 38, offset: 2789},
								name: "AdditiveOperator",
							},
							&ruleRefExpr{
								pos:  position{line: 93, col: 57, offset: 2808},
								name: "MultiplicativeOperator",
							},
							&litMatcher{
								pos:        position{line: 93, col: 82, offset: 2833},
								val:        ":",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 93, col: 88, offset: 2839},
								val:        "(",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "AggGuard",
			pos:  position{line: 94, col: 1, offset: 2844},
			expr: &choiceExpr{
				pos: position{line: 94, col: 12, offset: 2855},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 94, col: 13, offset: 2856},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 94, col: 13, offset: 2856},
								name: "_",
							},
							&choiceExpr{
								pos: position{line: 94, col: 16, offset: 2859},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 94, col: 16, offset: 2859},
										name: "ByToken",
									},
									&litMatcher{
										pos:        position{line: 94, col: 26, offset: 2869},
										val:        "-with",
										ignoreCase: false,
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 94, col: 35, offset: 2878},
								name: "EOT",
							},
						},
					},
					&seqExpr{
						pos: position{line: 94, col: 43, offset: 2886},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 94, col: 43, offset: 2886},
								name: "__",
							},
							&litMatcher{
								pos:        position{line: 94, col: 46, offset: 2889},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "SearchBoolean",
			pos:  position{line: 96, col: 1, offset: 2895},
			expr: &actionExpr{
				pos: position{line: 97, col: 5, offset: 2913},
				run: (*parser).callonSearchBoolean1,
				expr: &seqExpr{
					pos: position{line: 97, col: 5, offset: 2913},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 97, col: 5, offset: 2913},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 97, col: 11, offset: 2919},
								name: "SearchAnd",
							},
						},
						&labeledExpr{
							pos:   position{line: 97, col: 21, offset: 2929},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 97, col: 26, offset: 2934},
								expr: &ruleRefExpr{
									pos:  position{line: 97, col: 26, offset: 2934},
									name: "SearchOrTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchOrTerm",
			pos:  position{line: 101, col: 1, offset: 3008},
			expr: &actionExpr{
				pos: position{line: 101, col: 16, offset: 3023},
				run: (*parser).callonSearchOrTerm1,
				expr: &seqExpr{
					pos: position{line: 101, col: 16, offset: 3023},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 101, col: 16, offset: 3023},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 101, col: 18, offset: 3025},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 101, col: 26, offset: 3033},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 101, col: 28, offset: 3035},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 101, col: 30, offset: 3037},
								name: "SearchAnd",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchAnd",
			pos:  position{line: 103, col: 1, offset: 3087},
			expr: &actionExpr{
				pos: position{line: 104, col: 5, offset: 3101},
				run: (*parser).callonSearchAnd1,
				expr: &seqExpr{
					pos: position{line: 104, col: 5, offset: 3101},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 104, col: 5, offset: 3101},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 11, offset: 3107},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 105, col: 5, offset: 3124},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 105, col: 10, offset: 3129},
								expr: &actionExpr{
									pos: position{line: 105, col: 11, offset: 3130},
									run: (*parser).callonSearchAnd7,
									expr: &seqExpr{
										pos: position{line: 105, col: 11, offset: 3130},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 105, col: 11, offset: 3130},
												name: "__",
											},
											&zeroOrOneExpr{
												pos: position{line: 105, col: 14, offset: 3133},
												expr: &seqExpr{
													pos: position{line: 105, col: 15, offset: 3134},
													exprs: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 105, col: 15, offset: 3134},
															name: "AndToken",
														},
														&ruleRefExpr{
															pos:  position{line: 105, col: 24, offset: 3143},
															name: "_",
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 105, col: 28, offset: 3147},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 105, col: 31, offset: 3150},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 105, col: 36, offset: 3155},
													name: "SearchFactor",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 109, col: 1, offset: 3271},
			expr: &choiceExpr{
				pos: position{line: 110, col: 5, offset: 3288},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 110, col: 5, offset: 3288},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 110, col: 5, offset: 3288},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 110, col: 6, offset: 3289},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 110, col: 6, offset: 3289},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 110, col: 6, offset: 3289},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 110, col: 15, offset: 3298},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 110, col: 19, offset: 3302},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 110, col: 19, offset: 3302},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 110, col: 23, offset: 3306},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 110, col: 27, offset: 3310},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 110, col: 29, offset: 3312},
										name: "SearchFactor",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 113, col: 5, offset: 3428},
						name: "ShortCut",
					},
					&ruleRefExpr{
						pos:  position{line: 114, col: 5, offset: 3441},
						name: "SearchExpr",
					},
					&actionExpr{
						pos: position{line: 115, col: 5, offset: 3456},
						run: (*parser).callonSearchFactor15,
						expr: &seqExpr{
							pos: position{line: 115, col: 5, offset: 3456},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 115, col: 5, offset: 3456},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 115, col: 9, offset: 3460},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 115, col: 12, offset: 3463},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 115, col: 17, offset: 3468},
										name: "SearchBoolean",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 115, col: 31, offset: 3482},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 115, col: 34, offset: 3485},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortCut",
			pos:  position{line: 117, col: 1, offset: 3511},
			expr: &choiceExpr{
				pos: position{line: 118, col: 5, offset: 3524},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 118, col: 5, offset: 3524},
						run: (*parser).callonShortCut2,
						expr: &seqExpr{
							pos: position{line: 118, col: 5, offset: 3524},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 118, col: 5, offset: 3524},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 118, col: 9, offset: 3528},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 118, col: 12, offset: 3531},
									label: "compareOp",
									expr: &ruleRefExpr{
										pos:  position{line: 118, col: 22, offset: 3541},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 118, col: 36, offset: 3555},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 118, col: 39, offset: 3558},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 118, col: 41, offset: 3560},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 145, col: 5, offset: 4281},
						run: (*parser).callonShortCut11,
						expr: &seqExpr{
							pos: position{line: 145, col: 5, offset: 4281},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 145, col: 5, offset: 4281},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 7, offset: 4283},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 145, col: 12, offset: 4288},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 145, col: 15, offset: 4291},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 20, offset: 4296},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 145, col: 34, offset: 4310},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 145, col: 37, offset: 4313},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 39, offset: 4315},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 145, col: 57, offset: 4333},
									expr: &ruleRefExpr{
										pos:  position{line: 145, col: 58, offset: 4334},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 148, col: 5, offset: 4452},
						run: (*parser).callonShortCut23,
						expr: &seqExpr{
							pos: position{line: 148, col: 5, offset: 4452},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 148, col: 5, offset: 4452},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 148, col: 7, offset: 4454},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 148, col: 19, offset: 4466},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 148, col: 21, offset: 4468},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 148, col: 29, offset: 4476},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 148, col: 31, offset: 4478},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 175, col: 5, offset: 5192},
						run: (*parser).callonShortCut31,
						expr: &seqExpr{
							pos: position{line: 175, col: 5, offset: 5192},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 175, col: 5, offset: 5192},
									expr: &seqExpr{
										pos: position{line: 175, col: 7, offset: 5194},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 175, col: 7, offset: 5194},
												name: "SearchGuard",
											},
											&ruleRefExpr{
												pos:  position{line: 175, col: 19, offset: 5206},
												name: "EOT",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 175, col: 24, offset: 5211},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 175, col: 26, offset: 5213},
										name: "GlobbySearchValue",
									},
								},
								&notExpr{
									pos: position{line: 175, col: 44, offset: 5231},
									expr: &ruleRefExpr{
										pos:  position{line: 175, col: 45, offset: 5232},
										name: "ExprGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 178, col: 5, offset: 5347},
						run: (*parser).callonShortCut41,
						expr: &seqExpr{
							pos: position{line: 178, col: 5, offset: 5347},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 178, col: 5, offset: 5347},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 178, col: 9, offset: 5351},
									expr: &ruleRefExpr{
										pos:  position{line: 178, col: 10, offset: 5352},
										name: "ExprGuard",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 182, col: 1, offset: 5462},
			expr: &choiceExpr{
				pos: position{line: 183, col: 5, offset: 5478},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 183, col: 5, offset: 5478},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 184, col: 5, offset: 5490},
						run: (*parser).callonSearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 184, col: 5, offset: 5490},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 7, offset: 5492},
								name: "KeyWord",
							},
						},
					},
				},
			},
		},
		{
			name: "GlobbySearchValue",
			pos:  position{line: 188, col: 1, offset: 5597},
			expr: &choiceExpr{
				pos: position{line: 189, col: 5, offset: 5619},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 189, col: 5, offset: 5619},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 190, col: 5, offset: 5631},
						run: (*parser).callonGlobbySearchValue3,
						expr: &labeledExpr{
							pos:   position{line: 190, col: 5, offset: 5631},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 7, offset: 5633},
								name: "SearchGlob",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchGlob",
			pos:  position{line: 200, col: 1, offset: 5919},
			expr: &actionExpr{
				pos: position{line: 201, col: 5, offset: 5934},
				run: (*parser).callonSearchGlob1,
				expr: &seqExpr{
					pos: position{line: 201, col: 5, offset: 5934},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 201, col: 5, offset: 5934},
							label: "head",
							expr: &oneOrMoreExpr{
								pos: position{line: 201, col: 10, offset: 5939},
								expr: &ruleRefExpr{
									pos:  position{line: 201, col: 10, offset: 5939},
									name: "GlobPart",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 201, col: 20, offset: 5949},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 201, col: 25, offset: 5954},
								expr: &litMatcher{
									pos:        position{line: 201, col: 26, offset: 5955},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GlobPart",
			pos:  position{line: 205, col: 1, offset: 6022},
			expr: &choiceExpr{
				pos: position{line: 206, col: 5, offset: 6035},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 206, col: 5, offset: 6035},
						run: (*parser).callonGlobPart2,
						expr: &seqExpr{
							pos: position{line: 206, col: 5, offset: 6035},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 206, col: 5, offset: 6035},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 206, col: 7, offset: 6037},
										name: "Stars",
									},
								},
								&labeledExpr{
									pos:   position{line: 206, col: 13, offset: 6043},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 206, col: 15, offset: 6045},
										name: "KeyWord",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 207, col: 5, offset: 6095},
						name: "KeyWord",
					},
				},
			},
		},
		{
			name: "Stars",
			pos:  position{line: 209, col: 1, offset: 6104},
			expr: &actionExpr{
				pos: position{line: 209, col: 9, offset: 6112},
				run: (*parser).callonStars1,
				expr: &oneOrMoreExpr{
					pos: position{line: 209, col: 9, offset: 6112},
					expr: &litMatcher{
						pos:        position{line: 209, col: 9, offset: 6112},
						val:        "*",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchGuard",
			pos:  position{line: 211, col: 1, offset: 6149},
			expr: &choiceExpr{
				pos: position{line: 212, col: 5, offset: 6165},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 212, col: 5, offset: 6165},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 213, col: 5, offset: 6178},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 214, col: 5, offset: 6190},
						name: "NotToken",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 5, offset: 6203},
						name: "InToken",
					},
					&ruleRefExpr{
						pos:  position{line: 216, col: 5, offset: 6215},
						name: "ByToken",
					},
					&ruleRefExpr{
						pos:  position{line: 217, col: 5, offset: 6227},
						name: "CaseToken",
					},
					&litMatcher{
						pos:        position{line: 218, col: 5, offset: 6241},
						val:        "type(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 222, col: 1, offset: 6298},
			expr: &ruleRefExpr{
				pos:  position{line: 222, col: 14, offset: 6311},
				name: "SearchExprRelative",
			},
		},
		{
			name: "Comparator",
			pos:  position{line: 224, col: 1, offset: 6331},
			expr: &actionExpr{
				pos: position{line: 224, col: 14, offset: 6344},
				run: (*parser).callonComparator1,
				expr: &choiceExpr{
					pos: position{line: 224, col: 15, offset: 6345},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 224, col: 15, offset: 6345},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 224, col: 21, offset: 6351},
							val:        "!=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 224, col: 28, offset: 6358},
							val:        "in",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 224, col: 35, offset: 6365},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 224, col: 42, offset: 6372},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 224, col: 48, offset: 6378},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 224, col: 55, offset: 6385},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchExprRelative",
			pos:  position{line: 226, col: 1, offset: 6422},
			expr: &actionExpr{
				pos: position{line: 227, col: 5, offset: 6445},
				run: (*parser).callonSearchExprRelative1,
				expr: &seqExpr{
					pos: position{line: 227, col: 5, offset: 6445},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 227, col: 5, offset: 6445},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 11, offset: 6451},
								name: "SearchExprAdd",
							},
						},
						&labeledExpr{
							pos:   position{line: 228, col: 5, offset: 6469},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 228, col: 10, offset: 6474},
								expr: &actionExpr{
									pos: position{line: 228, col: 11, offset: 6475},
									run: (*parser).callonSearchExprRelative7,
									expr: &seqExpr{
										pos: position{line: 228, col: 11, offset: 6475},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 228, col: 11, offset: 6475},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 228, col: 14, offset: 6478},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 228, col: 17, offset: 6481},
													name: "Comparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 228, col: 28, offset: 6492},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 228, col: 31, offset: 6495},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 228, col: 36, offset: 6500},
													name: "SearchExprAdd",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprAdd",
			pos:  position{line: 232, col: 1, offset: 6617},
			expr: &actionExpr{
				pos: position{line: 233, col: 5, offset: 6635},
				run: (*parser).callonSearchExprAdd1,
				expr: &seqExpr{
					pos: position{line: 233, col: 5, offset: 6635},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 233, col: 5, offset: 6635},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 11, offset: 6641},
								name: "SearchExprMul",
							},
						},
						&labeledExpr{
							pos:   position{line: 234, col: 5, offset: 6659},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 234, col: 10, offset: 6664},
								expr: &actionExpr{
									pos: position{line: 234, col: 11, offset: 6665},
									run: (*parser).callonSearchExprAdd7,
									expr: &seqExpr{
										pos: position{line: 234, col: 11, offset: 6665},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 234, col: 11, offset: 6665},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 234, col: 14, offset: 6668},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 234, col: 17, offset: 6671},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 234, col: 34, offset: 6688},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 234, col: 37, offset: 6691},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 234, col: 42, offset: 6696},
													name: "SearchExprMul",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprMul",
			pos:  position{line: 238, col: 1, offset: 6813},
			expr: &actionExpr{
				pos: position{line: 239, col: 5, offset: 6831},
				run: (*parser).callonSearchExprMul1,
				expr: &seqExpr{
					pos: position{line: 239, col: 5, offset: 6831},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 239, col: 5, offset: 6831},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 11, offset: 6837},
								name: "SearchExprCast",
							},
						},
						&labeledExpr{
							pos:   position{line: 240, col: 5, offset: 6856},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 240, col: 10, offset: 6861},
								expr: &actionExpr{
									pos: position{line: 240, col: 11, offset: 6862},
									run: (*parser).callonSearchExprMul7,
									expr: &seqExpr{
										pos: position{line: 240, col: 11, offset: 6862},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 240, col: 11, offset: 6862},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 240, col: 14, offset: 6865},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 240, col: 17, offset: 6868},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 240, col: 40, offset: 6891},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 240, col: 43, offset: 6894},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 240, col: 48, offset: 6899},
													name: "SearchExprCast",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchExprCast",
			pos:  position{line: 244, col: 1, offset: 7017},
			expr: &choiceExpr{
				pos: position{line: 245, col: 5, offset: 7036},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 245, col: 5, offset: 7036},
						run: (*parser).callonSearchExprCast2,
						expr: &seqExpr{
							pos: position{line: 245, col: 5, offset: 7036},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 245, col: 5, offset: 7036},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 245, col: 7, offset: 7038},
										name: "SearchExprFunc",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 245, col: 22, offset: 7053},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 245, col: 25, offset: 7056},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 245, col: 29, offset: 7060},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 245, col: 32, offset: 7063},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 245, col: 36, offset: 7067},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 248, col: 5, offset: 7171},
						name: "SearchExprFunc",
					},
				},
			},
		},
		{
			name: "SearchExprFunc",
			pos:  position{line: 250, col: 1, offset: 7187},
			expr: &choiceExpr{
				pos: position{line: 251, col: 5, offset: 7206},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 7206},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 252, col: 5, offset: 7220},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 253, col: 5, offset: 7236},
						run: (*parser).callonSearchExprFunc4,
						expr: &seqExpr{
							pos: position{line: 253, col: 5, offset: 7236},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 253, col: 5, offset: 7236},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 253, col: 11, offset: 7242},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 253, col: 20, offset: 7251},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 253, col: 25, offset: 7256},
										expr: &ruleRefExpr{
											pos:  position{line: 253, col: 26, offset: 7257},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 7329},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 257, col: 5, offset: 7343},
						name: "Literal",
					},
				},
			},
		},
		{
			name: "Aggregation",
			pos:  position{line: 261, col: 1, offset: 7378},
			expr: &choiceExpr{
				pos: position{line: 262, col: 5, offset: 7394},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 262, col: 5, offset: 7394},
						run: (*parser).callonAggregation2,
						expr: &seqExpr{
							pos: position{line: 262, col: 5, offset: 7394},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 262, col: 5, offset: 7394},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 262, col: 15, offset: 7404},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 21, offset: 7410},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 262, col: 30, offset: 7419},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 35, offset: 7424},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 262, col: 47, offset: 7436},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 53, offset: 7442},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 265, col: 5, offset: 7591},
						run: (*parser).callonAggregation11,
						expr: &seqExpr{
							pos: position{line: 265, col: 5, offset: 7591},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 265, col: 5, offset: 7591},
									name: "Summarize",
								},
								&labeledExpr{
									pos:   position{line: 265, col: 15, offset: 7601},
									label: "every",
									expr: &ruleRefExpr{
										pos:  position{line: 265, col: 21, offset: 7607},
										name: "EveryDur",
									},
								},
								&labeledExpr{
									pos:   position{line: 265, col: 30, offset: 7616},
									label: "reducers",
									expr: &ruleRefExpr{
										pos:  position{line: 265, col: 39, offset: 7625},
										name: "Reducers",
									},
								},
								&labeledExpr{
									pos:   position{line: 265, col: 48, offset: 7634},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 265, col: 53, offset: 7639},
										expr: &seqExpr{
											pos: position{line: 265, col: 54, offset: 7640},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 265, col: 54, offset: 7640},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 265, col: 56, offset: 7642},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 265, col: 70, offset: 7656},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 265, col: 76, offset: 7662},
										name: "LimitArg",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Summarize",
			pos:  position{line: 273, col: 1, offset: 7903},
			expr: &choiceExpr{
				pos: position{line: 273, col: 13, offset: 7915},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 273, col: 13, offset: 7915},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 273, col: 13, offset: 7915},
								val:        "summarize",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 273, col: 25, offset: 7927},
								name: "_",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 273, col: 29, offset: 7931},
						val:        "",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 275, col: 1, offset: 7935},
			expr: &choiceExpr{
				pos: position{line: 276, col: 5, offset: 7948},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 276, col: 5, offset: 7948},
						run: (*parser).callonEveryDur2,
						expr: &seqExpr{
							pos: position{line: 276, col: 5, offset: 7948},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 276, col: 5, offset: 7948},
									val:        "every",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 276, col: 14, offset: 7957},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 276, col: 16, offset: 7959},
									label: "dur",
									expr: &ruleRefExpr{
										pos:  position{line: 276, col: 20, offset: 7963},
										name: "Duration",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 276, col: 29, offset: 7972},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 277, col: 5, offset: 7998},
						run: (*parser).callonEveryDur9,
						expr: &litMatcher{
							pos:        position{line: 277, col: 5, offset: 7998},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 279, col: 1, offset: 8023},
			expr: &actionExpr{
				pos: position{line: 280, col: 5, offset: 8039},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 280, col: 5, offset: 8039},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 280, col: 5, offset: 8039},
							name: "ByToken",
						},
						&ruleRefExpr{
							pos:  position{line: 280, col: 13, offset: 8047},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 280, col: 15, offset: 8049},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 280, col: 23, offset: 8057},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 282, col: 1, offset: 8098},
			expr: &choiceExpr{
				pos: position{line: 283, col: 5, offset: 8111},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 283, col: 5, offset: 8111},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 283, col: 5, offset: 8111},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 283, col: 5, offset: 8111},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 283, col: 7, offset: 8113},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 283, col: 14, offset: 8120},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 283, col: 16, offset: 8122},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 283, col: 25, offset: 8131},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 283, col: 27, offset: 8133},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 283, col: 33, offset: 8139},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 284, col: 5, offset: 8170},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 284, col: 5, offset: 8170},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 289, col: 1, offset: 8430},
			expr: &choiceExpr{
				pos: position{line: 290, col: 5, offset: 8449},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 290, col: 5, offset: 8449},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 291, col: 5, offset: 8464},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 291, col: 5, offset: 8464},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 10, offset: 8469},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 293, col: 1, offset: 8559},
			expr: &actionExpr{
				pos: position{line: 294, col: 5, offset: 8579},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 294, col: 5, offset: 8579},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 294, col: 5, offset: 8579},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 11, offset: 8585},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 294, col: 26, offset: 8600},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 294, col: 31, offset: 8605},
								expr: &actionExpr{
									pos: position{line: 294, col: 32, offset: 8606},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 294, col: 32, offset: 8606},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 294, col: 32, offset: 8606},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 294, col: 35, offset: 8609},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 294, col: 39, offset: 8613},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 294, col: 42, offset: 8616},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 294, col: 47, offset: 8621},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerAssignment",
			pos:  position{line: 298, col: 1, offset: 8743},
			expr: &choiceExpr{
				pos: position{line: 299, col: 5, offset: 8765},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 299, col: 5, offset: 8765},
						run: (*parser).callonReducerAssignment2,
						expr: &seqExpr{
							pos: position{line: 299, col: 5, offset: 8765},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 299, col: 5, offset: 8765},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 299, col: 10, offset: 8770},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 299, col: 15, offset: 8775},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 299, col: 18, offset: 8778},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 299, col: 22, offset: 8782},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 299, col: 25, offset: 8785},
									label: "reducer",
									expr: &ruleRefExpr{
										pos:  position{line: 299, col: 33, offset: 8793},
										name: "Reducer",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 302, col: 5, offset: 8903},
						run: (*parser).callonReducerAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 302, col: 5, offset: 8903},
							label: "reducer",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 13, offset: 8911},
								name: "Reducer",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducer",
			pos:  position{line: 306, col: 1, offset: 9017},
			expr: &actionExpr{
				pos: position{line: 307, col: 5, offset: 9029},
				run: (*parser).callonReducer1,
				expr: &seqExpr{
					pos: position{line: 307, col: 5, offset: 9029},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 307, col: 5, offset: 9029},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 6, offset: 9030},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 16, offset: 9040},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 19, offset: 9043},
								name: "ReducerName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 31, offset: 9055},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 307, col: 34, offset: 9058},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 38, offset: 9062},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 307, col: 41, offset: 9065},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 307, col: 46, offset: 9070},
								expr: &ruleRefExpr{
									pos:  position{line: 307, col: 46, offset: 9070},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 53, offset: 9077},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 307, col: 56, offset: 9080},
							val:        ")",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 307, col: 60, offset: 9084},
							expr: &seqExpr{
								pos: position{line: 307, col: 62, offset: 9086},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 307, col: 62, offset: 9086},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 307, col: 65, offset: 9089},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 70, offset: 9094},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 307, col: 76, offset: 9100},
								expr: &ruleRefExpr{
									pos:  position{line: 307, col: 76, offset: 9100},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerName",
			pos:  position{line: 315, col: 1, offset: 9296},
			expr: &choiceExpr{
				pos: position{line: 316, col: 5, offset: 9312},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 316, col: 5, offset: 9312},
						name: "IdentifierName",
					},
					&ruleRefExpr{
						pos:  position{line: 317, col: 5, offset: 9331},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 318, col: 5, offset: 9344},
						name: "OrToken",
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 320, col: 1, offset: 9353},
			expr: &actionExpr{
				pos: position{line: 320, col: 15, offset: 9367},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 320, col: 15, offset: 9367},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 320, col: 15, offset: 9367},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 320, col: 17, offset: 9369},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 320, col: 25, offset: 9377},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 320, col: 27, offset: 9379},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 320, col: 32, offset: 9384},
								name: "SearchBoolean",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducers",
			pos:  position{line: 322, col: 1, offset: 9420},
			expr: &actionExpr{
				pos: position{line: 323, col: 5, offset: 9433},
				run: (*parser).callonReducers1,
				expr: &seqExpr{
					pos: position{line: 323, col: 5, offset: 9433},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 323, col: 5, offset: 9433},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 11, offset: 9439},
								name: "ReducerAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 323, col: 29, offset: 9457},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 323, col: 34, offset: 9462},
								expr: &seqExpr{
									pos: position{line: 323, col: 35, offset: 9463},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 323, col: 35, offset: 9463},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 323, col: 38, offset: 9466},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 323, col: 42, offset: 9470},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 323, col: 45, offset: 9473},
											name: "ReducerAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Operator",
			pos:  position{line: 331, col: 1, offset: 9678},
			expr: &choiceExpr{
				pos: position{line: 332, col: 5, offset: 9691},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 332, col: 5, offset: 9691},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 5, offset: 9704},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 334, col: 5, offset: 9716},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 335, col: 5, offset: 9728},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 336, col: 5, offset: 9741},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 337, col: 5, offset: 9754},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 338, col: 5, offset: 9767},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 339, col: 5, offset: 9780},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 5, offset: 9795},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 341, col: 5, offset: 9808},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 342, col: 5, offset: 9820},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 343, col: 5, offset: 9835},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 344, col: 5, offset: 9848},
						name: "JoinProc",
					},
					&ruleRefExpr{
						pos:  position{line: 345, col: 5, offset: 9861},
						name: "TasteProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 347, col: 1, offset: 9872},
			expr: &actionExpr{
				pos: position{line: 348, col: 5, offset: 9885},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 348, col: 5, offset: 9885},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 348, col: 5, offset: 9885},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 348, col: 13, offset: 9893},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 348, col: 18, offset: 9898},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 348, col: 27, offset: 9907},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 348, col: 32, offset: 9912},
								expr: &actionExpr{
									pos: position{line: 348, col: 33, offset: 9913},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 348, col: 33, offset: 9913},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 348, col: 33, offset: 9913},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 348, col: 35, offset: 9915},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 348, col: 37, offset: 9917},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 362, col: 1, offset: 10336},
			expr: &actionExpr{
				pos: position{line: 362, col: 12, offset: 10347},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 362, col: 12, offset: 10347},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 362, col: 17, offset: 10352},
						expr: &actionExpr{
							pos: position{line: 362, col: 18, offset: 10353},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 362, col: 18, offset: 10353},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 362, col: 18, offset: 10353},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 362, col: 20, offset: 10355},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 362, col: 22, offset: 10357},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 364, col: 1, offset: 10413},
			expr: &choiceExpr{
				pos: position{line: 365, col: 5, offset: 10425},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 365, col: 5, offset: 10425},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 365, col: 5, offset: 10425},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 366, col: 5, offset: 10500},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 366, col: 5, offset: 10500},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 366, col: 5, offset: 10500},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 366, col: 14, offset: 10509},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 366, col: 16, offset: 10511},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 366, col: 23, offset: 10518},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 366, col: 24, offset: 10519},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 366, col: 24, offset: 10519},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 366, col: 34, offset: 10529},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 368, col: 1, offset: 10643},
			expr: &actionExpr{
				pos: position{line: 369, col: 5, offset: 10655},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 369, col: 5, offset: 10655},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 369, col: 5, offset: 10655},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 369, col: 12, offset: 10662},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 369, col: 18, offset: 10668},
								expr: &actionExpr{
									pos: position{line: 369, col: 19, offset: 10669},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 369, col: 19, offset: 10669},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 369, col: 19, offset: 10669},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 369, col: 21, offset: 10671},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 369, col: 23, offset: 10673},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 369, col: 47, offset: 10697},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 369, col: 53, offset: 10703},
								expr: &seqExpr{
									pos: position{line: 369, col: 54, offset: 10704},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 369, col: 54, offset: 10704},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 369, col: 56, offset: 10706},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 369, col: 67, offset: 10717},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 369, col: 74, offset: 10724},
								expr: &actionExpr{
									pos: position{line: 369, col: 75, offset: 10725},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 369, col: 75, offset: 10725},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 369, col: 75, offset: 10725},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 369, col: 77, offset: 10727},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 369, col: 79, offset: 10729},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 383, col: 1, offset: 11080},
			expr: &actionExpr{
				pos: position{line: 384, col: 5, offset: 11092},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 384, col: 5, offset: 11092},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 384, col: 5, offset: 11092},
							val:        "cut",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 384, col: 12, offset: 11099},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 384, col: 14, offset: 11101},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 22, offset: 11109},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 388, col: 1, offset: 11211},
			expr: &actionExpr{
				pos: position{line: 389, col: 5, offset: 11224},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 389, col: 5, offset: 11224},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 389, col: 5, offset: 11224},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 389, col: 13, offset: 11232},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 389, col: 15, offset: 11234},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 23, offset: 11242},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 393, col: 1, offset: 11345},
			expr: &actionExpr{
				pos: position{line: 394, col: 5, offset: 11358},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 394, col: 5, offset: 11358},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 394, col: 5, offset: 11358},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 394, col: 13, offset: 11366},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 394, col: 15, offset: 11368},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 23, offset: 11376},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 398, col: 1, offset: 11474},
			expr: &choiceExpr{
				pos: position{line: 399, col: 5, offset: 11487},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 399, col: 5, offset: 11487},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 399, col: 5, offset: 11487},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 399, col: 5, offset: 11487},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 399, col: 13, offset: 11495},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 399, col: 15, offset: 11497},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 399, col: 21, offset: 11503},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 400, col: 5, offset: 11585},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 400, col: 5, offset: 11585},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 402, col: 1, offset: 11663},
			expr: &choiceExpr{
				pos: position{line: 403, col: 5, offset: 11676},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 403, col: 5, offset: 11676},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 403, col: 5, offset: 11676},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 403, col: 5, offset: 11676},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 403, col: 13, offset: 11684},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 403, col: 15, offset: 11686},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 403, col: 21, offset: 11692},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 404, col: 5, offset: 11774},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 404, col: 5, offset: 11774},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 406, col: 1, offset: 11852},
			expr: &actionExpr{
				pos: position{line: 407, col: 5, offset: 11867},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 407, col: 5, offset: 11867},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 407, col: 5, offset: 11867},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 407, col: 15, offset: 11877},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 407, col: 17, offset: 11879},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 407, col: 20, offset: 11882},
								name: "Filter",
							},
						},
					},
				},
			},
		},
		{
			name: "Filter",
			pos:  position{line: 411, col: 1, offset: 11919},
			expr: &actionExpr{
				pos: position{line: 412, col: 5, offset: 11930},
				run: (*parser).callonFilter1,
				expr: &labeledExpr{
					pos:   position{line: 412, col: 5, offset: 11930},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 412, col: 10, offset: 11935},
						name: "SearchBoolean",
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 416, col: 1, offset: 12035},
			expr: &choiceExpr{
				pos: position{line: 417, col: 5, offset: 12048},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 417, col: 5, offset: 12048},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 417, col: 5, offset: 12048},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 417, col: 5, offset: 12048},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 417, col: 13, offset: 12056},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 417, col: 15, offset: 12058},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 420, col: 5, offset: 12149},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 420, col: 5, offset: 12149},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 424, col: 1, offset: 12241},
			expr: &actionExpr{
				pos: position{line: 425, col: 5, offset: 12253},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 425, col: 5, offset: 12253},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 425, col: 5, offset: 12253},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 425, col: 12, offset: 12260},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 425, col: 14, offset: 12262},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 22, offset: 12270},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 429, col: 1, offset: 12373},
			expr: &actionExpr{
				pos: position{line: 430, col: 5, offset: 12388},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 430, col: 5, offset: 12388},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 430, col: 5, offset: 12388},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 430, col: 15, offset: 12398},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 430, col: 17, offset: 12400},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 23, offset: 12406},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 430, col: 34, offset: 12417},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 430, col: 39, offset: 12422},
								expr: &actionExpr{
									pos: position{line: 430, col: 40, offset: 12423},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 430, col: 40, offset: 12423},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 430, col: 40, offset: 12423},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 430, col: 43, offset: 12426},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 430, col: 47, offset: 12430},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 430, col: 50, offset: 12433},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 430, col: 53, offset: 12436},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 438, col: 1, offset: 12847},
			expr: &actionExpr{
				pos: position{line: 439, col: 5, offset: 12860},
				run: (*parser).callonFuseProc1,
				expr: &seqExpr{
					pos: position{line: 439, col: 5, offset: 12860},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 439, col: 5, offset: 12860},
							val:        "fuse",
							ignoreCase: true,
						},
						&notExpr{
							pos: position{line: 439, col: 13, offset: 12868},
							expr: &seqExpr{
								pos: position{line: 439, col: 15, offset: 12870},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 439, col: 15, offset: 12870},
										name: "__",
									},
									&litMatcher{
										pos:        position{line: 439, col: 18, offset: 12873},
										val:        "(",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 443, col: 1, offset: 12946},
			expr: &choiceExpr{
				pos: position{line: 444, col: 5, offset: 12959},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 444, col: 5, offset: 12959},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 444, col: 5, offset: 12959},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 444, col: 5, offset: 12959},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 444, col: 10, offset: 12964},
										name: "JoinKind",
									},
								},
								&litMatcher{
									pos:        position{line: 444, col: 19, offset: 12973},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 444, col: 27, offset: 12981},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 444, col: 29, offset: 12983},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 444, col: 37, offset: 12991},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 444, col: 45, offset: 12999},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 444, col: 48, offset: 13002},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 444, col: 52, offset: 13006},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 444, col: 55, offset: 13009},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 444, col: 64, offset: 13018},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 444, col: 72, offset: 13026},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 444, col: 80, offset: 13034},
										expr: &seqExpr{
											pos: position{line: 444, col: 81, offset: 13035},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 444, col: 81, offset: 13035},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 444, col: 83, offset: 13037},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 451, col: 5, offset: 13309},
						run: (*parser).callonJoinProc20,
						expr: &seqExpr{
							pos: position{line: 451, col: 5, offset: 13309},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 451, col: 5, offset: 13309},
									label: "kind",
									expr: &ruleRefExpr{
										pos:  position{line: 451, col: 10, offset: 13314},
										name: "JoinKind",
									},
								},
								&litMatcher{
									pos:        position{line: 451, col: 20, offset: 13324},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 451, col: 28, offset: 13332},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 451, col: 30, offset: 13334},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 451, col: 34, offset: 13338},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 451, col: 42, offset: 13346},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 451, col: 50, offset: 13354},
										expr: &seqExpr{
											pos: position{line: 451, col: 51, offset: 13355},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 451, col: 51, offset: 13355},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 451, col: 53, offset: 13357},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinKind",
			pos:  position{line: 459, col: 1, offset: 13617},
			expr: &choiceExpr{
				pos: position{line: 460, col: 5, offset: 13630},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 460, col: 5, offset: 13630},
						run: (*parser).callonJoinKind2,
						expr: &seqExpr{
							pos: position{line: 460, col: 5, offset: 13630},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 460, col: 5, offset: 13630},
									val:        "inner",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 460, col: 14, offset: 13639},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 461, col: 5, offset: 13669},
						run: (*parser).callonJoinKind6,
						expr: &seqExpr{
							pos: position{line: 461, col: 5, offset: 13669},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 461, col: 5, offset: 13669},
									val:        "left",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 461, col: 14, offset: 13678},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 462, col: 5, offset: 13707},
						run: (*parser).callonJoinKind10,
						expr: &seqExpr{
							pos: position{line: 462, col: 5, offset: 13707},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 462, col: 5, offset: 13707},
									val:        "right",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 462, col: 14, offset: 13716},
									name: "_",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 463, col: 5, offset: 13746},
						run: (*parser).callonJoinKind14,
						expr: &litMatcher{
							pos:        position{line: 463, col: 5, offset: 13746},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 465, col: 1, offset: 13782},
			expr: &choiceExpr{
				pos: position{line: 466, col: 5, offset: 13794},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 466, col: 5, offset: 13794},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 467, col: 5, offset: 13803},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 467, col: 5, offset: 13803},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 467, col: 5, offset: 13803},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 467, col: 9, offset: 13807},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 467, col: 14, offset: 13812},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 467, col: 19, offset: 13817},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TasteProc",
			pos:  position{line: 469, col: 1, offset: 13843},
			expr: &actionExpr{
				pos: position{line: 470, col: 5, offset: 13857},
				run: (*parser).callonTasteProc1,
				expr: &seqExpr{
					pos: position{line: 470, col: 5, offset: 13857},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 470, col: 5, offset: 13857},
							val:        "taste",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 470, col: 14, offset: 13866},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 470, col: 16, offset: 13868},
								name: "TasteExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "TasteExpr",
			pos:  position{line: 507, col: 1, offset: 15198},
			expr: &choiceExpr{
				pos: position{line: 508, col: 5, offset: 15212},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 508, col: 5, offset: 15212},
						run: (*parser).callonTasteExpr2,
						expr: &seqExpr{
							pos: position{line: 508, col: 5, offset: 15212},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 508, col: 5, offset: 15212},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 508, col: 7, offset: 15214},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 508, col: 12, offset: 15219},
										name: "Lval",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 509, col: 5, offset: 15248},
						run: (*parser).callonTasteExpr7,
						expr: &litMatcher{
							pos:        position{line: 509, col: 5, offset: 15248},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 511, col: 1, offset: 15310},
			expr: &ruleRefExpr{
				pos:  position{line: 511, col: 8, offset: 15317},
				name: "DerefExpr",
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 513, col: 1, offset: 15328},
			expr: &ruleRefExpr{
				pos:  position{line: 513, col: 13, offset: 15340},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 515, col: 1, offset: 15346},
			expr: &actionExpr{
				pos: position{line: 516, col: 5, offset: 15361},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 516, col: 5, offset: 15361},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 516, col: 5, offset: 15361},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 516, col: 11, offset: 15367},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 516, col: 21, offset: 15377},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 516, col: 26, offset: 15382},
								expr: &seqExpr{
									pos: position{line: 516, col: 27, offset: 15383},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 516, col: 27, offset: 15383},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 516, col: 30, offset: 15386},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 516, col: 34, offset: 15390},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 516, col: 37, offset: 15393},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 526, col: 1, offset: 15592},
			expr: &actionExpr{
				pos: position{line: 527, col: 5, offset: 15602},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 527, col: 5, offset: 15602},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 527, col: 5, offset: 15602},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 11, offset: 15608},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 527, col: 16, offset: 15613},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 527, col: 21, offset: 15618},
								expr: &seqExpr{
									pos: position{line: 527, col: 22, offset: 15619},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 527, col: 22, offset: 15619},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 527, col: 25, offset: 15622},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 527, col: 29, offset: 15626},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 527, col: 32, offset: 15629},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 537, col: 1, offset: 15823},
			expr: &actionExpr{
				pos: position{line: 538, col: 5, offset: 15838},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 538, col: 5, offset: 15838},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 538, col: 5, offset: 15838},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 9, offset: 15842},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 538, col: 14, offset: 15847},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 538, col: 17, offset: 15850},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 538, col: 21, offset: 15854},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 538, col: 24, offset: 15857},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 538, col: 28, offset: 15861},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 540, col: 1, offset: 15950},
			expr: &ruleRefExpr{
				pos:  position{line: 540, col: 8, offset: 15957},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 542, col: 1, offset: 15974},
			expr: &choiceExpr{
				pos: position{line: 543, col: 5, offset: 15994},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 543, col: 5, offset: 15994},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 543, col: 5, offset: 15994},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 543, col: 5, offset: 15994},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 543, col: 15, offset: 16004},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 543, col: 29, offset: 16018},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 543, col: 32, offset: 16021},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 543, col: 36, offset: 16025},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 543, col: 39, offset: 16028},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 543, col: 50, offset: 16039},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 543, col: 55, offset: 16044},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 543, col: 58, offset: 16047},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 543, col: 62, offset: 16051},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 543, col: 65, offset: 16054},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 543, col: 76, offset: 16065},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 546, col: 5, offset: 16212},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 548, col: 1, offset: 16227},
			expr: &actionExpr{
				pos: position{line: 549, col: 5, offset: 16245},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 549, col: 5, offset: 16245},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 549, col: 5, offset: 16245},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 11, offset: 16251},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 550, col: 5, offset: 16270},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 550, col: 10, offset: 16275},
								expr: &actionExpr{
									pos: position{line: 550, col: 11, offset: 16276},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 550, col: 11, offset: 16276},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 550, col: 11, offset: 16276},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 550, col: 14, offset: 16279},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 550, col: 17, offset: 16282},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 550, col: 25, offset: 16290},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 550, col: 28, offset: 16293},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 550, col: 33, offset: 16298},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 554, col: 1, offset: 16416},
			expr: &actionExpr{
				pos: position{line: 555, col: 5, offset: 16435},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 555, col: 5, offset: 16435},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 555, col: 5, offset: 16435},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 11, offset: 16441},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 5, offset: 16465},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 556, col: 10, offset: 16470},
								expr: &actionExpr{
									pos: position{line: 556, col: 11, offset: 16471},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 556, col: 11, offset: 16471},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 556, col: 11, offset: 16471},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 556, col: 14, offset: 16474},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 556, col: 17, offset: 16477},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 556, col: 26, offset: 16486},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 556, col: 29, offset: 16489},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 556, col: 34, offset: 16494},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 560, col: 1, offset: 16617},
			expr: &actionExpr{
				pos: position{line: 561, col: 5, offset: 16641},
				run: (*parser).callonEqualityCompareExpr1,
				expr: &seqExpr{
					pos: position{line: 561, col: 5, offset: 16641},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 561, col: 5, offset: 16641},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 11, offset: 16647},
								name: "RelativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 562, col: 5, offset: 16664},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 562, col: 10, offset: 16669},
								expr: &actionExpr{
									pos: position{line: 562, col: 11, offset: 16670},
									run: (*parser).callonEqualityCompareExpr7,
									expr: &seqExpr{
										pos: position{line: 562, col: 11, offset: 16670},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 562, col: 11, offset: 16670},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 562, col: 14, offset: 16673},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 562, col: 19, offset: 16678},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 562, col: 38, offset: 16697},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 562, col: 41, offset: 16700},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 562, col: 46, offset: 16705},
													name: "RelativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 566, col: 1, offset: 16823},
			expr: &actionExpr{
				pos: position{line: 567, col: 5, offset: 16844},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 567, col: 6, offset: 16845},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 567, col: 6, offset: 16845},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 567, col: 12, offset: 16851},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 569, col: 1, offset: 16889},
			expr: &choiceExpr{
				pos: position{line: 570, col: 5, offset: 16912},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 570, col: 5, offset: 16912},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 571, col: 5, offset: 16933},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 571, col: 5, offset: 16933},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 573, col: 1, offset: 16970},
			expr: &actionExpr{
				pos: position{line: 574, col: 5, offset: 16987},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 574, col: 5, offset: 16987},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 574, col: 5, offset: 16987},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 574, col: 11, offset: 16993},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 575, col: 5, offset: 17010},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 575, col: 10, offset: 17015},
								expr: &actionExpr{
									pos: position{line: 575, col: 11, offset: 17016},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 575, col: 11, offset: 17016},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 575, col: 11, offset: 17016},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 575, col: 14, offset: 17019},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 575, col: 17, offset: 17022},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 575, col: 34, offset: 17039},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 575, col: 37, offset: 17042},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 575, col: 42, offset: 17047},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 579, col: 1, offset: 17163},
			expr: &actionExpr{
				pos: position{line: 579, col: 20, offset: 17182},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 579, col: 21, offset: 17183},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 579, col: 21, offset: 17183},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 579, col: 28, offset: 17190},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 579, col: 34, offset: 17196},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 579, col: 41, offset: 17203},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 581, col: 1, offset: 17240},
			expr: &actionExpr{
				pos: position{line: 582, col: 5, offset: 17257},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 582, col: 5, offset: 17257},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 582, col: 5, offset: 17257},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 582, col: 11, offset: 17263},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 583, col: 5, offset: 17286},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 583, col: 10, offset: 17291},
								expr: &actionExpr{
									pos: position{line: 583, col: 11, offset: 17292},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 583, col: 11, offset: 17292},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 583, col: 11, offset: 17292},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 583, col: 14, offset: 17295},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 583, col: 17, offset: 17298},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 583, col: 34, offset: 17315},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 583, col: 37, offset: 17318},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 583, col: 42, offset: 17323},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 587, col: 1, offset: 17445},
			expr: &actionExpr{
				pos: position{line: 587, col: 20, offset: 17464},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 587, col: 21, offset: 17465},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 587, col: 21, offset: 17465},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 587, col: 27, offset: 17471},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 589, col: 1, offset: 17508},
			expr: &actionExpr{
				pos: position{line: 590, col: 5, offset: 17531},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 590, col: 5, offset: 17531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 590, col: 5, offset: 17531},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 590, col: 11, offset: 17537},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 591, col: 5, offset: 17549},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 591, col: 10, offset: 17554},
								expr: &actionExpr{
									pos: position{line: 591, col: 11, offset: 17555},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 591, col: 11, offset: 17555},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 591, col: 11, offset: 17555},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 591, col: 14, offset: 17558},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 591, col: 17, offset: 17561},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 591, col: 40, offset: 17584},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 591, col: 43, offset: 17587},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 591, col: 48, offset: 17592},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 595, col: 1, offset: 17703},
			expr: &actionExpr{
				pos: position{line: 595, col: 26, offset: 17728},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 595, col: 27, offset: 17729},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 595, col: 27, offset: 17729},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 595, col: 33, offset: 17735},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 597, col: 1, offset: 17772},
			expr: &choiceExpr{
				pos: position{line: 598, col: 5, offset: 17784},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 598, col: 5, offset: 17784},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 598, col: 5, offset: 17784},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 598, col: 5, offset: 17784},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 598, col: 9, offset: 17788},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 598, col: 12, offset: 17791},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 598, col: 14, offset: 17793},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 601, col: 5, offset: 17906},
						name: "CastExpr",
					},
				},
			},
		},
		{
			name: "CastExpr",
			pos:  position{line: 603, col: 1, offset: 17916},
			expr: &choiceExpr{
				pos: position{line: 604, col: 5, offset: 17929},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 604, col: 5, offset: 17929},
						run: (*parser).callonCastExpr2,
						expr: &seqExpr{
							pos: position{line: 604, col: 5, offset: 17929},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 604, col: 5, offset: 17929},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 604, col: 7, offset: 17931},
										name: "FuncExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 604, col: 16, offset: 17940},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 604, col: 19, offset: 17943},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 604, col: 23, offset: 17947},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 604, col: 26, offset: 17950},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 604, col: 30, offset: 17954},
										name: "CastType",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 607, col: 5, offset: 18058},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 609, col: 1, offset: 18068},
			expr: &choiceExpr{
				pos: position{line: 610, col: 5, offset: 18081},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 610, col: 5, offset: 18081},
						name: "SelectExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 611, col: 5, offset: 18096},
						name: "MatchExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 612, col: 5, offset: 18110},
						name: "TypeLiteral",
					},
					&actionExpr{
						pos: position{line: 613, col: 5, offset: 18126},
						run: (*parser).callonFuncExpr5,
						expr: &seqExpr{
							pos: position{line: 613, col: 5, offset: 18126},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 613, col: 5, offset: 18126},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 613, col: 11, offset: 18132},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 613, col: 20, offset: 18141},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 613, col: 25, offset: 18146},
										expr: &ruleRefExpr{
											pos:  position{line: 613, col: 26, offset: 18147},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 616, col: 5, offset: 18218},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 617, col: 5, offset: 18232},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "FuncGuard",
			pos:  position{line: 619, col: 1, offset: 18241},
			expr: &seqExpr{
				pos: position{line: 619, col: 13, offset: 18253},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 619, col: 13, offset: 18253},
						name: "NotFuncs",
					},
					&ruleRefExpr{
						pos:  position{line: 619, col: 22, offset: 18262},
						name: "__",
					},
					&litMatcher{
						pos:        position{line: 619, col: 25, offset: 18265},
						val:        "(",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "NotFuncs",
			pos:  position{line: 621, col: 1, offset: 18270},
			expr: &choiceExpr{
				pos: position{line: 622, col: 5, offset: 18283},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 622, col: 5, offset: 18283},
						val:        "not",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 623, col: 5, offset: 18293},
						val:        "match",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 624, col: 5, offset: 18305},
						val:        "select",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 625, col: 5, offset: 18318},
						val:        "type",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MatchExpr",
			pos:  position{line: 627, col: 1, offset: 18326},
			expr: &actionExpr{
				pos: position{line: 628, col: 5, offset: 18340},
				run: (*parser).callonMatchExpr1,
				expr: &seqExpr{
					pos: position{line: 628, col: 5, offset: 18340},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 628, col: 5, offset: 18340},
							val:        "match",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 628, col: 13, offset: 18348},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 628, col: 16, offset: 18351},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 628, col: 20, offset: 18355},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 628, col: 25, offset: 18360},
								name: "SearchBoolean",
							},
						},
						&litMatcher{
							pos:        position{line: 628, col: 39, offset: 18374},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SelectExpr",
			pos:  position{line: 630, col: 1, offset: 18400},
			expr: &actionExpr{
				pos: position{line: 631, col: 5, offset: 18415},
				run: (*parser).callonSelectExpr1,
				expr: &seqExpr{
					pos: position{line: 631, col: 5, offset: 18415},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 631, col: 5, offset: 18415},
							val:        "select",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 631, col: 14, offset: 18424},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 631, col: 17, offset: 18427},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 631, col: 21, offset: 18431},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 631, col: 24, offset: 18434},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 29, offset: 18439},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 631, col: 42, offset: 18452},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 631, col: 45, offset: 18455},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 631, col: 49, offset: 18459},
							label: "methods",
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 57, offset: 18467},
								name: "Methods",
							},
						},
					},
				},
			},
		},
		{
			name: "Methods",
			pos:  position{line: 639, col: 1, offset: 18863},
			expr: &choiceExpr{
				pos: position{line: 640, col: 5, offset: 18875},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 640, col: 5, offset: 18875},
						run: (*parser).callonMethods2,
						expr: &labeledExpr{
							pos:   position{line: 640, col: 5, offset: 18875},
							label: "methods",
							expr: &oneOrMoreExpr{
								pos: position{line: 640, col: 13, offset: 18883},
								expr: &ruleRefExpr{
									pos:  position{line: 640, col: 13, offset: 18883},
									name: "Method",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 641, col: 5, offset: 18919},
						run: (*parser).callonMethods6,
						expr: &litMatcher{
							pos:        position{line: 641, col: 5, offset: 18919},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Method",
			pos:  position{line: 643, col: 1, offset: 18943},
			expr: &actionExpr{
				pos: position{line: 644, col: 5, offset: 18954},
				run: (*parser).callonMethod1,
				expr: &seqExpr{
					pos: position{line: 644, col: 5, offset: 18954},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 644, col: 5, offset: 18954},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 644, col: 8, offset: 18957},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 644, col: 12, offset: 18961},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 644, col: 15, offset: 18964},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 17, offset: 18966},
								name: "Function",
							},
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 646, col: 1, offset: 18994},
			expr: &actionExpr{
				pos: position{line: 647, col: 5, offset: 19007},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 647, col: 5, offset: 19007},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 647, col: 5, offset: 19007},
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 6, offset: 19008},
								name: "FuncGuard",
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 16, offset: 19018},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 19, offset: 19021},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 647, col: 34, offset: 19036},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 647, col: 37, offset: 19039},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 647, col: 41, offset: 19043},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 647, col: 44, offset: 19046},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 49, offset: 19051},
								name: "ArgumentList",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 647, col: 62, offset: 19064},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 647, col: 65, offset: 19067},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ArgumentList",
			pos:  position{line: 651, col: 1, offset: 19173},
			expr: &choiceExpr{
				pos: position{line: 652, col: 5, offset: 19190},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 652, col: 5, offset: 19190},
						run: (*parser).callonArgumentList2,
						expr: &seqExpr{
							pos: position{line: 652, col: 5, offset: 19190},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 652, col: 5, offset: 19190},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 652, col: 11, offset: 19196},
										name: "Expr",
									},
								},
								&labeledExpr{
									pos:   position{line: 652, col: 16, offset: 19201},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 652, col: 21, offset: 19206},
										expr: &actionExpr{
											pos: position{line: 652, col: 22, offset: 19207},
											run: (*parser).callonArgumentList8,
											expr: &seqExpr{
												pos: position{line: 652, col: 22, offset: 19207},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 652, col: 22, offset: 19207},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 652, col: 25, offset: 19210},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 652, col: 29, offset: 19214},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 652, col: 32, offset: 19217},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 652, col: 34, offset: 19219},
															name: "Expr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 655, col: 5, offset: 19331},
						run: (*parser).callonArgumentList15,
						expr: &ruleRefExpr{
							pos:  position{line: 655, col: 5, offset: 19331},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 657, col: 1, offset: 19367},
			expr: &choiceExpr{
				pos: position{line: 658, col: 5, offset: 19381},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 658, col: 5, offset: 19381},
						run: (*parser).callonDerefExpr2,
						expr: &seqExpr{
							pos: position{line: 658, col: 5, offset: 19381},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 658, col: 5, offset: 19381},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 658, col: 11, offset: 19387},
										name: "DotId",
									},
								},
								&labeledExpr{
									pos:   position{line: 658, col: 17, offset: 19393},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 658, col: 22, offset: 19398},
										expr: &ruleRefExpr{
											pos:  position{line: 658, col: 23, offset: 19399},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 661, col: 5, offset: 19470},
						run: (*parser).callonDerefExpr9,
						expr: &seqExpr{
							pos: position{line: 661, col: 5, offset: 19470},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 661, col: 5, offset: 19470},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 661, col: 11, offset: 19476},
										name: "Identifier",
									},
								},
								&labeledExpr{
									pos:   position{line: 661, col: 22, offset: 19487},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 661, col: 27, offset: 19492},
										expr: &ruleRefExpr{
											pos:  position{line: 661, col: 28, offset: 19493},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 664, col: 5, offset: 19564},
						run: (*parser).callonDerefExpr16,
						expr: &litMatcher{
							pos:        position{line: 664, col: 5, offset: 19564},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DotId",
			pos:  position{line: 668, col: 1, offset: 19637},
			expr: &choiceExpr{
				pos: position{line: 669, col: 5, offset: 19647},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 669, col: 5, offset: 19647},
						run: (*parser).callonDotId2,
						expr: &seqExpr{
							pos: position{line: 669, col: 5, offset: 19647},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 669, col: 5, offset: 19647},
									val:        ".",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 669, col: 9, offset: 19651},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 669, col: 15, offset: 19657},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 678, col: 5, offset: 19881},
						run: (*parser).callonDotId7,
						expr: &seqExpr{
							pos: position{line: 678, col: 5, offset: 19881},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 678, col: 5, offset: 19881},
									val:        ".",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 678, col: 9, offset: 19885},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 678, col: 13, offset: 19889},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 678, col: 18, offset: 19894},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 678, col: 23, offset: 19899},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 688, col: 1, offset: 20112},
			expr: &choiceExpr{
				pos: position{line: 689, col: 5, offset: 20122},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 689, col: 5, offset: 20122},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 689, col: 5, offset: 20122},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 689, col: 5, offset: 20122},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 689, col: 9, offset: 20126},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 689, col: 14, offset: 20131},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 689, col: 27, offset: 20144},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 689, col: 30, offset: 20147},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 689, col: 34, offset: 20151},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 689, col: 37, offset: 20154},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 689, col: 40, offset: 20157},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 689, col: 53, offset: 20170},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 695, col: 5, offset: 20345},
						run: (*parser).callonDeref13,
						expr: &seqExpr{
							pos: position{line: 695, col: 5, offset: 20345},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 695, col: 5, offset: 20345},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 695, col: 9, offset: 20349},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 695, col: 12, offset: 20352},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 695, col: 16, offset: 20356},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 695, col: 19, offset: 20359},
									label: "to",
									expr: &ruleRefExpr{
										pos:  position{line: 695, col: 22, offset: 20362},
										name: "AdditiveExpr",
									},
								},
								&litMatcher{
									pos:        position{line: 695, col: 35, offset: 20375},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 701, col: 5, offset: 20550},
						run: (*parser).callonDeref22,
						expr: &seqExpr{
							pos: position{line: 701, col: 5, offset: 20550},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 701, col: 5, offset: 20550},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 701, col: 9, offset: 20554},
									label: "from",
									expr: &ruleRefExpr{
										pos:  position{line: 701, col: 14, offset: 20559},
										name: "AdditiveExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 701, col: 27, offset: 20572},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 701, col: 30, offset: 20575},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 701, col: 34, offset: 20579},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 701, col: 37, offset: 20582},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 707, col: 5, offset: 20759},
						run: (*parser).callonDeref31,
						expr: &seqExpr{
							pos: position{line: 707, col: 5, offset: 20759},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 707, col: 5, offset: 20759},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 707, col: 9, offset: 20763},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 707, col: 14, offset: 20768},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 707, col: 19, offset: 20773},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 708, col: 5, offset: 20822},
						run: (*parser).callonDeref37,
						expr: &seqExpr{
							pos: position{line: 708, col: 5, offset: 20822},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 708, col: 5, offset: 20822},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 708, col: 9, offset: 20826},
									expr: &litMatcher{
										pos:        position{line: 708, col: 11, offset: 20828},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 708, col: 16, offset: 20833},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 708, col: 19, offset: 20836},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 710, col: 1, offset: 20887},
			expr: &choiceExpr{
				pos: position{line: 711, col: 5, offset: 20899},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 711, col: 5, offset: 20899},
						name: "Literal",
					},
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 20911},
						run: (*parser).callonPrimary3,
						expr: &seqExpr{
							pos: position{line: 712, col: 5, offset: 20911},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 712, col: 5, offset: 20911},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 712, col: 9, offset: 20915},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 712, col: 12, offset: 20918},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 712, col: 17, offset: 20923},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 712, col: 22, offset: 20928},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 712, col: 25, offset: 20931},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Literal",
			pos:  position{line: 714, col: 1, offset: 20957},
			expr: &choiceExpr{
				pos: position{line: 715, col: 5, offset: 20969},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 715, col: 5, offset: 20969},
						name: "TypeLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 716, col: 5, offset: 20985},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 717, col: 5, offset: 21003},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 718, col: 5, offset: 21021},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 719, col: 5, offset: 21039},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 720, col: 5, offset: 21058},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 721, col: 5, offset: 21075},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 722, col: 5, offset: 21094},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 723, col: 5, offset: 21113},
						name: "NullLiteral",
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 725, col: 1, offset: 21126},
			expr: &actionExpr{
				pos: position{line: 726, col: 5, offset: 21144},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 726, col: 5, offset: 21144},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 726, col: 7, offset: 21146},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "RegexpLiteral",
			pos:  position{line: 730, col: 1, offset: 21256},
			expr: &actionExpr{
				pos: position{line: 731, col: 5, offset: 21274},
				run: (*parser).callonRegexpLiteral1,
				expr: &seqExpr{
					pos: position{line: 731, col: 5, offset: 21274},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 731, col: 5, offset: 21274},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 7, offset: 21276},
								name: "Regexp",
							},
						},
						&notExpr{
							pos: position{line: 731, col: 14, offset: 21283},
							expr: &ruleRefExpr{
								pos:  position{line: 731, col: 15, offset: 21284},
								name: "KeyWordStart",
							},
						},
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 735, col: 1, offset: 21394},
			expr: &choiceExpr{
				pos: position{line: 736, col: 5, offset: 21412},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 736, col: 5, offset: 21412},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 736, col: 5, offset: 21412},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 736, col: 5, offset: 21412},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 736, col: 7, offset: 21414},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 736, col: 14, offset: 21421},
									expr: &ruleRefExpr{
										pos:  position{line: 736, col: 15, offset: 21422},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 739, col: 5, offset: 21534},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 739, col: 5, offset: 21534},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 739, col: 7, offset: 21536},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 743, col: 1, offset: 21637},
			expr: &choiceExpr{
				pos: position{line: 744, col: 5, offset: 21656},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 744, col: 5, offset: 21656},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 744, col: 5, offset: 21656},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 744, col: 5, offset: 21656},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 744, col: 7, offset: 21658},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 744, col: 11, offset: 21662},
									expr: &ruleRefExpr{
										pos:  position{line: 744, col: 12, offset: 21663},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 747, col: 5, offset: 21774},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 747, col: 5, offset: 21774},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 747, col: 7, offset: 21776},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 751, col: 1, offset: 21872},
			expr: &actionExpr{
				pos: position{line: 752, col: 5, offset: 21889},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 752, col: 5, offset: 21889},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 752, col: 7, offset: 21891},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 756, col: 1, offset: 22001},
			expr: &actionExpr{
				pos: position{line: 757, col: 5, offset: 22020},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 757, col: 5, offset: 22020},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 757, col: 7, offset: 22022},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 761, col: 1, offset: 22128},
			expr: &choiceExpr{
				pos: position{line: 762, col: 5, offset: 22147},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 762, col: 5, offset: 22147},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 762, col: 5, offset: 22147},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 763, col: 5, offset: 22257},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 763, col: 5, offset: 22257},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 765, col: 1, offset: 22365},
			expr: &actionExpr{
				pos: position{line: 766, col: 5, offset: 22381},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 766, col: 5, offset: 22381},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "TypeLiteral",
			pos:  position{line: 768, col: 1, offset: 22484},
			expr: &actionExpr{
				pos: position{line: 769, col: 5, offset: 22500},
				run: (*parser).callonTypeLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 769, col: 5, offset: 22500},
					label: "typ",
					expr: &ruleRefExpr{
						pos:  position{line: 769, col: 9, offset: 22504},
						name: "TypeExternal",
					},
				},
			},
		},
		{
			name: "CastType",
			pos:  position{line: 773, col: 1, offset: 22598},
			expr: &choiceExpr{
				pos: position{line: 774, col: 5, offset: 22611},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 774, col: 5, offset: 22611},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 775, col: 5, offset: 22628},
						name: "PrimitiveType",
					},
				},
			},
		},
		{
			name: "TypeExternal",
			pos:  position{line: 777, col: 1, offset: 22643},
			expr: &choiceExpr{
				pos: position{line: 778, col: 5, offset: 22660},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 778, col: 5, offset: 22660},
						run: (*parser).callonTypeExternal2,
						expr: &seqExpr{
							pos: position{line: 778, col: 5, offset: 22660},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 778, col: 5, offset: 22660},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 778, col: 12, offset: 22667},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 778, col: 15, offset: 22670},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 778, col: 19, offset: 22674},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 778, col: 22, offset: 22677},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 778, col: 26, offset: 22681},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 778, col: 31, offset: 22686},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 778, col: 34, offset: 22689},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 779, col: 5, offset: 22716},
						run: (*parser).callonTypeExternal12,
						expr: &seqExpr{
							pos: position{line: 779, col: 5, offset: 22716},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 779, col: 5, offset: 22716},
									val:        "type",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 779, col: 12, offset: 22723},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 779, col: 15, offset: 22726},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 779, col: 19, offset: 22730},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 779, col: 22, offset: 22733},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 779, col: 26, offset: 22737},
										name: "TypeUnion",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 779, col: 36, offset: 22747},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 779, col: 39, offset: 22750},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 780, col: 5, offset: 22778},
						name: "ComplexType",
					},
					&actionExpr{
						pos: position{line: 781, col: 5, offset: 22794},
						run: (*parser).callonTypeExternal23,
						expr: &seqExpr{
							pos: position{line: 781, col: 5, offset: 22794},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 781, col: 5, offset: 22794},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 781, col: 9, offset: 22798},
										name: "PrimitiveTypeExternal",
									},
								},
								&notExpr{
									pos: position{line: 781, col: 31, offset: 22820},
									expr: &ruleRefExpr{
										pos:  position{line: 781, col: 32, offset: 22821},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 783, col: 1, offset: 22857},
			expr: &choiceExpr{
				pos: position{line: 784, col: 5, offset: 22866},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 784, col: 5, offset: 22866},
						name: "AmbiguousType",
					},
					&ruleRefExpr{
						pos:  position{line: 785, col: 5, offset: 22884},
						name: "ComplexType",
					},
				},
			},
		},
		{
			name: "AmbiguousType",
			pos:  position{line: 787, col: 1, offset: 22897},
			expr: &choiceExpr{
				pos: position{line: 788, col: 5, offset: 22915},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 788, col: 5, offset: 22915},
						run: (*parser).callonAmbiguousType2,
						expr: &litMatcher{
							pos:        position{line: 788, col: 5, offset: 22915},
							val:        "null",
							ignoreCase: false,
						},
					},
					&labeledExpr{
						pos:   position{line: 791, col: 5, offset: 22993},
						label: "name",
						expr: &ruleRefExpr{
							pos:  position{line: 791, col: 10, offset: 22998},
							name: "PrimitiveType",
						},
					},
					&actionExpr{
						pos: position{line: 792, col: 5, offset: 23016},
						run: (*parser).callonAmbiguousType6,
						expr: &seqExpr{
							pos: position{line: 792, col: 5, offset: 23016},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 792, col: 5, offset: 23016},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 792, col: 10, offset: 23021},
										name: "IdentifierName",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 792, col: 25, offset: 23036},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 792, col: 28, offset: 23039},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 792, col: 32, offset: 23043},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 792, col: 35, offset: 23046},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 792, col: 39, offset: 23050},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 792, col: 42, offset: 23053},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 792, col: 46, offset: 23057},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 792, col: 51, offset: 23062},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 792, col: 54, offset: 23065},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 795, col: 5, offset: 23164},
						run: (*parser).callonAmbiguousType19,
						expr: &labeledExpr{
							pos:   position{line: 795, col: 5, offset: 23164},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 10, offset: 23169},
								name: "IdentifierName",
							},
						},
					},
					&actionExpr{
						pos: position{line: 798, col: 5, offset: 23269},
						run: (*parser).callonAmbiguousType22,
						expr: &seqExpr{
							pos: position{line: 798, col: 5, offset: 23269},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 798, col: 5, offset: 23269},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 798, col: 9, offset: 23273},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 798, col: 12, offset: 23276},
									label: "u",
									expr: &ruleRefExpr{
										pos:  position{line: 798, col: 14, offset: 23278},
										name: "TypeUnion",
									},
								},
								&litMatcher{
									pos:        position{line: 798, col: 25, offset: 23289},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeUnion",
			pos:  position{line: 800, col: 1, offset: 23312},
			expr: &actionExpr{
				pos: position{line: 801, col: 5, offset: 23326},
				run: (*parser).callonTypeUnion1,
				expr: &labeledExpr{
					pos:   position{line: 801, col: 5, offset: 23326},
					label: "types",
					expr: &ruleRefExpr{
						pos:  position{line: 801, col: 11, offset: 23332},
						name: "TypeList",
					},
				},
			},
		},
		{
			name: "TypeList",
			pos:  position{line: 805, col: 1, offset: 23426},
			expr: &actionExpr{
				pos: position{line: 806, col: 5, offset: 23439},
				run: (*parser).callonTypeList1,
				expr: &seqExpr{
					pos: position{line: 806, col: 5, offset: 23439},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 806, col: 5, offset: 23439},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 806, col: 11, offset: 23445},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 806, col: 16, offset: 23450},
							label: "rest",
							expr: &oneOrMoreExpr{
								pos: position{line: 806, col: 21, offset: 23455},
								expr: &ruleRefExpr{
									pos:  position{line: 806, col: 21, offset: 23455},
									name: "TypeListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeListTail",
			pos:  position{line: 810, col: 1, offset: 23549},
			expr: &actionExpr{
				pos: position{line: 810, col: 16, offset: 23564},
				run: (*parser).callonTypeListTail1,
				expr: &seqExpr{
					pos: position{line: 810, col: 16, offset: 23564},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 810, col: 16, offset: 23564},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 810, col: 19, offset: 23567},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 810, col: 23, offset: 23571},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 810, col: 26, offset: 23574},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 810, col: 30, offset: 23578},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "ComplexType",
			pos:  position{line: 812, col: 1, offset: 23604},
			expr: &choiceExpr{
				pos: position{line: 813, col: 5, offset: 23620},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 813, col: 5, offset: 23620},
						run: (*parser).callonComplexType2,
						expr: &seqExpr{
							pos: position{line: 813, col: 5, offset: 23620},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 813, col: 5, offset: 23620},
									val:        "{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 813, col: 9, offset: 23624},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 813, col: 12, offset: 23627},
									label: "fields",
									expr: &ruleRefExpr{
										pos:  position{line: 813, col: 19, offset: 23634},
										name: "TypeFieldList",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 813, col: 33, offset: 23648},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 813, col: 36, offset: 23651},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 816, col: 5, offset: 23744},
						run: (*parser).callonComplexType10,
						expr: &seqExpr{
							pos: position{line: 816, col: 5, offset: 23744},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 816, col: 5, offset: 23744},
									val:        "[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 816, col: 9, offset: 23748},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 816, col: 12, offset: 23751},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 816, col: 16, offset: 23755},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 816, col: 21, offset: 23760},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 816, col: 24, offset: 23763},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 819, col: 5, offset: 23850},
						run: (*parser).callonComplexType18,
						expr: &seqExpr{
							pos: position{line: 819, col: 5, offset: 23850},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 819, col: 5, offset: 23850},
									val:        "|[",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 819, col: 10, offset: 23855},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 819, col: 13, offset: 23858},
									label: "typ",
									expr: &ruleRefExpr{
										pos:  position{line: 819, col: 17, offset: 23862},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 819, col: 22, offset: 23867},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 819, col: 25, offset: 23870},
									val:        "]|",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 822, col: 5, offset: 23956},
						run: (*parser).callonComplexType26,
						expr: &seqExpr{
							pos: position{line: 822, col: 5, offset: 23956},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 822, col: 5, offset: 23956},
									val:        "|{",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 822, col: 10, offset: 23961},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 822, col: 13, offset: 23964},
									label: "keyType",
									expr: &ruleRefExpr{
										pos:  position{line: 822, col: 21, offset: 23972},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 822, col: 26, offset: 23977},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 822, col: 29, offset: 23980},
									val:        ",",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 822, col: 33, offset: 23984},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 822, col: 36, offset: 23987},
									label: "valType",
									expr: &ruleRefExpr{
										pos:  position{line: 822, col: 44, offset: 23995},
										name: "Type",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 822, col: 49, offset: 24000},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 822, col: 52, offset: 24003},
									val:        "}|",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 826, col: 1, offset: 24115},
			expr: &choiceExpr{
				pos: position{line: 827, col: 5, offset: 24133},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 827, col: 5, offset: 24133},
						name: "PrimitiveTypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 828, col: 5, offset: 24159},
						name: "PrimitiveTypeInternal",
					},
				},
			},
		},
		{
			name: "PrimitiveTypeExternal",
			pos:  position{line: 834, col: 1, offset: 24418},
			expr: &actionExpr{
				pos: position{line: 835, col: 5, offset: 24444},
				run: (*parser).callonPrimitiveTypeExternal1,
				expr: &choiceExpr{
					pos: position{line: 835, col: 9, offset: 24448},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 835, col: 9, offset: 24448},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 835, col: 19, offset: 24458},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 835, col: 30, offset: 24469},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 835, col: 41, offset: 24480},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 836, col: 9, offset: 24497},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 836, col: 18, offset: 24506},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 836, col: 28, offset: 24516},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 836, col: 38, offset: 24526},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 837, col: 9, offset: 24542},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 838, col: 9, offset: 24560},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 838, col: 18, offset: 24569},
							val:        "string",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "PrimitiveTypeInternal",
			pos:  position{line: 847, col: 1, offset: 25051},
			expr: &actionExpr{
				pos: position{line: 848, col: 5, offset: 25077},
				run: (*parser).callonPrimitiveTypeInternal1,
				expr: &choiceExpr{
					pos: position{line: 848, col: 9, offset: 25081},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 848, col: 9, offset: 25081},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 848, col: 22, offset: 25094},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 849, col: 9, offset: 25109},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 850, col: 9, offset: 25125},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 851, col: 9, offset: 25143},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 851, col: 16, offset: 25150},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 852, col: 9, offset: 25164},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 852, col: 18, offset: 25173},
							val:        "error",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "TypeFieldList",
			pos:  position{line: 856, col: 1, offset: 25288},
			expr: &actionExpr{
				pos: position{line: 857, col: 5, offset: 25306},
				run: (*parser).callonTypeFieldList1,
				expr: &seqExpr{
					pos: position{line: 857, col: 5, offset: 25306},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 857, col: 5, offset: 25306},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 857, col: 11, offset: 25312},
								name: "TypeField",
							},
						},
						&labeledExpr{
							pos:   position{line: 857, col: 21, offset: 25322},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 857, col: 26, offset: 25327},
								expr: &ruleRefExpr{
									pos:  position{line: 857, col: 26, offset: 25327},
									name: "TypeFieldListTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeFieldListTail",
			pos:  position{line: 861, col: 1, offset: 25426},
			expr: &actionExpr{
				pos: position{line: 861, col: 21, offset: 25446},
				run: (*parser).callonTypeFieldListTail1,
				expr: &seqExpr{
					pos: position{line: 861, col: 21, offset: 25446},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 861, col: 21, offset: 25446},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 861, col: 24, offset: 25449},
							val:        ",",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 861, col: 28, offset: 25453},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 861, col: 31, offset: 25456},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 861, col: 35, offset: 25460},
								name: "TypeField",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeField",
			pos:  position{line: 863, col: 1, offset: 25491},
			expr: &actionExpr{
				pos: position{line: 864, col: 5, offset: 25505},
				run: (*parser).callonTypeField1,
				expr: &seqExpr{
					pos: position{line: 864, col: 5, offset: 25505},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 864, col: 5, offset: 25505},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 864, col: 10, offset: 25510},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 864, col: 25, offset: 25525},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 864, col: 28, offset: 25528},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 864, col: 32, offset: 25532},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 864, col: 35, offset: 25535},
							label: "typ",
							expr: &ruleRefExpr{
								pos:  position{line: 864, col: 39, offset: 25539},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 868, col: 1, offset: 25621},
			expr: &choiceExpr{
				pos: position{line: 869, col: 5, offset: 25639},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 869, col: 5, offset: 25639},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 869, col: 24, offset: 25658},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 871, col: 1, offset: 25676},
			expr: &actionExpr{
				pos: position{line: 871, col: 12, offset: 25687},
				run: (*parser).callonAndToken1,
				expr: &litMatcher{
					pos:        position{line: 871, col: 12, offset: 25687},
					val:        "and",
					ignoreCase: true,
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 872, col: 1, offset: 25716},
			expr: &actionExpr{
				pos: position{line: 872, col: 11, offset: 25726},
				run: (*parser).callonOrToken1,
				expr: &litMatcher{
					pos:        position{line: 872, col: 11, offset: 25726},
					val:        "or",
					ignoreCase: true,
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 873, col: 1, offset: 25753},
			expr: &actionExpr{
				pos: position{line: 873, col: 11, offset: 25763},
				run: (*parser).callonInToken1,
				expr: &litMatcher{
					pos:        position{line: 873, col: 11, offset: 25763},
					val:        "in",
					ignoreCase: true,
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 874, col: 1, offset: 25790},
			expr: &actionExpr{
				pos: position{line: 874, col: 12, offset: 25801},
				run: (*parser).callonNotToken1,
				expr: &litMatcher{
					pos:        position{line: 874, col: 12, offset: 25801},
					val:        "not",
					ignoreCase: true,
				},
			},
		},
		{
			name: "ByToken",
			pos:  position{line: 875, col: 1, offset: 25830},
			expr: &actionExpr{
				pos: position{line: 875, col: 11, offset: 25840},
				run: (*parser).callonByToken1,
				expr: &litMatcher{
					pos:        position{line: 875, col: 11, offset: 25840},
					val:        "by",
					ignoreCase: true,
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 877, col: 1, offset: 25868},
			expr: &charClassMatcher{
				pos:        position{line: 877, col: 19, offset: 25886},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 878, col: 1, offset: 25897},
			expr: &choiceExpr{
				pos: position{line: 878, col: 18, offset: 25914},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 878, col: 18, offset: 25914},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 878, col: 36, offset: 25932},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 880, col: 1, offset: 25939},
			expr: &actionExpr{
				pos: position{line: 881, col: 5, offset: 25954},
				run: (*parser).callonIdentifier1,
				expr: &labeledExpr{
					pos:   position{line: 881, col: 5, offset: 25954},
					label: "id",
					expr: &ruleRefExpr{
						pos:  position{line: 881, col: 8, offset: 25957},
						name: "IdentifierName",
					},
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 883, col: 1, offset: 26044},
			expr: &choiceExpr{
				pos: position{line: 884, col: 5, offset: 26063},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 884, col: 5, offset: 26063},
						run: (*parser).callonIdentifierName2,
						expr: &seqExpr{
							pos: position{line: 884, col: 5, offset: 26063},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 884, col: 5, offset: 26063},
									expr: &seqExpr{
										pos: position{line: 884, col: 7, offset: 26065},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 884, col: 7, offset: 26065},
												name: "IdGuard",
											},
											&notExpr{
												pos: position{line: 884, col: 15, offset: 26073},
												expr: &ruleRefExpr{
													pos:  position{line: 884, col: 16, offset: 26074},
													name: "IdentifierRest",
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 884, col: 32, offset: 26090},
									name: "IdentifierStart",
								},
								&zeroOrMoreExpr{
									pos: position{line: 884, col: 48, offset: 26106},
									expr: &ruleRefExpr{
										pos:  position{line: 884, col: 48, offset: 26106},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 885, col: 5, offset: 26158},
						run: (*parser).callonIdentifierName12,
						expr: &litMatcher{
							pos:        position{line: 885, col: 5, offset: 26158},
							val:        "$",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 886, col: 5, offset: 26197},
						run: (*parser).callonIdentifierName14,
						expr: &seqExpr{
							pos: position{line: 886, col: 5, offset: 26197},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 886, col: 5, offset: 26197},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 886, col: 10, offset: 26202},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 886, col: 13, offset: 26205},
										name: "IdGuard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 888, col: 5, offset: 26296},
						run: (*parser).callonIdentifierName19,
						expr: &litMatcher{
							pos:        position{line: 888, col: 5, offset: 26296},
							val:        "type",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IdGuard",
			pos:  position{line: 891, col: 1, offset: 26336},
			expr: &choiceExpr{
				pos: position{line: 892, col: 5, offset: 26348},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 892, col: 5, offset: 26348},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 893, col: 5, offset: 26367},
						name: "NullLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 894, col: 5, offset: 26383},
						name: "TypeExternal",
					},
					&ruleRefExpr{
						pos:  position{line: 895, col: 5, offset: 26400},
						name: "SearchGuard",
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 897, col: 1, offset: 26413},
			expr: &choiceExpr{
				pos: position{line: 898, col: 5, offset: 26426},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 898, col: 5, offset: 26426},
						name: "Seconds",
					},
					&ruleRefExpr{
						pos:  position{line: 899, col: 5, offset: 26438},
						name: "Minutes",
					},
					&ruleRefExpr{
						pos:  position{line: 900, col: 5, offset: 26450},
						name: "Hours",
					},
					&seqExpr{
						pos: position{line: 901, col: 5, offset: 26460},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 901, col: 5, offset: 26460},
								name: "Hours",
							},
							&ruleRefExpr{
								pos:  position{line: 901, col: 11, offset: 26466},
								name: "_",
							},
							&litMatcher{
								pos:        position{line: 901, col: 13, offset: 26468},
								val:        "and",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 901, col: 19, offset: 26474},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 901, col: 21, offset: 26476},
								name: "Minutes",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 902, col: 5, offset: 26488},
						name: "Days",
					},
					&ruleRefExpr{
						pos:  position{line: 903, col: 5, offset: 26497},
						name: "Weeks",
					},
				},
			},
		},
		{
			name: "SecondsToken",
			pos:  position{line: 905, col: 1, offset: 26504},
			expr: &choiceExpr{
				pos: position{line: 906, col: 5, offset: 26521},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 906, col: 5, offset: 26521},
						val:        "seconds",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 907, col: 5, offset: 26535},
						val:        "second",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 908, col: 5, offset: 26548},
						val:        "secs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 909, col: 5, offset: 26559},
						val:        "sec",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 910, col: 5, offset: 26569},
						val:        "s",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MinutesToken",
			pos:  position{line: 912, col: 1, offset: 26574},
			expr: &choiceExpr{
				pos: position{line: 913, col: 5, offset: 26591},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 913, col: 5, offset: 26591},
						val:        "minutes",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 914, col: 5, offset: 26605},
						val:        "minute",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 915, col: 5, offset: 26618},
						val:        "mins",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 916, col: 5, offset: 26629},
						val:        "min",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 917, col: 5, offset: 26639},
						val:        "m",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "HoursToken",
			pos:  position{line: 919, col: 1, offset: 26644},
			expr: &choiceExpr{
				pos: position{line: 920, col: 5, offset: 26659},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 920, col: 5, offset: 26659},
						val:        "hours",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 921, col: 5, offset: 26671},
						val:        "hrs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 922, col: 5, offset: 26681},
						val:        "hr",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 923, col: 5, offset: 26690},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 924, col: 5, offset: 26698},
						val:        "hour",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "DaysToken",
			pos:  position{line: 926, col: 1, offset: 26706},
			expr: &choiceExpr{
				pos: position{line: 926, col: 13, offset: 26718},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 926, col: 13, offset: 26718},
						val:        "days",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 926, col: 20, offset: 26725},
						val:        "day",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 926, col: 26, offset: 26731},
						val:        "d",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "WeeksToken",
			pos:  position{line: 927, col: 1, offset: 26735},
			expr: &choiceExpr{
				pos: position{line: 927, col: 14, offset: 26748},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 927, col: 14, offset: 26748},
						val:        "weeks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 927, col: 22, offset: 26756},
						val:        "week",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 927, col: 29, offset: 26763},
						val:        "wks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 927, col: 35, offset: 26769},
						val:        "wk",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 927, col: 40, offset: 26774},
						val:        "w",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Seconds",
			pos:  position{line: 929, col: 1, offset: 26779},
			expr: &choiceExpr{
				pos: position{line: 930, col: 5, offset: 26791},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 930, col: 5, offset: 26791},
						run: (*parser).callonSeconds2,
						expr: &litMatcher{
							pos:        position{line: 930, col: 5, offset: 26791},
							val:        "second",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 931, col: 5, offset: 26877},
						run: (*parser).callonSeconds4,
						expr: &seqExpr{
							pos: position{line: 931, col: 5, offset: 26877},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 931, col: 5, offset: 26877},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 931, col: 9, offset: 26881},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 931, col: 14, offset: 26886},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 931, col: 17, offset: 26889},
									name: "SecondsToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Minutes",
			pos:  position{line: 933, col: 1, offset: 26978},
			expr: &choiceExpr{
				pos: position{line: 934, col: 5, offset: 26990},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 934, col: 5, offset: 26990},
						run: (*parser).callonMinutes2,
						expr: &litMatcher{
							pos:        position{line: 934, col: 5, offset: 26990},
							val:        "minute",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 935, col: 5, offset: 27077},
						run: (*parser).callonMinutes4,
						expr: &seqExpr{
							pos: position{line: 935, col: 5, offset: 27077},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 935, col: 5, offset: 27077},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 935, col: 9, offset: 27081},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 935, col: 14, offset: 27086},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 935, col: 17, offset: 27089},
									name: "MinutesToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Hours",
			pos:  position{line: 937, col: 1, offset: 27187},
			expr: &choiceExpr{
				pos: position{line: 938, col: 5, offset: 27197},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 938, col: 5, offset: 27197},
						run: (*parser).callonHours2,
						expr: &litMatcher{
							pos:        position{line: 938, col: 5, offset: 27197},
							val:        "hour",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 939, col: 5, offset: 27284},
						run: (*parser).callonHours4,
						expr: &seqExpr{
							pos: position{line: 939, col: 5, offset: 27284},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 939, col: 5, offset: 27284},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 939, col: 9, offset: 27288},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 939, col: 14, offset: 27293},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 939, col: 17, offset: 27296},
									name: "HoursToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Days",
			pos:  position{line: 941, col: 1, offset: 27394},
			expr: &choiceExpr{
				pos: position{line: 942, col: 5, offset: 27403},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 942, col: 5, offset: 27403},
						run: (*parser).callonDays2,
						expr: &litMatcher{
							pos:        position{line: 942, col: 5, offset: 27403},
							val:        "day",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 943, col: 5, offset: 27492},
						run: (*parser).callonDays4,
						expr: &seqExpr{
							pos: position{line: 943, col: 5, offset: 27492},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 943, col: 5, offset: 27492},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 943, col: 9, offset: 27496},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 943, col: 14, offset: 27501},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 943, col: 17, offset: 27504},
									name: "DaysToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Weeks",
			pos:  position{line: 945, col: 1, offset: 27606},
			expr: &choiceExpr{
				pos: position{line: 946, col: 5, offset: 27616},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 946, col: 5, offset: 27616},
						run: (*parser).callonWeeks2,
						expr: &litMatcher{
							pos:        position{line: 946, col: 5, offset: 27616},
							val:        "week",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 947, col: 5, offset: 27708},
						run: (*parser).callonWeeks4,
						expr: &seqExpr{
							pos: position{line: 947, col: 5, offset: 27708},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 947, col: 5, offset: 27708},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 947, col: 9, offset: 27712},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 947, col: 14, offset: 27717},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 947, col: 17, offset: 27720},
									name: "WeeksToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 950, col: 1, offset: 27851},
			expr: &actionExpr{
				pos: position{line: 951, col: 5, offset: 27858},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 951, col: 5, offset: 27858},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 951, col: 5, offset: 27858},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 951, col: 10, offset: 27863},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 951, col: 14, offset: 27867},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 951, col: 19, offset: 27872},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 951, col: 23, offset: 27876},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 951, col: 28, offset: 27881},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 951, col: 32, offset: 27885},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 953, col: 1, offset: 27922},
			expr: &actionExpr{
				pos: position{line: 954, col: 5, offset: 27930},
				run: (*parser).callonIP61,
				expr: &seqExpr{
					pos: position{line: 954, col: 5, offset: 27930},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 954, col: 5, offset: 27930},
							expr: &seqExpr{
								pos: position{line: 954, col: 8, offset: 27933},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 954, col: 8, offset: 27933},
										name: "Hex",
									},
									&litMatcher{
										pos:        position{line: 954, col: 12, offset: 27937},
										val:        ":",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 954, col: 16, offset: 27941},
										name: "Hex",
									},
									&notExpr{
										pos: position{line: 954, col: 20, offset: 27945},
										expr: &choiceExpr{
											pos: position{line: 954, col: 22, offset: 27947},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 954, col: 22, offset: 27947},
													name: "HexDigit",
												},
												&litMatcher{
													pos:        position{line: 954, col: 33, offset: 27958},
													val:        ":",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 954, col: 39, offset: 27964},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 954, col: 41, offset: 27966},
								name: "IP6Variations",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Variations",
			pos:  position{line: 958, col: 1, offset: 28130},
			expr: &choiceExpr{
				pos: position{line: 959, col: 5, offset: 28148},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 959, col: 5, offset: 28148},
						run: (*parser).callonIP6Variations2,
						expr: &seqExpr{
							pos: position{line: 959, col: 5, offset: 28148},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 959, col: 5, offset: 28148},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 959, col: 7, offset: 28150},
										expr: &ruleRefExpr{
											pos:  position{line: 959, col: 7, offset: 28150},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 959, col: 17, offset: 28160},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 959, col: 19, offset: 28162},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 962, col: 5, offset: 28226},
						run: (*parser).callonIP6Variations9,
						expr: &seqExpr{
							pos: position{line: 962, col: 5, offset: 28226},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 962, col: 5, offset: 28226},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 962, col: 7, offset: 28228},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 962, col: 11, offset: 28232},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 962, col: 13, offset: 28234},
										expr: &ruleRefExpr{
											pos:  position{line: 962, col: 13, offset: 28234},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 962, col: 23, offset: 28244},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 962, col: 28, offset: 28249},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 962, col: 30, offset: 28251},
										expr: &ruleRefExpr{
											pos:  position{line: 962, col: 30, offset: 28251},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 962, col: 40, offset: 28261},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 962, col: 42, offset: 28263},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 965, col: 5, offset: 28362},
						run: (*parser).callonIP6Variations22,
						expr: &seqExpr{
							pos: position{line: 965, col: 5, offset: 28362},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 965, col: 5, offset: 28362},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 965, col: 10, offset: 28367},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 965, col: 12, offset: 28369},
										expr: &ruleRefExpr{
											pos:  position{line: 965, col: 12, offset: 28369},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 965, col: 22, offset: 28379},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 965, col: 24, offset: 28381},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 968, col: 5, offset: 28452},
						run: (*parser).callonIP6Variations30,
						expr: &seqExpr{
							pos: position{line: 968, col: 5, offset: 28452},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 968, col: 5, offset: 28452},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 968, col: 7, offset: 28454},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 968, col: 11, offset: 28458},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 968, col: 13, offset: 28460},
										expr: &ruleRefExpr{
											pos:  position{line: 968, col: 13, offset: 28460},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 968, col: 23, offset: 28470},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 971, col: 5, offset: 28538},
						run: (*parser).callonIP6Variations38,
						expr: &litMatcher{
							pos:        position{line: 971, col: 5, offset: 28538},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 975, col: 1, offset: 28575},
			expr: &choiceExpr{
				pos: position{line: 976, col: 5, offset: 28587},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 976, col: 5, offset: 28587},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 5, offset: 28594},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 979, col: 1, offset: 28599},
			expr: &actionExpr{
				pos: position{line: 979, col: 12, offset: 28610},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 979, col: 12, offset: 28610},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 979, col: 12, offset: 28610},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 979, col: 16, offset: 28614},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 979, col: 18, offset: 28616},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 980, col: 1, offset: 28653},
			expr: &actionExpr{
				pos: position{line: 980, col: 12, offset: 28664},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 980, col: 12, offset: 28664},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 980, col: 12, offset: 28664},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 980, col: 14, offset: 28666},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 980, col: 18, offset: 28670},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 982, col: 1, offset: 28708},
			expr: &actionExpr{
				pos: position{line: 983, col: 5, offset: 28719},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 983, col: 5, offset: 28719},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 983, col: 5, offset: 28719},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 983, col: 7, offset: 28721},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 983, col: 10, offset: 28724},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 983, col: 14, offset: 28728},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 983, col: 16, offset: 28730},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 987, col: 1, offset: 28803},
			expr: &actionExpr{
				pos: position{line: 988, col: 5, offset: 28814},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 988, col: 5, offset: 28814},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 988, col: 5, offset: 28814},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 988, col: 7, offset: 28816},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 988, col: 11, offset: 28820},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 988, col: 15, offset: 28824},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 988, col: 17, offset: 28826},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 992, col: 1, offset: 28889},
			expr: &actionExpr{
				pos: position{line: 993, col: 4, offset: 28897},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 993, col: 4, offset: 28897},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 993, col: 6, offset: 28899},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 995, col: 1, offset: 28939},
			expr: &choiceExpr{
				pos: position{line: 996, col: 5, offset: 28953},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 996, col: 5, offset: 28953},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 997, col: 5, offset: 28968},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 999, col: 1, offset: 28984},
			expr: &actionExpr{
				pos: position{line: 999, col: 14, offset: 28997},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 999, col: 14, offset: 28997},
					expr: &charClassMatcher{
						pos:        position{line: 999, col: 14, offset: 28997},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 1001, col: 1, offset: 29036},
			expr: &actionExpr{
				pos: position{line: 1002, col: 5, offset: 29055},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 1002, col: 5, offset: 29055},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1002, col: 5, offset: 29055},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 1002, col: 9, offset: 29059},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 1004, col: 1, offset: 29102},
			expr: &choiceExpr{
				pos: position{line: 1005, col: 5, offset: 29118},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1005, col: 5, offset: 29118},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 1005, col: 5, offset: 29118},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1005, col: 5, offset: 29118},
									expr: &litMatcher{
										pos:        position{line: 1005, col: 5, offset: 29118},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1005, col: 10, offset: 29123},
									expr: &charClassMatcher{
										pos:        position{line: 1005, col: 10, offset: 29123},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 1005, col: 17, offset: 29130},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1005, col: 21, offset: 29134},
									expr: &charClassMatcher{
										pos:        position{line: 1005, col: 21, offset: 29134},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1005, col: 28, offset: 29141},
									expr: &ruleRefExpr{
										pos:  position{line: 1005, col: 28, offset: 29141},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1008, col: 5, offset: 29200},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 1008, col: 5, offset: 29200},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 1008, col: 5, offset: 29200},
									expr: &litMatcher{
										pos:        position{line: 1008, col: 5, offset: 29200},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1008, col: 10, offset: 29205},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 1008, col: 14, offset: 29209},
									expr: &charClassMatcher{
										pos:        position{line: 1008, col: 14, offset: 29209},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1008, col: 21, offset: 29216},
									expr: &ruleRefExpr{
										pos:  position{line: 1008, col: 21, offset: 29216},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 1012, col: 1, offset: 29272},
			expr: &seqExpr{
				pos: position{line: 1012, col: 16, offset: 29287},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1012, col: 16, offset: 29287},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 1012, col: 21, offset: 29292},
						expr: &charClassMatcher{
							pos:        position{line: 1012, col: 21, offset: 29292},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1012, col: 27, offset: 29298},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 1014, col: 1, offset: 29310},
			expr: &actionExpr{
				pos: position{line: 1014, col: 7, offset: 29316},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1014, col: 7, offset: 29316},
					expr: &ruleRefExpr{
						pos:  position{line: 1014, col: 7, offset: 29316},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 1016, col: 1, offset: 29358},
			expr: &charClassMatcher{
				pos:        position{line: 1016, col: 12, offset: 29369},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1019, col: 1, offset: 29383},
			expr: &choiceExpr{
				pos: position{line: 1020, col: 5, offset: 29400},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1020, col: 5, offset: 29400},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 1020, col: 5, offset: 29400},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1020, col: 5, offset: 29400},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1020, col: 9, offset: 29404},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1020, col: 11, offset: 29406},
										expr: &ruleRefExpr{
											pos:  position{line: 1020, col: 11, offset: 29406},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1020, col: 29, offset: 29424},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1021, col: 5, offset: 29461},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 1021, col: 5, offset: 29461},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1021, col: 5, offset: 29461},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1021, col: 9, offset: 29465},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1021, col: 11, offset: 29467},
										expr: &ruleRefExpr{
											pos:  position{line: 1021, col: 11, offset: 29467},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1021, col: 29, offset: 29485},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 1023, col: 1, offset: 29519},
			expr: &choiceExpr{
				pos: position{line: 1024, col: 5, offset: 29540},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1024, col: 5, offset: 29540},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1024, col: 5, offset: 29540},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1024, col: 5, offset: 29540},
									expr: &choiceExpr{
										pos: position{line: 1024, col: 7, offset: 29542},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1024, col: 7, offset: 29542},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1024, col: 13, offset: 29548},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1024, col: 26, offset: 29561,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1025, col: 5, offset: 29598},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1025, col: 5, offset: 29598},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1025, col: 5, offset: 29598},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1025, col: 10, offset: 29603},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 12, offset: 29605},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 1027, col: 1, offset: 29639},
			expr: &actionExpr{
				pos: position{line: 1028, col: 5, offset: 29651},
				run: (*parser).callonKeyWord1,
				expr: &seqExpr{
					pos: position{line: 1028, col: 5, offset: 29651},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1028, col: 5, offset: 29651},
							label: "head",
							expr: &ruleRefExpr{
								pos:  position{line: 1028, col: 10, offset: 29656},
								name: "KeyWordStart",
							},
						},
						&labeledExpr{
							pos:   position{line: 1028, col: 23, offset: 29669},
							label: "tail",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1028, col: 28, offset: 29674},
								expr: &ruleRefExpr{
									pos:  position{line: 1028, col: 28, offset: 29674},
									name: "KeyWordRest",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "KeyWordStart",
			pos:  position{line: 1030, col: 1, offset: 29736},
			expr: &choiceExpr{
				pos: position{line: 1031, col: 5, offset: 29753},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1031, col: 5, offset: 29753},
						run: (*parser).callonKeyWordStart2,
						expr: &charClassMatcher{
							pos:        position{line: 1031, col: 5, offset: 29753},
							val:        "[a-zA-Z_.:/%#@~]",
							chars:      []rune{'_', '.', ':', '/', '%', '#', '@', '~'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1032, col: 5, offset: 29805},
						name: "KeyWordEsc",
					},
				},
			},
		},
		{
			name: "KeyWordRest",
			pos:  position{line: 1034, col: 1, offset: 29817},
			expr: &choiceExpr{
				pos: position{line: 1035, col: 5, offset: 29833},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1035, col: 5, offset: 29833},
						name: "KeyWordStart",
					},
					&charClassMatcher{
						pos:        position{line: 1036, col: 5, offset: 29850},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "KeyWordEsc",
			pos:  position{line: 1038, col: 1, offset: 29857},
			expr: &actionExpr{
				pos: position{line: 1038, col: 14, offset: 29870},
				run: (*parser).callonKeyWordEsc1,
				expr: &seqExpr{
					pos: position{line: 1038, col: 14, offset: 29870},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1038, col: 14, offset: 29870},
							val:        "\\",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1038, col: 19, offset: 29875},
							label: "s",
							expr: &choiceExpr{
								pos: position{line: 1038, col: 22, offset: 29878},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1038, col: 22, offset: 29878},
										name: "KeywordEscape",
									},
									&ruleRefExpr{
										pos:  position{line: 1038, col: 38, offset: 29894},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 1040, col: 1, offset: 29930},
			expr: &choiceExpr{
				pos: position{line: 1041, col: 5, offset: 29951},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1041, col: 5, offset: 29951},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 1041, col: 5, offset: 29951},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1041, col: 5, offset: 29951},
									expr: &choiceExpr{
										pos: position{line: 1041, col: 7, offset: 29953},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 1041, col: 7, offset: 29953},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1041, col: 13, offset: 29959},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 1041, col: 26, offset: 29972,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1042, col: 5, offset: 30009},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 1042, col: 5, offset: 30009},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1042, col: 5, offset: 30009},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1042, col: 10, offset: 30014},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 1042, col: 12, offset: 30016},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 1044, col: 1, offset: 30050},
			expr: &choiceExpr{
				pos: position{line: 1045, col: 5, offset: 30069},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1045, col: 5, offset: 30069},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 1045, col: 5, offset: 30069},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1045, col: 5, offset: 30069},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 1045, col: 9, offset: 30073},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 1045, col: 18, offset: 30082},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1046, col: 5, offset: 30133},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 5, offset: 30154},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 1049, col: 1, offset: 30169},
			expr: &choiceExpr{
				pos: position{line: 1050, col: 5, offset: 30190},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1050, col: 5, offset: 30190},
						run: (*parser).callonSingleCharEscape2,
						expr: &litMatcher{
							pos:        position{line: 1050, col: 5, offset: 30190},
							val:        "'",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1051, col: 5, offset: 30217},
						run: (*parser).callonSingleCharEscape4,
						expr: &litMatcher{
							pos:        position{line: 1051, col: 5, offset: 30217},
							val:        "\"",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1052, col: 5, offset: 30244},
						run: (*parser).callonSingleCharEscape6,
						expr: &litMatcher{
							pos:        position{line: 1052, col: 5, offset: 30244},
							val:        "\\",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1053, col: 5, offset: 30273},
						run: (*parser).callonSingleCharEscape8,
						expr: &litMatcher{
							pos:        position{line: 1053, col: 5, offset: 30273},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1054, col: 5, offset: 30302},
						run: (*parser).callonSingleCharEscape10,
						expr: &litMatcher{
							pos:        position{line: 1054, col: 5, offset: 30302},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1055, col: 5, offset: 30331},
						run: (*parser).callonSingleCharEscape12,
						expr: &litMatcher{
							pos:        position{line: 1055, col: 5, offset: 30331},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1056, col: 5, offset: 30360},
						run: (*parser).callonSingleCharEscape14,
						expr: &litMatcher{
							pos:        position{line: 1056, col: 5, offset: 30360},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1057, col: 5, offset: 30389},
						run: (*parser).callonSingleCharEscape16,
						expr: &litMatcher{
							pos:        position{line: 1057, col: 5, offset: 30389},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1058, col: 5, offset: 30418},
						run: (*parser).callonSingleCharEscape18,
						expr: &litMatcher{
							pos:        position{line: 1058, col: 5, offset: 30418},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "KeywordEscape",
			pos:  position{line: 1060, col: 1, offset: 30444},
			expr: &choiceExpr{
				pos: position{line: 1061, col: 5, offset: 30462},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1061, col: 5, offset: 30462},
						run: (*parser).callonKeywordEscape2,
						expr: &litMatcher{
							pos:        position{line: 1061, col: 5, offset: 30462},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 1062, col: 5, offset: 30490},
						run: (*parser).callonKeywordEscape4,
						expr: &litMatcher{
							pos:        position{line: 1062, col: 5, offset: 30490},
							val:        "*",
							ignoreCase: false,
						},
					},
					&charClassMatcher{
						pos:        position{line: 1063, col: 5, offset: 30520},
						val:        "[+-]",
						chars:      []rune{'+', '-'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 1065, col: 1, offset: 30526},
			expr: &choiceExpr{
				pos: position{line: 1066, col: 5, offset: 30544},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1066, col: 5, offset: 30544},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 1066, col: 5, offset: 30544},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1066, col: 5, offset: 30544},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1066, col: 9, offset: 30548},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1066, col: 16, offset: 30555},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1066, col: 16, offset: 30555},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1066, col: 25, offset: 30564},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1066, col: 34, offset: 30573},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 1066, col: 43, offset: 30582},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1069, col: 5, offset: 30645},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 1069, col: 5, offset: 30645},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1069, col: 5, offset: 30645},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 1069, col: 9, offset: 30649},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1069, col: 13, offset: 30653},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 1069, col: 20, offset: 30660},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1069, col: 20, offset: 30660},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 1069, col: 29, offset: 30669},
												expr: &ruleRefExpr{
													pos:  position{line: 1069, col: 29, offset: 30669},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1069, col: 39, offset: 30679},
												expr: &ruleRefExpr{
													pos:  position{line: 1069, col: 39, offset: 30679},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1069, col: 49, offset: 30689},
												expr: &ruleRefExpr{
													pos:  position{line: 1069, col: 49, offset: 30689},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1069, col: 59, offset: 30699},
												expr: &ruleRefExpr{
													pos:  position{line: 1069, col: 59, offset: 30699},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 1069, col: 69, offset: 30709},
												expr: &ruleRefExpr{
													pos:  position{line: 1069, col: 69, offset: 30709},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1069, col: 80, offset: 30720},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 1073, col: 1, offset: 30774},
			expr: &actionExpr{
				pos: position{line: 1074, col: 5, offset: 30785},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 1074, col: 5, offset: 30785},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1074, col: 5, offset: 30785},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1074, col: 9, offset: 30789},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 1074, col: 14, offset: 30794},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 1074, col: 25, offset: 30805},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 1076, col: 1, offset: 30831},
			expr: &actionExpr{
				pos: position{line: 1077, col: 5, offset: 30846},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1077, col: 5, offset: 30846},
					expr: &choiceExpr{
						pos: position{line: 1077, col: 6, offset: 30847},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 1077, col: 6, offset: 30847},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 1077, col: 13, offset: 30854},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 1079, col: 1, offset: 30894},
			expr: &charClassMatcher{
				pos:        position{line: 1080, col: 5, offset: 30910},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 1082, col: 1, offset: 30925},
			expr: &oneOrMoreExpr{
				pos: position{line: 1082, col: 6, offset: 30930},
				expr: &ruleRefExpr{
					pos:  position{line: 1082, col: 6, offset: 30930},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 1083, col: 1, offset: 30940},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1083, col: 6, offset: 30945},
				expr: &ruleRefExpr{
					pos:  position{line: 1083, col: 6, offset: 30945},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 1085, col: 1, offset: 30956},
			expr: &choiceExpr{
				pos: position{line: 1086, col: 5, offset: 30969},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1086, col: 5, offset: 30969},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 1087, col: 5, offset: 30984},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 1088, col: 5, offset: 31003},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 1090, col: 1, offset: 31012},
			expr: &anyMatcher{
				line: 1091, col: 5, offset: 31032,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 1093, col: 1, offset: 31035},
			expr: &choiceExpr{
				pos: position{line: 1094, col: 5, offset: 31063},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1094, col: 5, offset: 31063},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1095, col: 5, offset: 31072},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1096, col: 5, offset: 31081},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1097, col: 5, offset: 31090},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1098, col: 5, offset: 31098},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1099, col: 5, offset: 31111},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 1101, col: 1, offset: 31121},
			expr: &charClassMatcher{
				pos:        position{line: 1102, col: 5, offset: 31140},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 1108, col: 1, offset: 31470},
			expr: &ruleRefExpr{
				pos:  position{line: 1111, col: 5, offset: 31541},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 1113, col: 1, offset: 31560},
			expr: &seqExpr{
				pos: position{line: 1114, col: 5, offset: 31581},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1114, col: 5, offset: 31581},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1114, col: 10, offset: 31586},
						expr: &seqExpr{
							pos: position{line: 1114, col: 11, offset: 31587},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1114, col: 11, offset: 31587},
									expr: &litMatcher{
										pos:        position{line: 1114, col: 12, offset: 31588},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1114, col: 17, offset: 31593},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 1114, col: 35, offset: 31611},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1116, col: 1, offset: 31617},
			expr: &seqExpr{
				pos: position{line: 1117, col: 5, offset: 31639},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1117, col: 5, offset: 31639},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1117, col: 10, offset: 31644},
						expr: &seqExpr{
							pos: position{line: 1117, col: 11, offset: 31645},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1117, col: 11, offset: 31645},
									expr: &ruleRefExpr{
										pos:  position{line: 1117, col: 12, offset: 31646},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1117, col: 27, offset: 31661},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1119, col: 1, offset: 31680},
			expr: &seqExpr{
				pos: position{line: 1119, col: 7, offset: 31686},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1119, col: 7, offset: 31686},
						expr: &ruleRefExpr{
							pos:  position{line: 1119, col: 7, offset: 31686},
							name: "WhiteSpace",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1119, col: 19, offset: 31698},
						name: "LineTerminator",
					},
				},
			},
		},
		{
			name: "EOT",
			pos:  position{line: 1120, col: 1, offset: 31713},
			expr: &choiceExpr{
				pos: position{line: 1120, col: 7, offset: 31719},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1120, col: 7, offset: 31719},
						name: "_",
					},
					&ruleRefExpr{
						pos:  position{line: 1120, col: 11, offset: 31723},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1121, col: 1, offset: 31727},
			expr: &notExpr{
				pos: position{line: 1121, col: 7, offset: 31733},
				expr: &anyMatcher{
					line: 1121, col: 8, offset: 31734,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onZ2(consts, first, rest interface{}) (interface{}, error) {
	var procs = consts.([]interface{})
	procs = append(procs, first)
	for _, p := range rest.([]interface{}) {
		procs = append(procs, p)
	}
	return map[string]interface{}{"op": "SequentialProc", "procs": procs}, nil

}

func (p *parser) callonZ2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onZ2(stack["consts"], stack["first"], stack["rest"])
}

func (c *current) onConst1(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonConst1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConst1(stack["v"])
}

func (c *current) onAnyConst2(id, expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ConstProc", "name": id, "expr": expr}, nil

}

func (p *parser) callonAnyConst2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyConst2(stack["id"], stack["expr"])
}

func (c *current) onAnyConst18(id, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeProc", "name": id, "type": typ}, nil

}

func (p *parser) callonAnyConst18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyConst18(stack["id"], stack["typ"])
}

func (c *current) onSequential2(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonSequential2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential2(stack["first"], stack["rest"])
}

func (c *current) onSequential9(op interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": []interface{}{op}}, nil

}

func (p *parser) callonSequential9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequential9(stack["op"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onParallel2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonParallel2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel2(stack["first"], stack["rest"])
}

func (c *current) onParallel9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonParallel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallel9(stack["first"])
}

func (c *current) onParallelTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonParallelTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallelTail1(stack["ch"])
}

func (c *current) onSwitchBranch1(filter, proc interface{}) (interface{}, error) {
	return map[string]interface{}{"filter": filter, "proc": proc}, nil

}

func (p *parser) callonSwitchBranch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchBranch1(stack["filter"], stack["proc"])
}

func (c *current) onSwitch2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonSwitch2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch2(stack["first"], stack["rest"])
}

func (c *current) onSwitch9(first interface{}) (interface{}, error) {
	return []interface{}{first}, nil

}

func (p *parser) callonSwitch9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitch9(stack["first"])
}

func (c *current) onSwitchTail1(ch interface{}) (interface{}, error) {
	return ch, nil
}

func (p *parser) callonSwitchTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSwitchTail1(stack["ch"])
}

func (c *current) onOperation2(procArray interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ParallelProc", "procs": procArray}, nil

}

func (p *parser) callonOperation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation2(stack["procArray"])
}

func (c *current) onOperation14(caseArray interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SwitchProc", "cases": caseArray}, nil

}

func (p *parser) callonOperation14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation14(stack["caseArray"])
}

func (c *current) onOperation27(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonOperation27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation27(stack["f"])
}

func (c *current) onOperation33(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonOperation33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation33(stack["a"])
}

func (c *current) onOperation39(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonOperation39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOperation39(stack["expr"])
}

func (c *current) onSearchBoolean1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchBoolean1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchBoolean1(stack["first"], stack["rest"])
}

func (c *current) onSearchOrTerm1(t interface{}) (interface{}, error) {
	return []interface{}{"or", t}, nil
}

func (p *parser) callonSearchOrTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchOrTerm1(stack["t"])
}

func (c *current) onSearchAnd7(expr interface{}) (interface{}, error) {
	return []interface{}{"and", expr}, nil
}

func (p *parser) callonSearchAnd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd7(stack["expr"])
}

func (c *current) onSearchAnd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchAnd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchAnd1(stack["first"], stack["rest"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor15(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor15(stack["expr"])
}

func (c *current) onShortCut2(compareOp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": "or",

		"args": []interface{}{

			map[string]interface{}{"op": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"op": "RootRecord"}},

				"methods": []interface{}{

					map[string]interface{}{"op": "FunctionCall", "function": "map",

						"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "=",

							"lhs": map[string]interface{}{"op": "Identifier", "name": "$"},

							"rhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut2(stack["compareOp"], stack["v"])
}

func (c *current) onShortCut11(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": comp, "lhs": f, "rhs": v}, nil

}

func (p *parser) callonShortCut11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut11(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onShortCut23(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": "or",

		"args": []interface{}{

			map[string]interface{}{"op": "SelectExpr",

				"selectors": []interface{}{map[string]interface{}{"op": "RootRecord"}},

				"methods": []interface{}{

					map[string]interface{}{"op": "FunctionCall", "function": "map",

						"args": []interface{}{map[string]interface{}{"op": "BinaryExpr", "operator": "in",

							"rhs": map[string]interface{}{"op": "Identifier", "name": "$"},

							"lhs": v}}}}}}}, nil

}

func (p *parser) callonShortCut23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut23(stack["v"])
}

func (c *current) onShortCut31(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonShortCut31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut31(stack["v"])
}

func (c *current) onShortCut41() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil

}

func (p *parser) callonShortCut41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortCut41()
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onGlobbySearchValue3(v interface{}) (interface{}, error) {
	var str = v.(string)
	var literal = map[string]interface{}{"op": "Literal", "type": "string", "value": v}
	if reglob.IsGlobby(str) {
		literal["type"] = "regexp"
		literal["value"] = reglob.Reglob(str)
	}
	return literal, nil

}

func (p *parser) callonGlobbySearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobbySearchValue3(stack["v"])
}

func (c *current) onSearchGlob1(head, tail interface{}) (interface{}, error) {
	return joinChars(head) + joinChars(tail), nil

}

func (p *parser) callonSearchGlob1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchGlob1(stack["head"], stack["tail"])
}

func (c *current) onGlobPart2(s, v interface{}) (interface{}, error) {
	return s.(string) + v.(string), nil
}

func (p *parser) callonGlobPart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGlobPart2(stack["s"], stack["v"])
}

func (c *current) onStars1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonStars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStars1()
}

func (c *current) onComparator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComparator1()
}

func (c *current) onSearchExprRelative7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprRelative7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprRelative1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprRelative1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprRelative1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprAdd7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprAdd7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprAdd1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprAdd1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprAdd1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprMul7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonSearchExprMul7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul7(stack["op"], stack["expr"])
}

func (c *current) onSearchExprMul1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprMul1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprMul1(stack["first"], stack["rest"])
}

func (c *current) onSearchExprCast2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonSearchExprCast2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprCast2(stack["e"], stack["typ"])
}

func (c *current) onSearchExprFunc4(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonSearchExprFunc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExprFunc4(stack["first"], stack["rest"])
}

func (c *current) onAggregation2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "GroupByProc", "keys": keys, "reducers": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonAggregation2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onAggregation11(every, reducers, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"op": "GroupByProc", "keys": nil, "reducers": reducers, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonAggregation11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAggregation11(stack["every"], stack["reducers"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur2(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur2(stack["dur"])
}

func (c *current) onEveryDur9() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonEveryDur9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur9()
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onReducerAssignment2(lval, reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lval, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment2(stack["lval"], stack["reducer"])
}

func (c *current) onReducerAssignment11(reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment11(stack["reducer"])
}

func (c *current) onReducer1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"op": "Reducer", "operator": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonReducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducer1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onReducers1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonReducers1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducers1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"op": "SortProc", "fields": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "TopProc", "limit": 0, "fields": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["fields"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CutProc", "fields": columns}, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["columns"])
}

func (c *current) onPickProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PickProc", "fields": columns}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["columns"])
}

func (c *current) onDropProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "DropProc", "fields": columns}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["columns"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(op interface{}) (interface{}, error) {
	return op, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["op"])
}

func (c *current) onFilter1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonFilter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilter1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PutProc", "clauses": columns}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["columns"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "RenameProc", "fields": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"op": "FuseProc"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onJoinProc2(kind, leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "JoinProc", "kind": kind, "left_key": leftKey, "right_key": rightKey, "clauses": nil}
	if columns != nil {
		proc["clauses"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["kind"], stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc20(kind, key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "JoinProc", "kind": kind, "left_key": key, "right_key": key, "clauses": nil}
	if columns != nil {
		proc["clauses"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc20(stack["kind"], stack["key"], stack["columns"])
}

func (c *current) onJoinKind2() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKind2()
}

func (c *current) onJoinKind6() (interface{}, error) {
	return "left", nil
}

func (p *parser) callonJoinKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKind6()
}

func (c *current) onJoinKind10() (interface{}, error) {
	return "right", nil
}

func (p *parser) callonJoinKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKind10()
}

func (c *current) onJoinKind14() (interface{}, error) {
	return "inner", nil
}

func (p *parser) callonJoinKind14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKind14()
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onTasteProc1(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": []interface{}{

		map[string]interface{}{"op": "GroupByProc",

			"keys": []interface{}{map[string]interface{}{"op": "Assignment",

				"lhs": map[string]interface{}{"op": "Identifier", "name": "shape"},

				"rhs": map[string]interface{}{"op": "FunctionCall", "function": "typeof",

					"args": []interface{}{e}}}},

			"reducers": []interface{}{map[string]interface{}{"op": "Assignment",

				"lhs": map[string]interface{}{"op": "Identifier", "name": "taste"},

				"rhs": map[string]interface{}{"op": "Reducer",

					"operator": "any",

					"expr": e,

					"where": nil}}},

			"duration": nil, "limit": 0},

		map[string]interface{}{"op": "CutProc",

			"fields": []interface{}{map[string]interface{}{"op": "Assignment",

				"lhs": nil,

				"rhs": map[string]interface{}{"op": "Identifier", "name": "taste"}}}}}}, nil

}

func (p *parser) callonTasteProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteProc1(stack["e"])
}

func (c *current) onTasteExpr2(lval interface{}) (interface{}, error) {
	return lval, nil
}

func (p *parser) callonTasteExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteExpr2(stack["lval"])
}

func (c *current) onTasteExpr7() (interface{}, error) {
	return map[string]interface{}{"op": "RootRecord"}, nil
}

func (p *parser) callonTasteExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTasteExpr7()
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ConditionalExpr", "condition": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onCastExpr2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonCastExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpr2(stack["e"], stack["typ"])
}

func (c *current) onFuncExpr5(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr5(stack["first"], stack["rest"])
}

func (c *current) onMatchExpr1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonMatchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchExpr1(stack["expr"])
}

func (c *current) onSelectExpr1(args, methods interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SelectExpr", "selectors": args, "methods": methods}, nil

}

func (p *parser) callonSelectExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectExpr1(stack["args"], stack["methods"])
}

func (c *current) onMethods2(methods interface{}) (interface{}, error) {
	return methods, nil
}

func (p *parser) callonMethods2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods2(stack["methods"])
}

func (c *current) onMethods6() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonMethods6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethods6()
}

func (c *current) onMethod1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonMethod1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMethod1(stack["f"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onArgumentList8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonArgumentList8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList8(stack["e"])
}

func (c *current) onArgumentList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonArgumentList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList2(stack["first"], stack["rest"])
}

func (c *current) onArgumentList15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonArgumentList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList15()
}

func (c *current) onDerefExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr2(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr9(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr9(stack["first"], stack["rest"])
}

func (c *current) onDerefExpr16() (interface{}, error) {
	return map[string]interface{}{"op": "RootRecord"}, nil

}

func (p *parser) callonDerefExpr16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr16()
}

func (c *current) onDotId2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": ".",

		"lhs": map[string]interface{}{"op": "RootRecord"},

		"rhs": field}, nil

}

func (p *parser) callonDotId2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId2(stack["field"])
}

func (c *current) onDotId7(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": "[",

		"lhs": map[string]interface{}{"op": "RootRecord"},

		"rhs": expr}, nil

}

func (p *parser) callonDotId7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDotId7(stack["expr"])
}

func (c *current) onDeref2(from, to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": from, "rhs": to}}, nil

}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["from"], stack["to"])
}

func (c *current) onDeref13(to interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": nil, "rhs": to}}, nil

}

func (p *parser) callonDeref13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref13(stack["to"])
}

func (c *current) onDeref22(from interface{}) (interface{}, error) {
	return []interface{}{"[", map[string]interface{}{"op": "BinaryExpr", "operator": ":",

		"lhs": from, "rhs": nil}}, nil

}

func (p *parser) callonDeref22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref22(stack["from"])
}

func (c *current) onDeref31(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref31(stack["expr"])
}

func (c *current) onDeref37(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref37(stack["id"])
}

func (c *current) onPrimary3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary3(stack["expr"])
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onRegexpLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "regexp", "value": v}, nil

}

func (p *parser) callonRegexpLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "float64", "value": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "int64", "value": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "null", "value": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onTypeLiteral1(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeExpr", "type": typ}, nil

}

func (p *parser) callonTypeLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeLiteral1(stack["typ"])
}

func (c *current) onTypeExternal2(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal2(stack["typ"])
}

func (c *current) onTypeExternal12(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal12(stack["typ"])
}

func (c *current) onTypeExternal23(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeExternal23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeExternal23(stack["typ"])
}

func (c *current) onAmbiguousType2() (interface{}, error) {
	return map[string]interface{}{"op": "TypeNull"}, nil

}

func (p *parser) callonAmbiguousType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType2()
}

func (c *current) onAmbiguousType6(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeDef", "name": name, "type": typ}, nil

}

func (p *parser) callonAmbiguousType6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType6(stack["name"], stack["typ"])
}

func (c *current) onAmbiguousType19(name interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeName", "name": name}, nil

}

func (p *parser) callonAmbiguousType19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType19(stack["name"])
}

func (c *current) onAmbiguousType22(u interface{}) (interface{}, error) {
	return u, nil
}

func (p *parser) callonAmbiguousType22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAmbiguousType22(stack["u"])
}

func (c *current) onTypeUnion1(types interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeUnion", "types": types}, nil

}

func (p *parser) callonTypeUnion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeUnion1(stack["types"])
}

func (c *current) onTypeList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeList1(stack["first"], stack["rest"])
}

func (c *current) onTypeListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeListTail1(stack["typ"])
}

func (c *current) onComplexType2(fields interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeRecord", "fields": fields}, nil

}

func (p *parser) callonComplexType2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType2(stack["fields"])
}

func (c *current) onComplexType10(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeArray", "type": typ}, nil

}

func (p *parser) callonComplexType10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType10(stack["typ"])
}

func (c *current) onComplexType18(typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeSet", "type": typ}, nil

}

func (p *parser) callonComplexType18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType18(stack["typ"])
}

func (c *current) onComplexType26(keyType, valType interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TypeMap", "key_type": keyType, "val_type": valType}, nil

}

func (p *parser) callonComplexType26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComplexType26(stack["keyType"], stack["valType"])
}

func (c *current) onPrimitiveTypeExternal1() (interface{}, error) {
	return map[string]interface{}{"op": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeExternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeExternal1()
}

func (c *current) onPrimitiveTypeInternal1() (interface{}, error) {
	return map[string]interface{}{"op": "TypePrimitive", "name": string(c.text)}, nil

}

func (p *parser) callonPrimitiveTypeInternal1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveTypeInternal1()
}

func (c *current) onTypeFieldList1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonTypeFieldList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldList1(stack["first"], stack["rest"])
}

func (c *current) onTypeFieldListTail1(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonTypeFieldListTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeFieldListTail1(stack["typ"])
}

func (c *current) onTypeField1(name, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"name": name, "type": typ}, nil

}

func (p *parser) callonTypeField1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeField1(stack["name"], stack["typ"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return "and", nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return "or", nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return "in", nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return "not", nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onByToken1() (interface{}, error) {
	return "by", nil
}

func (p *parser) callonByToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onByToken1()
}

func (c *current) onIdentifier1(id interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Identifier", "name": id}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1(stack["id"])
}

func (c *current) onIdentifierName2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName2()
}

func (c *current) onIdentifierName12() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName12()
}

func (c *current) onIdentifierName14(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonIdentifierName14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName14(stack["id"])
}

func (c *current) onIdentifierName19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName19()
}

func (c *current) onSeconds2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 1}, nil
}

func (p *parser) callonSeconds2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds2()
}

func (c *current) onSeconds4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num}, nil
}

func (p *parser) callonSeconds4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds4(stack["num"])
}

func (c *current) onMinutes2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 60}, nil
}

func (p *parser) callonMinutes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes2()
}

func (c *current) onMinutes4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 60}, nil
}

func (p *parser) callonMinutes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes4(stack["num"])
}

func (c *current) onHours2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600}, nil
}

func (p *parser) callonHours2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours2()
}

func (c *current) onHours4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600}, nil
}

func (p *parser) callonHours4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours4(stack["num"])
}

func (c *current) onDays2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24}, nil
}

func (p *parser) callonDays2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays2()
}

func (c *current) onDays4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": (num.(int) * 3600 * 24)}, nil
}

func (p *parser) callonDays4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays4(stack["num"])
}

func (c *current) onWeeks2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks2()
}

func (c *current) onWeeks4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks4(stack["num"])
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP61(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonIP61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP61(stack["v"])
}

func (c *current) onIP6Variations2(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations2(stack["a"], stack["b"])
}

func (c *current) onIP6Variations9(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP6Variations9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations9(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP6Variations22(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP6Variations22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations22(stack["a"], stack["b"])
}

func (c *current) onIP6Variations30(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP6Variations30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations30(stack["a"], stack["b"])
}

func (c *current) onIP6Variations38() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP6Variations38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Variations38()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onKeyWord1(head, tail interface{}) (interface{}, error) {
	return head.(string) + joinChars(tail), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["head"], stack["tail"])
}

func (c *current) onKeyWordStart2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordStart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordStart2()
}

func (c *current) onKeyWordEsc1(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordEsc1(stack["s"])
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape2() (interface{}, error) {
	return "'", nil
}

func (p *parser) callonSingleCharEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape2()
}

func (c *current) onSingleCharEscape4() (interface{}, error) {
	return '"', nil
}

func (p *parser) callonSingleCharEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape4()
}

func (c *current) onSingleCharEscape6() (interface{}, error) {
	return "\\", nil
}

func (p *parser) callonSingleCharEscape6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape6()
}

func (c *current) onSingleCharEscape8() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape8()
}

func (c *current) onSingleCharEscape10() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape10()
}

func (c *current) onSingleCharEscape12() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape12()
}

func (c *current) onSingleCharEscape14() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape14()
}

func (c *current) onSingleCharEscape16() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape16()
}

func (c *current) onSingleCharEscape18() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape18()
}

func (c *current) onKeywordEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonKeywordEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape2()
}

func (c *current) onKeywordEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonKeywordEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeywordEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
