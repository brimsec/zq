// Code generated by pigeon; DO NOT EDIT.

package zql

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/brimsec/zq/reglob"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "start",
			pos:  position{line: 10, col: 1, offset: 26},
			expr: &actionExpr{
				pos: position{line: 10, col: 9, offset: 34},
				run: (*parser).callonstart1,
				expr: &seqExpr{
					pos: position{line: 10, col: 9, offset: 34},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 10, col: 9, offset: 34},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 10, col: 12, offset: 37},
							label: "ast",
							expr: &ruleRefExpr{
								pos:  position{line: 10, col: 16, offset: 41},
								name: "Query",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 22, offset: 47},
							name: "__",
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 25, offset: 50},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Query",
			pos:  position{line: 12, col: 1, offset: 75},
			expr: &choiceExpr{
				pos: position{line: 13, col: 5, offset: 85},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 13, col: 5, offset: 85},
						run: (*parser).callonQuery2,
						expr: &labeledExpr{
							pos:   position{line: 13, col: 5, offset: 85},
							label: "procs",
							expr: &ruleRefExpr{
								pos:  position{line: 13, col: 11, offset: 91},
								name: "SequentialProcs",
							},
						},
					},
					&actionExpr{
						pos: position{line: 16, col: 5, offset: 200},
						run: (*parser).callonQuery5,
						expr: &seqExpr{
							pos: position{line: 16, col: 5, offset: 200},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 16, col: 5, offset: 200},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 16, col: 7, offset: 202},
										name: "Search",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 16, col: 14, offset: 209},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 16, col: 17, offset: 212},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 16, col: 22, offset: 217},
										expr: &ruleRefExpr{
											pos:  position{line: 16, col: 22, offset: 217},
											name: "SequentialTail",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Search",
			pos:  position{line: 24, col: 1, offset: 465},
			expr: &actionExpr{
				pos: position{line: 25, col: 5, offset: 476},
				run: (*parser).callonSearch1,
				expr: &labeledExpr{
					pos:   position{line: 25, col: 5, offset: 476},
					label: "expr",
					expr: &ruleRefExpr{
						pos:  position{line: 25, col: 10, offset: 481},
						name: "SearchExpr",
					},
				},
			},
		},
		{
			name: "SearchExpr",
			pos:  position{line: 29, col: 1, offset: 578},
			expr: &actionExpr{
				pos: position{line: 30, col: 5, offset: 593},
				run: (*parser).callonSearchExpr1,
				expr: &seqExpr{
					pos: position{line: 30, col: 5, offset: 593},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 30, col: 5, offset: 593},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 30, col: 11, offset: 599},
								name: "SearchTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 30, col: 22, offset: 610},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 30, col: 27, offset: 615},
								expr: &ruleRefExpr{
									pos:  position{line: 30, col: 27, offset: 615},
									name: "OredSearchTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OredSearchTerm",
			pos:  position{line: 34, col: 1, offset: 694},
			expr: &actionExpr{
				pos: position{line: 34, col: 18, offset: 711},
				run: (*parser).callonOredSearchTerm1,
				expr: &seqExpr{
					pos: position{line: 34, col: 18, offset: 711},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 34, col: 18, offset: 711},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 34, col: 20, offset: 713},
							name: "OrToken",
						},
						&ruleRefExpr{
							pos:  position{line: 34, col: 28, offset: 721},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 34, col: 30, offset: 723},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 34, col: 32, offset: 725},
								name: "SearchTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchTerm",
			pos:  position{line: 36, col: 1, offset: 755},
			expr: &actionExpr{
				pos: position{line: 37, col: 5, offset: 770},
				run: (*parser).callonSearchTerm1,
				expr: &seqExpr{
					pos: position{line: 37, col: 5, offset: 770},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 37, col: 5, offset: 770},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 11, offset: 776},
								name: "SearchFactor",
							},
						},
						&labeledExpr{
							pos:   position{line: 37, col: 24, offset: 789},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 37, col: 29, offset: 794},
								expr: &ruleRefExpr{
									pos:  position{line: 37, col: 29, offset: 794},
									name: "AndedSearchTerm",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AndedSearchTerm",
			pos:  position{line: 41, col: 1, offset: 875},
			expr: &actionExpr{
				pos: position{line: 41, col: 19, offset: 893},
				run: (*parser).callonAndedSearchTerm1,
				expr: &seqExpr{
					pos: position{line: 41, col: 19, offset: 893},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 41, col: 19, offset: 893},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 41, col: 21, offset: 895},
							expr: &seqExpr{
								pos: position{line: 41, col: 22, offset: 896},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 41, col: 22, offset: 896},
										name: "AndToken",
									},
									&ruleRefExpr{
										pos:  position{line: 41, col: 31, offset: 905},
										name: "_",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 41, col: 35, offset: 909},
							label: "f",
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 37, offset: 911},
								name: "SearchFactor",
							},
						},
					},
				},
			},
		},
		{
			name: "SearchFactor",
			pos:  position{line: 43, col: 1, offset: 943},
			expr: &choiceExpr{
				pos: position{line: 44, col: 5, offset: 960},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 44, col: 5, offset: 960},
						run: (*parser).callonSearchFactor2,
						expr: &seqExpr{
							pos: position{line: 44, col: 5, offset: 960},
							exprs: []interface{}{
								&choiceExpr{
									pos: position{line: 44, col: 6, offset: 961},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 44, col: 6, offset: 961},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 44, col: 6, offset: 961},
													name: "NotToken",
												},
												&ruleRefExpr{
													pos:  position{line: 44, col: 15, offset: 970},
													name: "_",
												},
											},
										},
										&seqExpr{
											pos: position{line: 44, col: 19, offset: 974},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 44, col: 19, offset: 974},
													val:        "!",
													ignoreCase: false,
												},
												&ruleRefExpr{
													pos:  position{line: 44, col: 23, offset: 978},
													name: "__",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 44, col: 27, offset: 982},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 44, col: 29, offset: 984},
										name: "SearchExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 47, col: 5, offset: 1079},
						run: (*parser).callonSearchFactor13,
						expr: &seqExpr{
							pos: position{line: 47, col: 5, offset: 1079},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 47, col: 5, offset: 1079},
									expr: &litMatcher{
										pos:        position{line: 47, col: 7, offset: 1081},
										val:        "-",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 47, col: 12, offset: 1086},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 47, col: 14, offset: 1088},
										name: "SearchPred",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 48, col: 5, offset: 1121},
						run: (*parser).callonSearchFactor19,
						expr: &seqExpr{
							pos: position{line: 48, col: 5, offset: 1121},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 48, col: 5, offset: 1121},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 48, col: 9, offset: 1125},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 48, col: 12, offset: 1128},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 48, col: 17, offset: 1133},
										name: "SearchExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 48, col: 28, offset: 1144},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 48, col: 31, offset: 1147},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchPred",
			pos:  position{line: 50, col: 1, offset: 1173},
			expr: &choiceExpr{
				pos: position{line: 51, col: 5, offset: 1188},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 51, col: 5, offset: 1188},
						run: (*parser).callonSearchPred2,
						expr: &seqExpr{
							pos: position{line: 51, col: 5, offset: 1188},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 51, col: 5, offset: 1188},
									val:        "*",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 51, col: 9, offset: 1192},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 51, col: 12, offset: 1195},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 51, col: 17, offset: 1200},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 51, col: 31, offset: 1214},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 51, col: 34, offset: 1217},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 51, col: 36, offset: 1219},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 54, col: 5, offset: 1356},
						run: (*parser).callonSearchPred11,
						expr: &seqExpr{
							pos: position{line: 54, col: 5, offset: 1356},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 54, col: 5, offset: 1356},
									val:        "**",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 54, col: 10, offset: 1361},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 54, col: 13, offset: 1364},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 18, offset: 1369},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 54, col: 32, offset: 1383},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 54, col: 35, offset: 1386},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 54, col: 37, offset: 1388},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 57, col: 5, offset: 1524},
						run: (*parser).callonSearchPred20,
						expr: &seqExpr{
							pos: position{line: 57, col: 5, offset: 1524},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 57, col: 5, offset: 1524},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 57, col: 7, offset: 1526},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 57, col: 12, offset: 1531},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 57, col: 15, offset: 1534},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 57, col: 20, offset: 1539},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 57, col: 34, offset: 1553},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 57, col: 37, offset: 1556},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 57, col: 39, offset: 1558},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 64, col: 5, offset: 2012},
						run: (*parser).callonSearchPred30,
						expr: &seqExpr{
							pos: position{line: 64, col: 5, offset: 2012},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 64, col: 5, offset: 2012},
									expr: &litMatcher{
										pos:        position{line: 64, col: 6, offset: 2013},
										val:        "len",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 64, col: 12, offset: 2019},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 17, offset: 2024},
										name: "Function",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 64, col: 26, offset: 2033},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 64, col: 29, offset: 2036},
									label: "comp",
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 34, offset: 2041},
										name: "EqualityToken",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 64, col: 48, offset: 2055},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 64, col: 51, offset: 2058},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 64, col: 53, offset: 2060},
										name: "SearchValue",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 67, col: 5, offset: 2188},
						run: (*parser).callonSearchPred42,
						expr: &seqExpr{
							pos: position{line: 67, col: 5, offset: 2188},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 67, col: 5, offset: 2188},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 7, offset: 2190},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 67, col: 19, offset: 2202},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 67, col: 22, offset: 2205},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 67, col: 30, offset: 2213},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 67, col: 33, offset: 2216},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 70, col: 5, offset: 2345},
						run: (*parser).callonSearchPred50,
						expr: &seqExpr{
							pos: position{line: 70, col: 5, offset: 2345},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 70, col: 5, offset: 2345},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 7, offset: 2347},
										name: "SearchValue",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 70, col: 19, offset: 2359},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 70, col: 22, offset: 2362},
									name: "InToken",
								},
								&ruleRefExpr{
									pos:  position{line: 70, col: 30, offset: 2370},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 70, col: 33, offset: 2373},
									label: "f",
									expr: &ruleRefExpr{
										pos:  position{line: 70, col: 35, offset: 2375},
										name: "FieldExpr",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 73, col: 5, offset: 2504},
						run: (*parser).callonSearchPred59,
						expr: &labeledExpr{
							pos:   position{line: 73, col: 5, offset: 2504},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 73, col: 7, offset: 2506},
								name: "SearchLiteral",
							},
						},
					},
					&actionExpr{
						pos: position{line: 76, col: 5, offset: 2625},
						run: (*parser).callonSearchPred62,
						expr: &seqExpr{
							pos: position{line: 76, col: 5, offset: 2625},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 76, col: 5, offset: 2625},
									expr: &seqExpr{
										pos: position{line: 76, col: 7, offset: 2627},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 76, col: 7, offset: 2627},
												name: "SearchTokens",
											},
											&ruleRefExpr{
												pos:  position{line: 76, col: 20, offset: 2640},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 76, col: 24, offset: 2644},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 76, col: 26, offset: 2646},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchValue",
			pos:  position{line: 89, col: 1, offset: 3095},
			expr: &choiceExpr{
				pos: position{line: 90, col: 5, offset: 3111},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 90, col: 5, offset: 3111},
						name: "SearchLiteral",
					},
					&actionExpr{
						pos: position{line: 91, col: 5, offset: 3129},
						run: (*parser).callonSearchValue3,
						expr: &seqExpr{
							pos: position{line: 91, col: 5, offset: 3129},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 91, col: 5, offset: 3129},
									expr: &seqExpr{
										pos: position{line: 91, col: 7, offset: 3131},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 91, col: 7, offset: 3131},
												name: "SearchTokens",
											},
											&ruleRefExpr{
												pos:  position{line: 91, col: 20, offset: 3144},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 91, col: 23, offset: 3147},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 91, col: 25, offset: 3149},
										name: "KeyWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SearchTokens",
			pos:  position{line: 95, col: 1, offset: 3254},
			expr: &choiceExpr{
				pos: position{line: 96, col: 5, offset: 3271},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 96, col: 5, offset: 3271},
						name: "AndToken",
					},
					&ruleRefExpr{
						pos:  position{line: 97, col: 5, offset: 3284},
						name: "OrToken",
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 5, offset: 3296},
						name: "InToken",
					},
				},
			},
		},
		{
			name: "SearchLiteral",
			pos:  position{line: 100, col: 1, offset: 3305},
			expr: &choiceExpr{
				pos: position{line: 101, col: 5, offset: 3323},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 101, col: 5, offset: 3323},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 102, col: 5, offset: 3341},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 103, col: 5, offset: 3359},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 104, col: 5, offset: 3377},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 105, col: 5, offset: 3396},
						name: "FloatLiteral",
					},
					&actionExpr{
						pos: position{line: 109, col: 5, offset: 3563},
						run: (*parser).callonSearchLiteral7,
						expr: &seqExpr{
							pos: position{line: 109, col: 5, offset: 3563},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 109, col: 5, offset: 3563},
									label: "i",
									expr: &ruleRefExpr{
										pos:  position{line: 109, col: 7, offset: 3565},
										name: "IntegerLiteral",
									},
								},
								&notExpr{
									pos: position{line: 109, col: 22, offset: 3580},
									expr: &ruleRefExpr{
										pos:  position{line: 109, col: 23, offset: 3581},
										name: "KeyWord",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 111, col: 5, offset: 3612},
						run: (*parser).callonSearchLiteral13,
						expr: &seqExpr{
							pos: position{line: 111, col: 5, offset: 3612},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 111, col: 5, offset: 3612},
									expr: &seqExpr{
										pos: position{line: 111, col: 7, offset: 3614},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 111, col: 7, offset: 3614},
												name: "SearchTokens",
											},
											&ruleRefExpr{
												pos:  position{line: 111, col: 20, offset: 3627},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 111, col: 23, offset: 3630},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 111, col: 25, offset: 3632},
										name: "BooleanLiteral",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 112, col: 5, offset: 3669},
						run: (*parser).callonSearchLiteral21,
						expr: &seqExpr{
							pos: position{line: 112, col: 5, offset: 3669},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 112, col: 5, offset: 3669},
									expr: &seqExpr{
										pos: position{line: 112, col: 7, offset: 3671},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 112, col: 7, offset: 3671},
												name: "SearchTokens",
											},
											&ruleRefExpr{
												pos:  position{line: 112, col: 20, offset: 3684},
												name: "_",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 112, col: 23, offset: 3687},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 112, col: 25, offset: 3689},
										name: "NullLiteral",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StringLiteral",
			pos:  position{line: 115, col: 1, offset: 3721},
			expr: &actionExpr{
				pos: position{line: 116, col: 5, offset: 3739},
				run: (*parser).callonStringLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 116, col: 5, offset: 3739},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 116, col: 7, offset: 3741},
						name: "QuotedString",
					},
				},
			},
		},
		{
			name: "RegexpLiteral",
			pos:  position{line: 120, col: 1, offset: 3851},
			expr: &actionExpr{
				pos: position{line: 121, col: 5, offset: 3869},
				run: (*parser).callonRegexpLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 121, col: 5, offset: 3869},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 121, col: 7, offset: 3871},
						name: "Regexp",
					},
				},
			},
		},
		{
			name: "SubnetLiteral",
			pos:  position{line: 125, col: 1, offset: 3975},
			expr: &choiceExpr{
				pos: position{line: 126, col: 5, offset: 3993},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 126, col: 5, offset: 3993},
						run: (*parser).callonSubnetLiteral2,
						expr: &seqExpr{
							pos: position{line: 126, col: 5, offset: 3993},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 126, col: 5, offset: 3993},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 126, col: 7, offset: 3995},
										name: "IP6Net",
									},
								},
								&notExpr{
									pos: position{line: 126, col: 14, offset: 4002},
									expr: &ruleRefExpr{
										pos:  position{line: 126, col: 15, offset: 4003},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 129, col: 5, offset: 4115},
						run: (*parser).callonSubnetLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 129, col: 5, offset: 4115},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 7, offset: 4117},
								name: "IP4Net",
							},
						},
					},
				},
			},
		},
		{
			name: "AddressLiteral",
			pos:  position{line: 133, col: 1, offset: 4218},
			expr: &choiceExpr{
				pos: position{line: 134, col: 5, offset: 4237},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 134, col: 5, offset: 4237},
						run: (*parser).callonAddressLiteral2,
						expr: &seqExpr{
							pos: position{line: 134, col: 5, offset: 4237},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 134, col: 5, offset: 4237},
									label: "v",
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 7, offset: 4239},
										name: "IP6",
									},
								},
								&notExpr{
									pos: position{line: 134, col: 11, offset: 4243},
									expr: &ruleRefExpr{
										pos:  position{line: 134, col: 12, offset: 4244},
										name: "IdentifierRest",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 137, col: 5, offset: 4355},
						run: (*parser).callonAddressLiteral8,
						expr: &labeledExpr{
							pos:   position{line: 137, col: 5, offset: 4355},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 7, offset: 4357},
								name: "IP",
							},
						},
					},
				},
			},
		},
		{
			name: "FloatLiteral",
			pos:  position{line: 141, col: 1, offset: 4453},
			expr: &actionExpr{
				pos: position{line: 142, col: 5, offset: 4470},
				run: (*parser).callonFloatLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 142, col: 5, offset: 4470},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 142, col: 7, offset: 4472},
						name: "FloatString",
					},
				},
			},
		},
		{
			name: "IntegerLiteral",
			pos:  position{line: 146, col: 1, offset: 4582},
			expr: &actionExpr{
				pos: position{line: 147, col: 5, offset: 4601},
				run: (*parser).callonIntegerLiteral1,
				expr: &labeledExpr{
					pos:   position{line: 147, col: 5, offset: 4601},
					label: "v",
					expr: &ruleRefExpr{
						pos:  position{line: 147, col: 7, offset: 4603},
						name: "IntString",
					},
				},
			},
		},
		{
			name: "BooleanLiteral",
			pos:  position{line: 151, col: 1, offset: 4709},
			expr: &choiceExpr{
				pos: position{line: 152, col: 5, offset: 4728},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 152, col: 5, offset: 4728},
						run: (*parser).callonBooleanLiteral2,
						expr: &litMatcher{
							pos:        position{line: 152, col: 5, offset: 4728},
							val:        "true",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 153, col: 5, offset: 4838},
						run: (*parser).callonBooleanLiteral4,
						expr: &litMatcher{
							pos:        position{line: 153, col: 5, offset: 4838},
							val:        "false",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NullLiteral",
			pos:  position{line: 155, col: 1, offset: 4946},
			expr: &actionExpr{
				pos: position{line: 156, col: 5, offset: 4962},
				run: (*parser).callonNullLiteral1,
				expr: &litMatcher{
					pos:        position{line: 156, col: 5, offset: 4962},
					val:        "null",
					ignoreCase: false,
				},
			},
		},
		{
			name: "SequentialProcs",
			pos:  position{line: 158, col: 1, offset: 5065},
			expr: &actionExpr{
				pos: position{line: 159, col: 5, offset: 5085},
				run: (*parser).callonSequentialProcs1,
				expr: &seqExpr{
					pos: position{line: 159, col: 5, offset: 5085},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 159, col: 5, offset: 5085},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 159, col: 11, offset: 5091},
								name: "Proc",
							},
						},
						&labeledExpr{
							pos:   position{line: 159, col: 16, offset: 5096},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 159, col: 21, offset: 5101},
								expr: &ruleRefExpr{
									pos:  position{line: 159, col: 21, offset: 5101},
									name: "SequentialTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SequentialTail",
			pos:  position{line: 166, col: 1, offset: 5272},
			expr: &actionExpr{
				pos: position{line: 166, col: 18, offset: 5289},
				run: (*parser).callonSequentialTail1,
				expr: &seqExpr{
					pos: position{line: 166, col: 18, offset: 5289},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 166, col: 18, offset: 5289},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 166, col: 21, offset: 5292},
							val:        "|",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 25, offset: 5296},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 28, offset: 5299},
							label: "p",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 30, offset: 5301},
								name: "Proc",
							},
						},
					},
				},
			},
		},
		{
			name: "Proc",
			pos:  position{line: 168, col: 1, offset: 5325},
			expr: &choiceExpr{
				pos: position{line: 169, col: 5, offset: 5334},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 169, col: 5, offset: 5334},
						name: "NamedProc",
					},
					&ruleRefExpr{
						pos:  position{line: 170, col: 5, offset: 5348},
						name: "GroupByProc",
					},
					&actionExpr{
						pos: position{line: 171, col: 5, offset: 5364},
						run: (*parser).callonProc4,
						expr: &seqExpr{
							pos: position{line: 171, col: 5, offset: 5364},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 171, col: 5, offset: 5364},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 171, col: 9, offset: 5368},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 171, col: 12, offset: 5371},
									label: "proc",
									expr: &ruleRefExpr{
										pos:  position{line: 171, col: 17, offset: 5376},
										name: "Procs",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 171, col: 23, offset: 5382},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 171, col: 26, offset: 5385},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Procs",
			pos:  position{line: 175, col: 1, offset: 5421},
			expr: &actionExpr{
				pos: position{line: 176, col: 5, offset: 5431},
				run: (*parser).callonProcs1,
				expr: &seqExpr{
					pos: position{line: 176, col: 5, offset: 5431},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 176, col: 5, offset: 5431},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 11, offset: 5437},
								name: "SequentialProcs",
							},
						},
						&labeledExpr{
							pos:   position{line: 176, col: 27, offset: 5453},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 176, col: 32, offset: 5458},
								expr: &ruleRefExpr{
									pos:  position{line: 176, col: 32, offset: 5458},
									name: "ParallelTail",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParallelTail",
			pos:  position{line: 185, col: 1, offset: 5757},
			expr: &actionExpr{
				pos: position{line: 186, col: 5, offset: 5774},
				run: (*parser).callonParallelTail1,
				expr: &seqExpr{
					pos: position{line: 186, col: 5, offset: 5774},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 186, col: 5, offset: 5774},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 186, col: 8, offset: 5777},
							val:        ";",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 186, col: 12, offset: 5781},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 186, col: 15, offset: 5784},
							label: "ch",
							expr: &ruleRefExpr{
								pos:  position{line: 186, col: 18, offset: 5787},
								name: "SequentialProcs",
							},
						},
					},
				},
			},
		},
		{
			name: "GroupByProc",
			pos:  position{line: 188, col: 1, offset: 5880},
			expr: &choiceExpr{
				pos: position{line: 189, col: 5, offset: 5896},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 189, col: 5, offset: 5896},
						run: (*parser).callonGroupByProc2,
						expr: &seqExpr{
							pos: position{line: 189, col: 5, offset: 5896},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 189, col: 5, offset: 5896},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 189, col: 11, offset: 5902},
										expr: &ruleRefExpr{
											pos:  position{line: 189, col: 11, offset: 5902},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 189, col: 21, offset: 5912},
									label: "keys",
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 26, offset: 5917},
										name: "GroupByKeys",
									},
								},
								&labeledExpr{
									pos:   position{line: 189, col: 38, offset: 5929},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 44, offset: 5935},
										name: "LimitArg",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 192, col: 5, offset: 6084},
						run: (*parser).callonGroupByProc11,
						expr: &seqExpr{
							pos: position{line: 192, col: 5, offset: 6084},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 192, col: 5, offset: 6084},
									label: "every",
									expr: &zeroOrOneExpr{
										pos: position{line: 192, col: 11, offset: 6090},
										expr: &ruleRefExpr{
											pos:  position{line: 192, col: 11, offset: 6090},
											name: "EveryDur",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 192, col: 21, offset: 6100},
									label: "reducers",
									expr: &ruleRefExpr{
										pos:  position{line: 192, col: 30, offset: 6109},
										name: "Reducers",
									},
								},
								&labeledExpr{
									pos:   position{line: 192, col: 39, offset: 6118},
									label: "keys",
									expr: &zeroOrOneExpr{
										pos: position{line: 192, col: 44, offset: 6123},
										expr: &seqExpr{
											pos: position{line: 192, col: 45, offset: 6124},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 192, col: 45, offset: 6124},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 192, col: 47, offset: 6126},
													name: "GroupByKeys",
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 192, col: 61, offset: 6140},
									label: "limit",
									expr: &zeroOrOneExpr{
										pos: position{line: 192, col: 67, offset: 6146},
										expr: &ruleRefExpr{
											pos:  position{line: 192, col: 67, offset: 6146},
											name: "LimitArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EveryDur",
			pos:  position{line: 200, col: 1, offset: 6388},
			expr: &actionExpr{
				pos: position{line: 201, col: 5, offset: 6401},
				run: (*parser).callonEveryDur1,
				expr: &seqExpr{
					pos: position{line: 201, col: 5, offset: 6401},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 201, col: 5, offset: 6401},
							val:        "every",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 201, col: 14, offset: 6410},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 201, col: 16, offset: 6412},
							label: "dur",
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 20, offset: 6416},
								name: "Duration",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 201, col: 29, offset: 6425},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "GroupByKeys",
			pos:  position{line: 203, col: 1, offset: 6448},
			expr: &actionExpr{
				pos: position{line: 204, col: 5, offset: 6464},
				run: (*parser).callonGroupByKeys1,
				expr: &seqExpr{
					pos: position{line: 204, col: 5, offset: 6464},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 204, col: 5, offset: 6464},
							val:        "by",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 204, col: 11, offset: 6470},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 204, col: 13, offset: 6472},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 204, col: 21, offset: 6480},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "LimitArg",
			pos:  position{line: 206, col: 1, offset: 6521},
			expr: &choiceExpr{
				pos: position{line: 207, col: 5, offset: 6534},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 207, col: 5, offset: 6534},
						run: (*parser).callonLimitArg2,
						expr: &seqExpr{
							pos: position{line: 207, col: 5, offset: 6534},
							exprs: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 207, col: 5, offset: 6534},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 207, col: 7, offset: 6536},
									val:        "with",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 207, col: 14, offset: 6543},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 207, col: 16, offset: 6545},
									val:        "-limit",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 207, col: 25, offset: 6554},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 207, col: 27, offset: 6556},
									label: "limit",
									expr: &ruleRefExpr{
										pos:  position{line: 207, col: 33, offset: 6562},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 208, col: 5, offset: 6593},
						run: (*parser).callonLimitArg11,
						expr: &litMatcher{
							pos:        position{line: 208, col: 5, offset: 6593},
							val:        "",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FlexAssignment",
			pos:  position{line: 213, col: 1, offset: 6853},
			expr: &choiceExpr{
				pos: position{line: 214, col: 5, offset: 6872},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 214, col: 5, offset: 6872},
						name: "Assignment",
					},
					&actionExpr{
						pos: position{line: 215, col: 5, offset: 6887},
						run: (*parser).callonFlexAssignment3,
						expr: &labeledExpr{
							pos:   position{line: 215, col: 5, offset: 6887},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 10, offset: 6892},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "FlexAssignments",
			pos:  position{line: 217, col: 1, offset: 6982},
			expr: &actionExpr{
				pos: position{line: 218, col: 5, offset: 7002},
				run: (*parser).callonFlexAssignments1,
				expr: &seqExpr{
					pos: position{line: 218, col: 5, offset: 7002},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 218, col: 5, offset: 7002},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 11, offset: 7008},
								name: "FlexAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 218, col: 26, offset: 7023},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 218, col: 31, offset: 7028},
								expr: &actionExpr{
									pos: position{line: 218, col: 32, offset: 7029},
									run: (*parser).callonFlexAssignments7,
									expr: &seqExpr{
										pos: position{line: 218, col: 32, offset: 7029},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 218, col: 32, offset: 7029},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 218, col: 35, offset: 7032},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 218, col: 39, offset: 7036},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 218, col: 42, offset: 7039},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 218, col: 47, offset: 7044},
													name: "FlexAssignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ReducerAssignment",
			pos:  position{line: 222, col: 1, offset: 7166},
			expr: &choiceExpr{
				pos: position{line: 223, col: 5, offset: 7188},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 223, col: 5, offset: 7188},
						run: (*parser).callonReducerAssignment2,
						expr: &seqExpr{
							pos: position{line: 223, col: 5, offset: 7188},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 223, col: 5, offset: 7188},
									label: "lval",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 10, offset: 7193},
										name: "Lval",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 223, col: 15, offset: 7198},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 223, col: 18, offset: 7201},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 223, col: 22, offset: 7205},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 223, col: 25, offset: 7208},
									label: "reducer",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 33, offset: 7216},
										name: "Reducer",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 226, col: 5, offset: 7326},
						run: (*parser).callonReducerAssignment11,
						expr: &labeledExpr{
							pos:   position{line: 226, col: 5, offset: 7326},
							label: "reducer",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 13, offset: 7334},
								name: "Reducer",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducer",
			pos:  position{line: 230, col: 1, offset: 7440},
			expr: &actionExpr{
				pos: position{line: 231, col: 5, offset: 7452},
				run: (*parser).callonReducer1,
				expr: &seqExpr{
					pos: position{line: 231, col: 5, offset: 7452},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 231, col: 5, offset: 7452},
							expr: &choiceExpr{
								pos: position{line: 231, col: 7, offset: 7454},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 231, col: 7, offset: 7454},
										val:        "not",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 231, col: 13, offset: 7460},
										val:        "len",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 231, col: 20, offset: 7467},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 231, col: 23, offset: 7470},
								name: "IdentifierName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 231, col: 38, offset: 7485},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 231, col: 41, offset: 7488},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 231, col: 45, offset: 7492},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 231, col: 48, offset: 7495},
							label: "expr",
							expr: &zeroOrOneExpr{
								pos: position{line: 231, col: 53, offset: 7500},
								expr: &ruleRefExpr{
									pos:  position{line: 231, col: 53, offset: 7500},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 231, col: 60, offset: 7507},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 231, col: 63, offset: 7510},
							val:        ")",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 231, col: 67, offset: 7514},
							label: "where",
							expr: &zeroOrOneExpr{
								pos: position{line: 231, col: 73, offset: 7520},
								expr: &ruleRefExpr{
									pos:  position{line: 231, col: 73, offset: 7520},
									name: "WhereClause",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WhereClause",
			pos:  position{line: 239, col: 1, offset: 7716},
			expr: &actionExpr{
				pos: position{line: 239, col: 15, offset: 7730},
				run: (*parser).callonWhereClause1,
				expr: &seqExpr{
					pos: position{line: 239, col: 15, offset: 7730},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 239, col: 15, offset: 7730},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 239, col: 17, offset: 7732},
							val:        "where",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 25, offset: 7740},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 239, col: 27, offset: 7742},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 32, offset: 7747},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Reducers",
			pos:  position{line: 241, col: 1, offset: 7774},
			expr: &actionExpr{
				pos: position{line: 242, col: 5, offset: 7787},
				run: (*parser).callonReducers1,
				expr: &seqExpr{
					pos: position{line: 242, col: 5, offset: 7787},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 242, col: 5, offset: 7787},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 11, offset: 7793},
								name: "ReducerAssignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 242, col: 29, offset: 7811},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 242, col: 34, offset: 7816},
								expr: &seqExpr{
									pos: position{line: 242, col: 35, offset: 7817},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 242, col: 35, offset: 7817},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 242, col: 38, offset: 7820},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 242, col: 42, offset: 7824},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 242, col: 45, offset: 7827},
											name: "ReducerAssignment",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedProc",
			pos:  position{line: 250, col: 1, offset: 8032},
			expr: &choiceExpr{
				pos: position{line: 251, col: 5, offset: 8046},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 251, col: 5, offset: 8046},
						name: "SortProc",
					},
					&ruleRefExpr{
						pos:  position{line: 252, col: 5, offset: 8059},
						name: "TopProc",
					},
					&ruleRefExpr{
						pos:  position{line: 253, col: 5, offset: 8071},
						name: "CutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 254, col: 5, offset: 8083},
						name: "PickProc",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 5, offset: 8096},
						name: "DropProc",
					},
					&ruleRefExpr{
						pos:  position{line: 256, col: 5, offset: 8109},
						name: "HeadProc",
					},
					&ruleRefExpr{
						pos:  position{line: 257, col: 5, offset: 8122},
						name: "TailProc",
					},
					&ruleRefExpr{
						pos:  position{line: 258, col: 5, offset: 8135},
						name: "FilterProc",
					},
					&ruleRefExpr{
						pos:  position{line: 259, col: 5, offset: 8150},
						name: "UniqProc",
					},
					&ruleRefExpr{
						pos:  position{line: 260, col: 5, offset: 8163},
						name: "PutProc",
					},
					&ruleRefExpr{
						pos:  position{line: 261, col: 5, offset: 8175},
						name: "RenameProc",
					},
					&ruleRefExpr{
						pos:  position{line: 262, col: 5, offset: 8190},
						name: "FuseProc",
					},
					&ruleRefExpr{
						pos:  position{line: 263, col: 5, offset: 8203},
						name: "JoinProc",
					},
				},
			},
		},
		{
			name: "SortProc",
			pos:  position{line: 265, col: 1, offset: 8213},
			expr: &actionExpr{
				pos: position{line: 266, col: 5, offset: 8226},
				run: (*parser).callonSortProc1,
				expr: &seqExpr{
					pos: position{line: 266, col: 5, offset: 8226},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 266, col: 5, offset: 8226},
							val:        "sort",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 266, col: 13, offset: 8234},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 18, offset: 8239},
								name: "SortArgs",
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 27, offset: 8248},
							label: "list",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 32, offset: 8253},
								expr: &actionExpr{
									pos: position{line: 266, col: 33, offset: 8254},
									run: (*parser).callonSortProc8,
									expr: &seqExpr{
										pos: position{line: 266, col: 33, offset: 8254},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 266, col: 33, offset: 8254},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 266, col: 35, offset: 8256},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 266, col: 37, offset: 8258},
													name: "Exprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArgs",
			pos:  position{line: 280, col: 1, offset: 8677},
			expr: &actionExpr{
				pos: position{line: 280, col: 12, offset: 8688},
				run: (*parser).callonSortArgs1,
				expr: &labeledExpr{
					pos:   position{line: 280, col: 12, offset: 8688},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 280, col: 17, offset: 8693},
						expr: &actionExpr{
							pos: position{line: 280, col: 18, offset: 8694},
							run: (*parser).callonSortArgs4,
							expr: &seqExpr{
								pos: position{line: 280, col: 18, offset: 8694},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 280, col: 18, offset: 8694},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 280, col: 20, offset: 8696},
										label: "a",
										expr: &ruleRefExpr{
											pos:  position{line: 280, col: 22, offset: 8698},
											name: "SortArg",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SortArg",
			pos:  position{line: 282, col: 1, offset: 8754},
			expr: &choiceExpr{
				pos: position{line: 283, col: 5, offset: 8766},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 283, col: 5, offset: 8766},
						run: (*parser).callonSortArg2,
						expr: &litMatcher{
							pos:        position{line: 283, col: 5, offset: 8766},
							val:        "-r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 284, col: 5, offset: 8841},
						run: (*parser).callonSortArg4,
						expr: &seqExpr{
							pos: position{line: 284, col: 5, offset: 8841},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 284, col: 5, offset: 8841},
									val:        "-nulls",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 284, col: 14, offset: 8850},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 284, col: 16, offset: 8852},
									label: "where",
									expr: &actionExpr{
										pos: position{line: 284, col: 23, offset: 8859},
										run: (*parser).callonSortArg9,
										expr: &choiceExpr{
											pos: position{line: 284, col: 24, offset: 8860},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 284, col: 24, offset: 8860},
													val:        "first",
													ignoreCase: false,
												},
												&litMatcher{
													pos:        position{line: 284, col: 34, offset: 8870},
													val:        "last",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TopProc",
			pos:  position{line: 286, col: 1, offset: 8984},
			expr: &actionExpr{
				pos: position{line: 287, col: 5, offset: 8996},
				run: (*parser).callonTopProc1,
				expr: &seqExpr{
					pos: position{line: 287, col: 5, offset: 8996},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 287, col: 5, offset: 8996},
							val:        "top",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 287, col: 12, offset: 9003},
							label: "limit",
							expr: &zeroOrOneExpr{
								pos: position{line: 287, col: 18, offset: 9009},
								expr: &actionExpr{
									pos: position{line: 287, col: 19, offset: 9010},
									run: (*parser).callonTopProc6,
									expr: &seqExpr{
										pos: position{line: 287, col: 19, offset: 9010},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 287, col: 19, offset: 9010},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 287, col: 21, offset: 9012},
												label: "n",
												expr: &ruleRefExpr{
													pos:  position{line: 287, col: 23, offset: 9014},
													name: "UInt",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 287, col: 47, offset: 9038},
							label: "flush",
							expr: &zeroOrOneExpr{
								pos: position{line: 287, col: 53, offset: 9044},
								expr: &seqExpr{
									pos: position{line: 287, col: 54, offset: 9045},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 287, col: 54, offset: 9045},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 287, col: 56, offset: 9047},
											val:        "-flush",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 287, col: 67, offset: 9058},
							label: "fields",
							expr: &zeroOrOneExpr{
								pos: position{line: 287, col: 74, offset: 9065},
								expr: &actionExpr{
									pos: position{line: 287, col: 75, offset: 9066},
									run: (*parser).callonTopProc18,
									expr: &seqExpr{
										pos: position{line: 287, col: 75, offset: 9066},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 287, col: 75, offset: 9066},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 287, col: 77, offset: 9068},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 287, col: 79, offset: 9070},
													name: "FieldExprs",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CutProc",
			pos:  position{line: 301, col: 1, offset: 9421},
			expr: &actionExpr{
				pos: position{line: 302, col: 5, offset: 9433},
				run: (*parser).callonCutProc1,
				expr: &seqExpr{
					pos: position{line: 302, col: 5, offset: 9433},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 302, col: 5, offset: 9433},
							val:        "cut",
							ignoreCase: true,
						},
						&labeledExpr{
							pos:   position{line: 302, col: 12, offset: 9440},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 17, offset: 9445},
								name: "CutArgs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 25, offset: 9453},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 302, col: 27, offset: 9455},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 35, offset: 9463},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "CutArgs",
			pos:  position{line: 311, col: 1, offset: 9732},
			expr: &actionExpr{
				pos: position{line: 312, col: 5, offset: 9744},
				run: (*parser).callonCutArgs1,
				expr: &labeledExpr{
					pos:   position{line: 312, col: 5, offset: 9744},
					label: "args",
					expr: &zeroOrMoreExpr{
						pos: position{line: 312, col: 10, offset: 9749},
						expr: &actionExpr{
							pos: position{line: 312, col: 11, offset: 9750},
							run: (*parser).callonCutArgs4,
							expr: &seqExpr{
								pos: position{line: 312, col: 11, offset: 9750},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 312, col: 11, offset: 9750},
										name: "_",
									},
									&litMatcher{
										pos:        position{line: 312, col: 13, offset: 9752},
										val:        "-c",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PickProc",
			pos:  position{line: 316, col: 1, offset: 9864},
			expr: &actionExpr{
				pos: position{line: 317, col: 5, offset: 9877},
				run: (*parser).callonPickProc1,
				expr: &seqExpr{
					pos: position{line: 317, col: 5, offset: 9877},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 317, col: 5, offset: 9877},
							val:        "pick",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 317, col: 13, offset: 9885},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 317, col: 15, offset: 9887},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 317, col: 23, offset: 9895},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "DropProc",
			pos:  position{line: 321, col: 1, offset: 9998},
			expr: &actionExpr{
				pos: position{line: 322, col: 5, offset: 10011},
				run: (*parser).callonDropProc1,
				expr: &seqExpr{
					pos: position{line: 322, col: 5, offset: 10011},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 322, col: 5, offset: 10011},
							val:        "drop",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 13, offset: 10019},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 322, col: 15, offset: 10021},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 23, offset: 10029},
								name: "FieldExprs",
							},
						},
					},
				},
			},
		},
		{
			name: "HeadProc",
			pos:  position{line: 326, col: 1, offset: 10127},
			expr: &choiceExpr{
				pos: position{line: 327, col: 5, offset: 10140},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 327, col: 5, offset: 10140},
						run: (*parser).callonHeadProc2,
						expr: &seqExpr{
							pos: position{line: 327, col: 5, offset: 10140},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 327, col: 5, offset: 10140},
									val:        "head",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 327, col: 13, offset: 10148},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 327, col: 15, offset: 10150},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 327, col: 21, offset: 10156},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 328, col: 5, offset: 10238},
						run: (*parser).callonHeadProc8,
						expr: &litMatcher{
							pos:        position{line: 328, col: 5, offset: 10238},
							val:        "head",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "TailProc",
			pos:  position{line: 330, col: 1, offset: 10316},
			expr: &choiceExpr{
				pos: position{line: 331, col: 5, offset: 10329},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 331, col: 5, offset: 10329},
						run: (*parser).callonTailProc2,
						expr: &seqExpr{
							pos: position{line: 331, col: 5, offset: 10329},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 331, col: 5, offset: 10329},
									val:        "tail",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 331, col: 13, offset: 10337},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 331, col: 15, offset: 10339},
									label: "count",
									expr: &ruleRefExpr{
										pos:  position{line: 331, col: 21, offset: 10345},
										name: "UInt",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 332, col: 5, offset: 10427},
						run: (*parser).callonTailProc8,
						expr: &litMatcher{
							pos:        position{line: 332, col: 5, offset: 10427},
							val:        "tail",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "FilterProc",
			pos:  position{line: 334, col: 1, offset: 10505},
			expr: &actionExpr{
				pos: position{line: 335, col: 5, offset: 10520},
				run: (*parser).callonFilterProc1,
				expr: &seqExpr{
					pos: position{line: 335, col: 5, offset: 10520},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 335, col: 5, offset: 10520},
							val:        "filter",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 335, col: 15, offset: 10530},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 335, col: 17, offset: 10532},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 335, col: 22, offset: 10537},
								name: "SearchExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "UniqProc",
			pos:  position{line: 339, col: 1, offset: 10634},
			expr: &choiceExpr{
				pos: position{line: 340, col: 5, offset: 10647},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 340, col: 5, offset: 10647},
						run: (*parser).callonUniqProc2,
						expr: &seqExpr{
							pos: position{line: 340, col: 5, offset: 10647},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 340, col: 5, offset: 10647},
									val:        "uniq",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 340, col: 13, offset: 10655},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 340, col: 15, offset: 10657},
									val:        "-c",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 343, col: 5, offset: 10748},
						run: (*parser).callonUniqProc7,
						expr: &litMatcher{
							pos:        position{line: 343, col: 5, offset: 10748},
							val:        "uniq",
							ignoreCase: true,
						},
					},
				},
			},
		},
		{
			name: "PutProc",
			pos:  position{line: 347, col: 1, offset: 10840},
			expr: &actionExpr{
				pos: position{line: 348, col: 5, offset: 10852},
				run: (*parser).callonPutProc1,
				expr: &seqExpr{
					pos: position{line: 348, col: 5, offset: 10852},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 348, col: 5, offset: 10852},
							val:        "put",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 348, col: 12, offset: 10859},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 348, col: 14, offset: 10861},
							label: "columns",
							expr: &ruleRefExpr{
								pos:  position{line: 348, col: 22, offset: 10869},
								name: "FlexAssignments",
							},
						},
					},
				},
			},
		},
		{
			name: "RenameProc",
			pos:  position{line: 352, col: 1, offset: 10972},
			expr: &actionExpr{
				pos: position{line: 353, col: 5, offset: 10987},
				run: (*parser).callonRenameProc1,
				expr: &seqExpr{
					pos: position{line: 353, col: 5, offset: 10987},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 353, col: 5, offset: 10987},
							val:        "rename",
							ignoreCase: true,
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 15, offset: 10997},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 353, col: 17, offset: 10999},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 353, col: 23, offset: 11005},
								name: "Assignment",
							},
						},
						&labeledExpr{
							pos:   position{line: 353, col: 34, offset: 11016},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 353, col: 39, offset: 11021},
								expr: &actionExpr{
									pos: position{line: 353, col: 40, offset: 11022},
									run: (*parser).callonRenameProc9,
									expr: &seqExpr{
										pos: position{line: 353, col: 40, offset: 11022},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 353, col: 40, offset: 11022},
												name: "__",
											},
											&litMatcher{
												pos:        position{line: 353, col: 43, offset: 11025},
												val:        ",",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 353, col: 47, offset: 11029},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 353, col: 50, offset: 11032},
												label: "cl",
												expr: &ruleRefExpr{
													pos:  position{line: 353, col: 53, offset: 11035},
													name: "Assignment",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FuseProc",
			pos:  position{line: 357, col: 1, offset: 11205},
			expr: &actionExpr{
				pos: position{line: 358, col: 5, offset: 11218},
				run: (*parser).callonFuseProc1,
				expr: &litMatcher{
					pos:        position{line: 358, col: 5, offset: 11218},
					val:        "fuse",
					ignoreCase: true,
				},
			},
		},
		{
			name: "JoinProc",
			pos:  position{line: 362, col: 1, offset: 11294},
			expr: &choiceExpr{
				pos: position{line: 363, col: 5, offset: 11307},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 363, col: 5, offset: 11307},
						run: (*parser).callonJoinProc2,
						expr: &seqExpr{
							pos: position{line: 363, col: 5, offset: 11307},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 363, col: 5, offset: 11307},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 363, col: 13, offset: 11315},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 363, col: 15, offset: 11317},
									label: "leftKey",
									expr: &ruleRefExpr{
										pos:  position{line: 363, col: 23, offset: 11325},
										name: "JoinKey",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 363, col: 31, offset: 11333},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 363, col: 34, offset: 11336},
									val:        "=",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 363, col: 38, offset: 11340},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 363, col: 41, offset: 11343},
									label: "rightKey",
									expr: &ruleRefExpr{
										pos:  position{line: 363, col: 50, offset: 11352},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 363, col: 58, offset: 11360},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 363, col: 66, offset: 11368},
										expr: &seqExpr{
											pos: position{line: 363, col: 67, offset: 11369},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 363, col: 67, offset: 11369},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 363, col: 69, offset: 11371},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 370, col: 5, offset: 11629},
						run: (*parser).callonJoinProc18,
						expr: &seqExpr{
							pos: position{line: 370, col: 5, offset: 11629},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 370, col: 5, offset: 11629},
									val:        "join",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 370, col: 13, offset: 11637},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 370, col: 15, offset: 11639},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 370, col: 19, offset: 11643},
										name: "JoinKey",
									},
								},
								&labeledExpr{
									pos:   position{line: 370, col: 27, offset: 11651},
									label: "columns",
									expr: &zeroOrOneExpr{
										pos: position{line: 370, col: 35, offset: 11659},
										expr: &seqExpr{
											pos: position{line: 370, col: 36, offset: 11660},
											exprs: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 370, col: 36, offset: 11660},
													name: "_",
												},
												&ruleRefExpr{
													pos:  position{line: 370, col: 38, offset: 11662},
													name: "FlexAssignments",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "JoinKey",
			pos:  position{line: 378, col: 1, offset: 11908},
			expr: &choiceExpr{
				pos: position{line: 379, col: 5, offset: 11920},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 379, col: 5, offset: 11920},
						name: "Lval",
					},
					&actionExpr{
						pos: position{line: 380, col: 5, offset: 11929},
						run: (*parser).callonJoinKey3,
						expr: &seqExpr{
							pos: position{line: 380, col: 5, offset: 11929},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 380, col: 5, offset: 11929},
									val:        "(",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 380, col: 9, offset: 11933},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 380, col: 14, offset: 11938},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 380, col: 19, offset: 11943},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RootField",
			pos:  position{line: 382, col: 1, offset: 11969},
			expr: &choiceExpr{
				pos: position{line: 383, col: 5, offset: 11983},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 383, col: 5, offset: 11983},
						run: (*parser).callonRootField2,
						expr: &seqExpr{
							pos: position{line: 383, col: 5, offset: 11983},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 383, col: 5, offset: 11983},
									expr: &litMatcher{
										pos:        position{line: 383, col: 5, offset: 11983},
										val:        ".",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 383, col: 10, offset: 11988},
									expr: &choiceExpr{
										pos: position{line: 383, col: 12, offset: 11990},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 383, col: 12, offset: 11990},
												name: "BooleanLiteral",
											},
											&ruleRefExpr{
												pos:  position{line: 383, col: 29, offset: 12007},
												name: "NullLiteral",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 383, col: 42, offset: 12020},
									label: "field",
									expr: &ruleRefExpr{
										pos:  position{line: 383, col: 48, offset: 12026},
										name: "Identifier",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 384, col: 5, offset: 12179},
						run: (*parser).callonRootField12,
						expr: &seqExpr{
							pos: position{line: 384, col: 5, offset: 12179},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 384, col: 5, offset: 12179},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 384, col: 9, offset: 12183},
									expr: &ruleRefExpr{
										pos:  position{line: 384, col: 11, offset: 12185},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Lval",
			pos:  position{line: 386, col: 1, offset: 12258},
			expr: &ruleRefExpr{
				pos:  position{line: 386, col: 8, offset: 12265},
				name: "DerefExpr",
			},
		},
		{
			name: "FieldExpr",
			pos:  position{line: 388, col: 1, offset: 12276},
			expr: &ruleRefExpr{
				pos:  position{line: 388, col: 13, offset: 12288},
				name: "Lval",
			},
		},
		{
			name: "FieldExprs",
			pos:  position{line: 390, col: 1, offset: 12294},
			expr: &actionExpr{
				pos: position{line: 391, col: 5, offset: 12309},
				run: (*parser).callonFieldExprs1,
				expr: &seqExpr{
					pos: position{line: 391, col: 5, offset: 12309},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 391, col: 5, offset: 12309},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 11, offset: 12315},
								name: "FieldExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 391, col: 21, offset: 12325},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 391, col: 26, offset: 12330},
								expr: &seqExpr{
									pos: position{line: 391, col: 27, offset: 12331},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 391, col: 27, offset: 12331},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 391, col: 30, offset: 12334},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 391, col: 34, offset: 12338},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 391, col: 37, offset: 12341},
											name: "FieldExpr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Exprs",
			pos:  position{line: 401, col: 1, offset: 12540},
			expr: &actionExpr{
				pos: position{line: 402, col: 5, offset: 12550},
				run: (*parser).callonExprs1,
				expr: &seqExpr{
					pos: position{line: 402, col: 5, offset: 12550},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 402, col: 5, offset: 12550},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 11, offset: 12556},
								name: "Expr",
							},
						},
						&labeledExpr{
							pos:   position{line: 402, col: 16, offset: 12561},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 402, col: 21, offset: 12566},
								expr: &seqExpr{
									pos: position{line: 402, col: 22, offset: 12567},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 402, col: 22, offset: 12567},
											name: "__",
										},
										&litMatcher{
											pos:        position{line: 402, col: 25, offset: 12570},
											val:        ",",
											ignoreCase: false,
										},
										&ruleRefExpr{
											pos:  position{line: 402, col: 29, offset: 12574},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 402, col: 32, offset: 12577},
											name: "Expr",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Assignment",
			pos:  position{line: 412, col: 1, offset: 12771},
			expr: &actionExpr{
				pos: position{line: 413, col: 5, offset: 12786},
				run: (*parser).callonAssignment1,
				expr: &seqExpr{
					pos: position{line: 413, col: 5, offset: 12786},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 413, col: 5, offset: 12786},
							label: "lhs",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 9, offset: 12790},
								name: "Lval",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 413, col: 14, offset: 12795},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 413, col: 17, offset: 12798},
							val:        "=",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 413, col: 21, offset: 12802},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 413, col: 24, offset: 12805},
							label: "rhs",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 28, offset: 12809},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 415, col: 1, offset: 12898},
			expr: &ruleRefExpr{
				pos:  position{line: 415, col: 8, offset: 12905},
				name: "ConditionalExpr",
			},
		},
		{
			name: "ConditionalExpr",
			pos:  position{line: 417, col: 1, offset: 12922},
			expr: &choiceExpr{
				pos: position{line: 418, col: 5, offset: 12942},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 418, col: 5, offset: 12942},
						run: (*parser).callonConditionalExpr2,
						expr: &seqExpr{
							pos: position{line: 418, col: 5, offset: 12942},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 418, col: 5, offset: 12942},
									label: "condition",
									expr: &ruleRefExpr{
										pos:  position{line: 418, col: 15, offset: 12952},
										name: "LogicalOrExpr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 418, col: 29, offset: 12966},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 418, col: 32, offset: 12969},
									val:        "?",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 418, col: 36, offset: 12973},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 418, col: 39, offset: 12976},
									label: "thenClause",
									expr: &ruleRefExpr{
										pos:  position{line: 418, col: 50, offset: 12987},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 418, col: 55, offset: 12992},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 418, col: 58, offset: 12995},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 418, col: 62, offset: 12999},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 418, col: 65, offset: 13002},
									label: "elseClause",
									expr: &ruleRefExpr{
										pos:  position{line: 418, col: 76, offset: 13013},
										name: "Expr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 421, col: 5, offset: 13160},
						name: "LogicalOrExpr",
					},
				},
			},
		},
		{
			name: "LogicalOrExpr",
			pos:  position{line: 423, col: 1, offset: 13175},
			expr: &actionExpr{
				pos: position{line: 424, col: 5, offset: 13193},
				run: (*parser).callonLogicalOrExpr1,
				expr: &seqExpr{
					pos: position{line: 424, col: 5, offset: 13193},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 424, col: 5, offset: 13193},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 11, offset: 13199},
								name: "LogicalAndExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 425, col: 5, offset: 13218},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 425, col: 10, offset: 13223},
								expr: &actionExpr{
									pos: position{line: 425, col: 11, offset: 13224},
									run: (*parser).callonLogicalOrExpr7,
									expr: &seqExpr{
										pos: position{line: 425, col: 11, offset: 13224},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 425, col: 11, offset: 13224},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 425, col: 14, offset: 13227},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 425, col: 17, offset: 13230},
													name: "OrToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 425, col: 25, offset: 13238},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 425, col: 28, offset: 13241},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 425, col: 33, offset: 13246},
													name: "LogicalAndExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LogicalAndExpr",
			pos:  position{line: 429, col: 1, offset: 13364},
			expr: &actionExpr{
				pos: position{line: 430, col: 5, offset: 13383},
				run: (*parser).callonLogicalAndExpr1,
				expr: &seqExpr{
					pos: position{line: 430, col: 5, offset: 13383},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 430, col: 5, offset: 13383},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 11, offset: 13389},
								name: "EqualityCompareExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 431, col: 5, offset: 13413},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 431, col: 10, offset: 13418},
								expr: &actionExpr{
									pos: position{line: 431, col: 11, offset: 13419},
									run: (*parser).callonLogicalAndExpr7,
									expr: &seqExpr{
										pos: position{line: 431, col: 11, offset: 13419},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 431, col: 11, offset: 13419},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 431, col: 14, offset: 13422},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 431, col: 17, offset: 13425},
													name: "AndToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 431, col: 26, offset: 13434},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 431, col: 29, offset: 13437},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 431, col: 34, offset: 13442},
													name: "EqualityCompareExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityCompareExpr",
			pos:  position{line: 435, col: 1, offset: 13565},
			expr: &actionExpr{
				pos: position{line: 436, col: 5, offset: 13589},
				run: (*parser).callonEqualityCompareExpr1,
				expr: &seqExpr{
					pos: position{line: 436, col: 5, offset: 13589},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 436, col: 5, offset: 13589},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 436, col: 11, offset: 13595},
								name: "RelativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 437, col: 5, offset: 13612},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 437, col: 10, offset: 13617},
								expr: &actionExpr{
									pos: position{line: 437, col: 11, offset: 13618},
									run: (*parser).callonEqualityCompareExpr7,
									expr: &seqExpr{
										pos: position{line: 437, col: 11, offset: 13618},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 437, col: 11, offset: 13618},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 437, col: 14, offset: 13621},
												label: "comp",
												expr: &ruleRefExpr{
													pos:  position{line: 437, col: 19, offset: 13626},
													name: "EqualityComparator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 437, col: 38, offset: 13645},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 437, col: 41, offset: 13648},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 437, col: 46, offset: 13653},
													name: "RelativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityOperator",
			pos:  position{line: 441, col: 1, offset: 13771},
			expr: &actionExpr{
				pos: position{line: 441, col: 20, offset: 13790},
				run: (*parser).callonEqualityOperator1,
				expr: &choiceExpr{
					pos: position{line: 441, col: 21, offset: 13791},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 441, col: 21, offset: 13791},
							val:        "=~",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 441, col: 28, offset: 13798},
							val:        "!~",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 441, col: 35, offset: 13805},
							val:        "=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 441, col: 41, offset: 13811},
							val:        "!=",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "EqualityComparator",
			pos:  position{line: 443, col: 1, offset: 13849},
			expr: &choiceExpr{
				pos: position{line: 444, col: 5, offset: 13872},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 444, col: 5, offset: 13872},
						name: "EqualityOperator",
					},
					&actionExpr{
						pos: position{line: 445, col: 5, offset: 13893},
						run: (*parser).callonEqualityComparator3,
						expr: &litMatcher{
							pos:        position{line: 445, col: 5, offset: 13893},
							val:        "in",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RelativeExpr",
			pos:  position{line: 447, col: 1, offset: 13930},
			expr: &actionExpr{
				pos: position{line: 448, col: 5, offset: 13947},
				run: (*parser).callonRelativeExpr1,
				expr: &seqExpr{
					pos: position{line: 448, col: 5, offset: 13947},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 448, col: 5, offset: 13947},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 448, col: 11, offset: 13953},
								name: "AdditiveExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 449, col: 5, offset: 13970},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 449, col: 10, offset: 13975},
								expr: &actionExpr{
									pos: position{line: 449, col: 11, offset: 13976},
									run: (*parser).callonRelativeExpr7,
									expr: &seqExpr{
										pos: position{line: 449, col: 11, offset: 13976},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 449, col: 11, offset: 13976},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 449, col: 14, offset: 13979},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 449, col: 17, offset: 13982},
													name: "RelativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 449, col: 34, offset: 13999},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 449, col: 37, offset: 14002},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 449, col: 42, offset: 14007},
													name: "AdditiveExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeOperator",
			pos:  position{line: 453, col: 1, offset: 14123},
			expr: &actionExpr{
				pos: position{line: 453, col: 20, offset: 14142},
				run: (*parser).callonRelativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 453, col: 21, offset: 14143},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 453, col: 21, offset: 14143},
							val:        "<=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 453, col: 28, offset: 14150},
							val:        "<",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 453, col: 34, offset: 14156},
							val:        ">=",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 453, col: 41, offset: 14163},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 455, col: 1, offset: 14200},
			expr: &actionExpr{
				pos: position{line: 456, col: 5, offset: 14217},
				run: (*parser).callonAdditiveExpr1,
				expr: &seqExpr{
					pos: position{line: 456, col: 5, offset: 14217},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 456, col: 5, offset: 14217},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 456, col: 11, offset: 14223},
								name: "MultiplicativeExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 457, col: 5, offset: 14246},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 457, col: 10, offset: 14251},
								expr: &actionExpr{
									pos: position{line: 457, col: 11, offset: 14252},
									run: (*parser).callonAdditiveExpr7,
									expr: &seqExpr{
										pos: position{line: 457, col: 11, offset: 14252},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 457, col: 11, offset: 14252},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 457, col: 14, offset: 14255},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 457, col: 17, offset: 14258},
													name: "AdditiveOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 457, col: 34, offset: 14275},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 457, col: 37, offset: 14278},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 457, col: 42, offset: 14283},
													name: "MultiplicativeExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AdditiveOperator",
			pos:  position{line: 461, col: 1, offset: 14405},
			expr: &actionExpr{
				pos: position{line: 461, col: 20, offset: 14424},
				run: (*parser).callonAdditiveOperator1,
				expr: &choiceExpr{
					pos: position{line: 461, col: 21, offset: 14425},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 461, col: 21, offset: 14425},
							val:        "+",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 461, col: 27, offset: 14431},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 463, col: 1, offset: 14468},
			expr: &actionExpr{
				pos: position{line: 464, col: 5, offset: 14491},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 464, col: 5, offset: 14491},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 464, col: 5, offset: 14491},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 11, offset: 14497},
								name: "NotExpr",
							},
						},
						&labeledExpr{
							pos:   position{line: 465, col: 5, offset: 14509},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 465, col: 10, offset: 14514},
								expr: &actionExpr{
									pos: position{line: 465, col: 11, offset: 14515},
									run: (*parser).callonMultiplicativeExpr7,
									expr: &seqExpr{
										pos: position{line: 465, col: 11, offset: 14515},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 465, col: 11, offset: 14515},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 465, col: 14, offset: 14518},
												label: "op",
												expr: &ruleRefExpr{
													pos:  position{line: 465, col: 17, offset: 14521},
													name: "MultiplicativeOperator",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 465, col: 40, offset: 14544},
												name: "__",
											},
											&labeledExpr{
												pos:   position{line: 465, col: 43, offset: 14547},
												label: "expr",
												expr: &ruleRefExpr{
													pos:  position{line: 465, col: 48, offset: 14552},
													name: "NotExpr",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiplicativeOperator",
			pos:  position{line: 469, col: 1, offset: 14663},
			expr: &actionExpr{
				pos: position{line: 469, col: 26, offset: 14688},
				run: (*parser).callonMultiplicativeOperator1,
				expr: &choiceExpr{
					pos: position{line: 469, col: 27, offset: 14689},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 469, col: 27, offset: 14689},
							val:        "*",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 469, col: 33, offset: 14695},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NotExpr",
			pos:  position{line: 471, col: 1, offset: 14732},
			expr: &choiceExpr{
				pos: position{line: 472, col: 5, offset: 14744},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 472, col: 5, offset: 14744},
						run: (*parser).callonNotExpr2,
						expr: &seqExpr{
							pos: position{line: 472, col: 5, offset: 14744},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 472, col: 5, offset: 14744},
									val:        "!",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 472, col: 9, offset: 14748},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 472, col: 12, offset: 14751},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 472, col: 14, offset: 14753},
										name: "NotExpr",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 475, col: 5, offset: 14866},
						name: "CastExpr",
					},
				},
			},
		},
		{
			name: "CastExpr",
			pos:  position{line: 477, col: 1, offset: 14876},
			expr: &choiceExpr{
				pos: position{line: 478, col: 5, offset: 14889},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 478, col: 5, offset: 14889},
						run: (*parser).callonCastExpr2,
						expr: &seqExpr{
							pos: position{line: 478, col: 5, offset: 14889},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 478, col: 5, offset: 14889},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 478, col: 7, offset: 14891},
										name: "FuncExpr",
									},
								},
								&labeledExpr{
									pos:   position{line: 478, col: 16, offset: 14900},
									label: "typ",
									expr: &actionExpr{
										pos: position{line: 478, col: 22, offset: 14906},
										run: (*parser).callonCastExpr7,
										expr: &seqExpr{
											pos: position{line: 478, col: 22, offset: 14906},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 478, col: 22, offset: 14906},
													val:        ":",
													ignoreCase: false,
												},
												&labeledExpr{
													pos:   position{line: 478, col: 26, offset: 14910},
													label: "typ",
													expr: &ruleRefExpr{
														pos:  position{line: 478, col: 30, offset: 14914},
														name: "PrimitiveType",
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 481, col: 5, offset: 15044},
						name: "FuncExpr",
					},
				},
			},
		},
		{
			name: "PrimitiveType",
			pos:  position{line: 484, col: 1, offset: 15055},
			expr: &actionExpr{
				pos: position{line: 485, col: 5, offset: 15073},
				run: (*parser).callonPrimitiveType1,
				expr: &choiceExpr{
					pos: position{line: 485, col: 9, offset: 15077},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 485, col: 9, offset: 15077},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 485, col: 19, offset: 15087},
							val:        "uint8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 485, col: 29, offset: 15097},
							val:        "uint16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 485, col: 40, offset: 15108},
							val:        "uint32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 485, col: 51, offset: 15119},
							val:        "uint64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 486, col: 9, offset: 15136},
							val:        "int8",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 486, col: 18, offset: 15145},
							val:        "int16",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 486, col: 28, offset: 15155},
							val:        "int32",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 486, col: 38, offset: 15165},
							val:        "int64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 487, col: 9, offset: 15181},
							val:        "duration",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 487, col: 22, offset: 15194},
							val:        "time",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 488, col: 9, offset: 15209},
							val:        "float64",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 489, col: 9, offset: 15227},
							val:        "bool",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 489, col: 18, offset: 15236},
							val:        "bytes",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 489, col: 28, offset: 15246},
							val:        "string",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 489, col: 39, offset: 15257},
							val:        "bstring",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 490, col: 9, offset: 15275},
							val:        "ip",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 490, col: 16, offset: 15282},
							val:        "net",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 491, col: 9, offset: 15296},
							val:        "type",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 491, col: 18, offset: 15305},
							val:        "error",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 491, col: 28, offset: 15315},
							val:        "null",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FuncExpr",
			pos:  position{line: 493, col: 1, offset: 15356},
			expr: &choiceExpr{
				pos: position{line: 494, col: 5, offset: 15369},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 494, col: 5, offset: 15369},
						run: (*parser).callonFuncExpr2,
						expr: &seqExpr{
							pos: position{line: 494, col: 5, offset: 15369},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 494, col: 5, offset: 15369},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 494, col: 11, offset: 15375},
										name: "Function",
									},
								},
								&labeledExpr{
									pos:   position{line: 494, col: 20, offset: 15384},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 494, col: 25, offset: 15389},
										expr: &ruleRefExpr{
											pos:  position{line: 494, col: 26, offset: 15390},
											name: "Deref",
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 497, col: 5, offset: 15461},
						name: "DerefExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 498, col: 5, offset: 15475},
						name: "Primary",
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 500, col: 1, offset: 15484},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 15497},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 501, col: 5, offset: 15497},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 501, col: 5, offset: 15497},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 8, offset: 15500},
								name: "DeprecatedName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 501, col: 23, offset: 15515},
							name: "__",
						},
						&litMatcher{
							pos:        position{line: 501, col: 26, offset: 15518},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 501, col: 30, offset: 15522},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 35, offset: 15527},
								name: "ArgumentList",
							},
						},
						&litMatcher{
							pos:        position{line: 501, col: 48, offset: 15540},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DeprecatedName",
			pos:  position{line: 507, col: 1, offset: 15772},
			expr: &actionExpr{
				pos: position{line: 507, col: 18, offset: 15789},
				run: (*parser).callonDeprecatedName1,
				expr: &seqExpr{
					pos: position{line: 507, col: 18, offset: 15789},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 507, col: 18, offset: 15789},
							name: "IdentifierStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 507, col: 34, offset: 15805},
							expr: &choiceExpr{
								pos: position{line: 507, col: 35, offset: 15806},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 507, col: 35, offset: 15806},
										name: "IdentifierRest",
									},
									&litMatcher{
										pos:        position{line: 507, col: 52, offset: 15823},
										val:        ".",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ArgumentList",
			pos:  position{line: 509, col: 1, offset: 15861},
			expr: &choiceExpr{
				pos: position{line: 510, col: 5, offset: 15878},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 510, col: 5, offset: 15878},
						run: (*parser).callonArgumentList2,
						expr: &seqExpr{
							pos: position{line: 510, col: 5, offset: 15878},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 510, col: 5, offset: 15878},
									label: "first",
									expr: &ruleRefExpr{
										pos:  position{line: 510, col: 11, offset: 15884},
										name: "Expr",
									},
								},
								&labeledExpr{
									pos:   position{line: 510, col: 16, offset: 15889},
									label: "rest",
									expr: &zeroOrMoreExpr{
										pos: position{line: 510, col: 21, offset: 15894},
										expr: &actionExpr{
											pos: position{line: 510, col: 22, offset: 15895},
											run: (*parser).callonArgumentList8,
											expr: &seqExpr{
												pos: position{line: 510, col: 22, offset: 15895},
												exprs: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 510, col: 22, offset: 15895},
														name: "__",
													},
													&litMatcher{
														pos:        position{line: 510, col: 25, offset: 15898},
														val:        ",",
														ignoreCase: false,
													},
													&ruleRefExpr{
														pos:  position{line: 510, col: 29, offset: 15902},
														name: "__",
													},
													&labeledExpr{
														pos:   position{line: 510, col: 32, offset: 15905},
														label: "e",
														expr: &ruleRefExpr{
															pos:  position{line: 510, col: 34, offset: 15907},
															name: "Expr",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 513, col: 5, offset: 16019},
						run: (*parser).callonArgumentList15,
						expr: &ruleRefExpr{
							pos:  position{line: 513, col: 5, offset: 16019},
							name: "__",
						},
					},
				},
			},
		},
		{
			name: "DerefExpr",
			pos:  position{line: 515, col: 1, offset: 16055},
			expr: &actionExpr{
				pos: position{line: 516, col: 5, offset: 16069},
				run: (*parser).callonDerefExpr1,
				expr: &seqExpr{
					pos: position{line: 516, col: 5, offset: 16069},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 516, col: 5, offset: 16069},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 516, col: 11, offset: 16075},
								name: "RootField",
							},
						},
						&labeledExpr{
							pos:   position{line: 516, col: 21, offset: 16085},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 516, col: 26, offset: 16090},
								expr: &ruleRefExpr{
									pos:  position{line: 516, col: 27, offset: 16091},
									name: "Deref",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Deref",
			pos:  position{line: 520, col: 1, offset: 16159},
			expr: &choiceExpr{
				pos: position{line: 521, col: 5, offset: 16169},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 521, col: 5, offset: 16169},
						run: (*parser).callonDeref2,
						expr: &seqExpr{
							pos: position{line: 521, col: 5, offset: 16169},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 521, col: 5, offset: 16169},
									val:        "[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 521, col: 9, offset: 16173},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 521, col: 14, offset: 16178},
										name: "Expr",
									},
								},
								&litMatcher{
									pos:        position{line: 521, col: 19, offset: 16183},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 522, col: 5, offset: 16232},
						run: (*parser).callonDeref8,
						expr: &seqExpr{
							pos: position{line: 522, col: 5, offset: 16232},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 522, col: 5, offset: 16232},
									val:        ".",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 522, col: 9, offset: 16236},
									expr: &litMatcher{
										pos:        position{line: 522, col: 11, offset: 16238},
										val:        ".",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 522, col: 16, offset: 16243},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 522, col: 19, offset: 16246},
										name: "Identifier",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Primary",
			pos:  position{line: 524, col: 1, offset: 16297},
			expr: &choiceExpr{
				pos: position{line: 525, col: 5, offset: 16309},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 525, col: 5, offset: 16309},
						name: "StringLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 526, col: 5, offset: 16327},
						name: "RegexpLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 527, col: 5, offset: 16345},
						name: "SubnetLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 528, col: 5, offset: 16363},
						name: "AddressLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 529, col: 5, offset: 16382},
						name: "FloatLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 530, col: 5, offset: 16399},
						name: "IntegerLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 531, col: 5, offset: 16418},
						name: "BooleanLiteral",
					},
					&ruleRefExpr{
						pos:  position{line: 532, col: 5, offset: 16437},
						name: "NullLiteral",
					},
					&actionExpr{
						pos: position{line: 533, col: 5, offset: 16453},
						run: (*parser).callonPrimary10,
						expr: &seqExpr{
							pos: position{line: 533, col: 5, offset: 16453},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 533, col: 5, offset: 16453},
									val:        "(",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 533, col: 9, offset: 16457},
									name: "__",
								},
								&labeledExpr{
									pos:   position{line: 533, col: 12, offset: 16460},
									label: "expr",
									expr: &ruleRefExpr{
										pos:  position{line: 533, col: 17, offset: 16465},
										name: "Expr",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 533, col: 22, offset: 16470},
									name: "__",
								},
								&litMatcher{
									pos:        position{line: 533, col: 25, offset: 16473},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EqualityToken",
			pos:  position{line: 535, col: 1, offset: 16499},
			expr: &choiceExpr{
				pos: position{line: 536, col: 5, offset: 16517},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 536, col: 5, offset: 16517},
						name: "EqualityOperator",
					},
					&ruleRefExpr{
						pos:  position{line: 536, col: 24, offset: 16536},
						name: "RelativeOperator",
					},
				},
			},
		},
		{
			name: "AndToken",
			pos:  position{line: 538, col: 1, offset: 16554},
			expr: &actionExpr{
				pos: position{line: 538, col: 12, offset: 16565},
				run: (*parser).callonAndToken1,
				expr: &litMatcher{
					pos:        position{line: 538, col: 12, offset: 16565},
					val:        "and",
					ignoreCase: true,
				},
			},
		},
		{
			name: "OrToken",
			pos:  position{line: 539, col: 1, offset: 16603},
			expr: &actionExpr{
				pos: position{line: 539, col: 11, offset: 16613},
				run: (*parser).callonOrToken1,
				expr: &litMatcher{
					pos:        position{line: 539, col: 11, offset: 16613},
					val:        "or",
					ignoreCase: true,
				},
			},
		},
		{
			name: "InToken",
			pos:  position{line: 540, col: 1, offset: 16650},
			expr: &actionExpr{
				pos: position{line: 540, col: 11, offset: 16660},
				run: (*parser).callonInToken1,
				expr: &litMatcher{
					pos:        position{line: 540, col: 11, offset: 16660},
					val:        "in",
					ignoreCase: true,
				},
			},
		},
		{
			name: "NotToken",
			pos:  position{line: 541, col: 1, offset: 16697},
			expr: &actionExpr{
				pos: position{line: 541, col: 12, offset: 16708},
				run: (*parser).callonNotToken1,
				expr: &litMatcher{
					pos:        position{line: 541, col: 12, offset: 16708},
					val:        "not",
					ignoreCase: true,
				},
			},
		},
		{
			name: "IdentifierName",
			pos:  position{line: 543, col: 1, offset: 16747},
			expr: &actionExpr{
				pos: position{line: 543, col: 18, offset: 16764},
				run: (*parser).callonIdentifierName1,
				expr: &seqExpr{
					pos: position{line: 543, col: 18, offset: 16764},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 543, col: 18, offset: 16764},
							name: "IdentifierStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 543, col: 34, offset: 16780},
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 34, offset: 16780},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "IdentifierStart",
			pos:  position{line: 545, col: 1, offset: 16828},
			expr: &charClassMatcher{
				pos:        position{line: 545, col: 19, offset: 16846},
				val:        "[A-Za-z_$]",
				chars:      []rune{'_', '$'},
				ranges:     []rune{'A', 'Z', 'a', 'z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "IdentifierRest",
			pos:  position{line: 546, col: 1, offset: 16857},
			expr: &choiceExpr{
				pos: position{line: 546, col: 18, offset: 16874},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 546, col: 18, offset: 16874},
						name: "IdentifierStart",
					},
					&charClassMatcher{
						pos:        position{line: 546, col: 36, offset: 16892},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 548, col: 1, offset: 16899},
			expr: &actionExpr{
				pos: position{line: 549, col: 5, offset: 16914},
				run: (*parser).callonIdentifier1,
				expr: &seqExpr{
					pos: position{line: 549, col: 5, offset: 16914},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 549, col: 5, offset: 16914},
							name: "IdentifierStart",
						},
						&zeroOrMoreExpr{
							pos: position{line: 549, col: 21, offset: 16930},
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 21, offset: 16930},
								name: "IdentifierRest",
							},
						},
					},
				},
			},
		},
		{
			name: "Duration",
			pos:  position{line: 551, col: 1, offset: 17030},
			expr: &choiceExpr{
				pos: position{line: 552, col: 5, offset: 17043},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 552, col: 5, offset: 17043},
						name: "Seconds",
					},
					&ruleRefExpr{
						pos:  position{line: 553, col: 5, offset: 17055},
						name: "Minutes",
					},
					&ruleRefExpr{
						pos:  position{line: 554, col: 5, offset: 17067},
						name: "Hours",
					},
					&seqExpr{
						pos: position{line: 555, col: 5, offset: 17077},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 555, col: 5, offset: 17077},
								name: "Hours",
							},
							&ruleRefExpr{
								pos:  position{line: 555, col: 11, offset: 17083},
								name: "_",
							},
							&litMatcher{
								pos:        position{line: 555, col: 13, offset: 17085},
								val:        "and",
								ignoreCase: false,
							},
							&ruleRefExpr{
								pos:  position{line: 555, col: 19, offset: 17091},
								name: "_",
							},
							&ruleRefExpr{
								pos:  position{line: 555, col: 21, offset: 17093},
								name: "Minutes",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 556, col: 5, offset: 17105},
						name: "Days",
					},
					&ruleRefExpr{
						pos:  position{line: 557, col: 5, offset: 17114},
						name: "Weeks",
					},
				},
			},
		},
		{
			name: "SecondsToken",
			pos:  position{line: 559, col: 1, offset: 17121},
			expr: &choiceExpr{
				pos: position{line: 560, col: 5, offset: 17138},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 560, col: 5, offset: 17138},
						val:        "seconds",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 561, col: 5, offset: 17152},
						val:        "second",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 562, col: 5, offset: 17165},
						val:        "secs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 563, col: 5, offset: 17176},
						val:        "sec",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 564, col: 5, offset: 17186},
						val:        "s",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "MinutesToken",
			pos:  position{line: 566, col: 1, offset: 17191},
			expr: &choiceExpr{
				pos: position{line: 567, col: 5, offset: 17208},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 567, col: 5, offset: 17208},
						val:        "minutes",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 568, col: 5, offset: 17222},
						val:        "minute",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 569, col: 5, offset: 17235},
						val:        "mins",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 570, col: 5, offset: 17246},
						val:        "min",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 571, col: 5, offset: 17256},
						val:        "m",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "HoursToken",
			pos:  position{line: 573, col: 1, offset: 17261},
			expr: &choiceExpr{
				pos: position{line: 574, col: 5, offset: 17276},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 574, col: 5, offset: 17276},
						val:        "hours",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 575, col: 5, offset: 17288},
						val:        "hrs",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 576, col: 5, offset: 17298},
						val:        "hr",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 577, col: 5, offset: 17307},
						val:        "h",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 578, col: 5, offset: 17315},
						val:        "hour",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "DaysToken",
			pos:  position{line: 580, col: 1, offset: 17323},
			expr: &choiceExpr{
				pos: position{line: 580, col: 13, offset: 17335},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 580, col: 13, offset: 17335},
						val:        "days",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 580, col: 20, offset: 17342},
						val:        "day",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 580, col: 26, offset: 17348},
						val:        "d",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "WeeksToken",
			pos:  position{line: 581, col: 1, offset: 17352},
			expr: &choiceExpr{
				pos: position{line: 581, col: 14, offset: 17365},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 581, col: 14, offset: 17365},
						val:        "weeks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 581, col: 22, offset: 17373},
						val:        "week",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 581, col: 29, offset: 17380},
						val:        "wks",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 581, col: 35, offset: 17386},
						val:        "wk",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 581, col: 40, offset: 17391},
						val:        "w",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Seconds",
			pos:  position{line: 583, col: 1, offset: 17396},
			expr: &choiceExpr{
				pos: position{line: 584, col: 5, offset: 17408},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 584, col: 5, offset: 17408},
						run: (*parser).callonSeconds2,
						expr: &litMatcher{
							pos:        position{line: 584, col: 5, offset: 17408},
							val:        "second",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 585, col: 5, offset: 17494},
						run: (*parser).callonSeconds4,
						expr: &seqExpr{
							pos: position{line: 585, col: 5, offset: 17494},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 585, col: 5, offset: 17494},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 585, col: 9, offset: 17498},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 585, col: 14, offset: 17503},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 585, col: 17, offset: 17506},
									name: "SecondsToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Minutes",
			pos:  position{line: 587, col: 1, offset: 17595},
			expr: &choiceExpr{
				pos: position{line: 588, col: 5, offset: 17607},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 588, col: 5, offset: 17607},
						run: (*parser).callonMinutes2,
						expr: &litMatcher{
							pos:        position{line: 588, col: 5, offset: 17607},
							val:        "minute",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 589, col: 5, offset: 17694},
						run: (*parser).callonMinutes4,
						expr: &seqExpr{
							pos: position{line: 589, col: 5, offset: 17694},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 589, col: 5, offset: 17694},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 589, col: 9, offset: 17698},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 589, col: 14, offset: 17703},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 589, col: 17, offset: 17706},
									name: "MinutesToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Hours",
			pos:  position{line: 591, col: 1, offset: 17804},
			expr: &choiceExpr{
				pos: position{line: 592, col: 5, offset: 17814},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 592, col: 5, offset: 17814},
						run: (*parser).callonHours2,
						expr: &litMatcher{
							pos:        position{line: 592, col: 5, offset: 17814},
							val:        "hour",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 593, col: 5, offset: 17901},
						run: (*parser).callonHours4,
						expr: &seqExpr{
							pos: position{line: 593, col: 5, offset: 17901},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 593, col: 5, offset: 17901},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 593, col: 9, offset: 17905},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 593, col: 14, offset: 17910},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 593, col: 17, offset: 17913},
									name: "HoursToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Days",
			pos:  position{line: 595, col: 1, offset: 18011},
			expr: &choiceExpr{
				pos: position{line: 596, col: 5, offset: 18020},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 596, col: 5, offset: 18020},
						run: (*parser).callonDays2,
						expr: &litMatcher{
							pos:        position{line: 596, col: 5, offset: 18020},
							val:        "day",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 597, col: 5, offset: 18109},
						run: (*parser).callonDays4,
						expr: &seqExpr{
							pos: position{line: 597, col: 5, offset: 18109},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 597, col: 5, offset: 18109},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 597, col: 9, offset: 18113},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 597, col: 14, offset: 18118},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 597, col: 17, offset: 18121},
									name: "DaysToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Weeks",
			pos:  position{line: 599, col: 1, offset: 18223},
			expr: &choiceExpr{
				pos: position{line: 600, col: 5, offset: 18233},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 600, col: 5, offset: 18233},
						run: (*parser).callonWeeks2,
						expr: &litMatcher{
							pos:        position{line: 600, col: 5, offset: 18233},
							val:        "week",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 601, col: 5, offset: 18325},
						run: (*parser).callonWeeks4,
						expr: &seqExpr{
							pos: position{line: 601, col: 5, offset: 18325},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 601, col: 5, offset: 18325},
									label: "num",
									expr: &ruleRefExpr{
										pos:  position{line: 601, col: 9, offset: 18329},
										name: "UInt",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 601, col: 14, offset: 18334},
									name: "__",
								},
								&ruleRefExpr{
									pos:  position{line: 601, col: 17, offset: 18337},
									name: "WeeksToken",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IP",
			pos:  position{line: 604, col: 1, offset: 18468},
			expr: &actionExpr{
				pos: position{line: 605, col: 5, offset: 18475},
				run: (*parser).callonIP1,
				expr: &seqExpr{
					pos: position{line: 605, col: 5, offset: 18475},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 605, col: 5, offset: 18475},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 605, col: 10, offset: 18480},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 14, offset: 18484},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 605, col: 19, offset: 18489},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 23, offset: 18493},
							name: "UInt",
						},
						&litMatcher{
							pos:        position{line: 605, col: 28, offset: 18498},
							val:        ".",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 32, offset: 18502},
							name: "UInt",
						},
					},
				},
			},
		},
		{
			name: "IP6",
			pos:  position{line: 609, col: 1, offset: 18670},
			expr: &choiceExpr{
				pos: position{line: 610, col: 5, offset: 18678},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 610, col: 5, offset: 18678},
						run: (*parser).callonIP62,
						expr: &seqExpr{
							pos: position{line: 610, col: 5, offset: 18678},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 610, col: 5, offset: 18678},
									label: "a",
									expr: &oneOrMoreExpr{
										pos: position{line: 610, col: 7, offset: 18680},
										expr: &ruleRefExpr{
											pos:  position{line: 610, col: 7, offset: 18680},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 610, col: 17, offset: 18690},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 610, col: 19, offset: 18692},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 613, col: 5, offset: 18756},
						run: (*parser).callonIP69,
						expr: &seqExpr{
							pos: position{line: 613, col: 5, offset: 18756},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 613, col: 5, offset: 18756},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 613, col: 7, offset: 18758},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 613, col: 11, offset: 18762},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 613, col: 13, offset: 18764},
										expr: &ruleRefExpr{
											pos:  position{line: 613, col: 13, offset: 18764},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 613, col: 23, offset: 18774},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 613, col: 28, offset: 18779},
									label: "d",
									expr: &zeroOrMoreExpr{
										pos: position{line: 613, col: 30, offset: 18781},
										expr: &ruleRefExpr{
											pos:  position{line: 613, col: 30, offset: 18781},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 613, col: 40, offset: 18791},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 613, col: 42, offset: 18793},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 616, col: 5, offset: 18892},
						run: (*parser).callonIP622,
						expr: &seqExpr{
							pos: position{line: 616, col: 5, offset: 18892},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 616, col: 5, offset: 18892},
									val:        "::",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 616, col: 10, offset: 18897},
									label: "a",
									expr: &zeroOrMoreExpr{
										pos: position{line: 616, col: 12, offset: 18899},
										expr: &ruleRefExpr{
											pos:  position{line: 616, col: 12, offset: 18899},
											name: "HexColon",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 616, col: 22, offset: 18909},
									label: "b",
									expr: &ruleRefExpr{
										pos:  position{line: 616, col: 24, offset: 18911},
										name: "IP6Tail",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 619, col: 5, offset: 18982},
						run: (*parser).callonIP630,
						expr: &seqExpr{
							pos: position{line: 619, col: 5, offset: 18982},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 619, col: 5, offset: 18982},
									label: "a",
									expr: &ruleRefExpr{
										pos:  position{line: 619, col: 7, offset: 18984},
										name: "Hex",
									},
								},
								&labeledExpr{
									pos:   position{line: 619, col: 11, offset: 18988},
									label: "b",
									expr: &zeroOrMoreExpr{
										pos: position{line: 619, col: 13, offset: 18990},
										expr: &ruleRefExpr{
											pos:  position{line: 619, col: 13, offset: 18990},
											name: "ColonHex",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 619, col: 23, offset: 19000},
									val:        "::",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 622, col: 5, offset: 19068},
						run: (*parser).callonIP638,
						expr: &litMatcher{
							pos:        position{line: 622, col: 5, offset: 19068},
							val:        "::",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP6Tail",
			pos:  position{line: 626, col: 1, offset: 19105},
			expr: &choiceExpr{
				pos: position{line: 627, col: 5, offset: 19117},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 627, col: 5, offset: 19117},
						name: "IP",
					},
					&ruleRefExpr{
						pos:  position{line: 628, col: 5, offset: 19124},
						name: "Hex",
					},
				},
			},
		},
		{
			name: "ColonHex",
			pos:  position{line: 630, col: 1, offset: 19129},
			expr: &actionExpr{
				pos: position{line: 630, col: 12, offset: 19140},
				run: (*parser).callonColonHex1,
				expr: &seqExpr{
					pos: position{line: 630, col: 12, offset: 19140},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 630, col: 12, offset: 19140},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 630, col: 16, offset: 19144},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 18, offset: 19146},
								name: "Hex",
							},
						},
					},
				},
			},
		},
		{
			name: "HexColon",
			pos:  position{line: 631, col: 1, offset: 19183},
			expr: &actionExpr{
				pos: position{line: 631, col: 12, offset: 19194},
				run: (*parser).callonHexColon1,
				expr: &seqExpr{
					pos: position{line: 631, col: 12, offset: 19194},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 631, col: 12, offset: 19194},
							label: "v",
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 14, offset: 19196},
								name: "Hex",
							},
						},
						&litMatcher{
							pos:        position{line: 631, col: 18, offset: 19200},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IP4Net",
			pos:  position{line: 633, col: 1, offset: 19238},
			expr: &actionExpr{
				pos: position{line: 634, col: 5, offset: 19249},
				run: (*parser).callonIP4Net1,
				expr: &seqExpr{
					pos: position{line: 634, col: 5, offset: 19249},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 634, col: 5, offset: 19249},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 7, offset: 19251},
								name: "IP",
							},
						},
						&litMatcher{
							pos:        position{line: 634, col: 10, offset: 19254},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 634, col: 14, offset: 19258},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 16, offset: 19260},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "IP6Net",
			pos:  position{line: 638, col: 1, offset: 19333},
			expr: &actionExpr{
				pos: position{line: 639, col: 5, offset: 19344},
				run: (*parser).callonIP6Net1,
				expr: &seqExpr{
					pos: position{line: 639, col: 5, offset: 19344},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 639, col: 5, offset: 19344},
							label: "a",
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 7, offset: 19346},
								name: "IP6",
							},
						},
						&litMatcher{
							pos:        position{line: 639, col: 11, offset: 19350},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 639, col: 15, offset: 19354},
							label: "m",
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 17, offset: 19356},
								name: "UInt",
							},
						},
					},
				},
			},
		},
		{
			name: "UInt",
			pos:  position{line: 643, col: 1, offset: 19419},
			expr: &actionExpr{
				pos: position{line: 644, col: 4, offset: 19427},
				run: (*parser).callonUInt1,
				expr: &labeledExpr{
					pos:   position{line: 644, col: 4, offset: 19427},
					label: "s",
					expr: &ruleRefExpr{
						pos:  position{line: 644, col: 6, offset: 19429},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "IntString",
			pos:  position{line: 646, col: 1, offset: 19469},
			expr: &choiceExpr{
				pos: position{line: 647, col: 5, offset: 19483},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 647, col: 5, offset: 19483},
						name: "UIntString",
					},
					&ruleRefExpr{
						pos:  position{line: 648, col: 5, offset: 19498},
						name: "MinusIntString",
					},
				},
			},
		},
		{
			name: "UIntString",
			pos:  position{line: 650, col: 1, offset: 19514},
			expr: &actionExpr{
				pos: position{line: 650, col: 14, offset: 19527},
				run: (*parser).callonUIntString1,
				expr: &oneOrMoreExpr{
					pos: position{line: 650, col: 14, offset: 19527},
					expr: &charClassMatcher{
						pos:        position{line: 650, col: 14, offset: 19527},
						val:        "[0-9]",
						ranges:     []rune{'0', '9'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "MinusIntString",
			pos:  position{line: 652, col: 1, offset: 19566},
			expr: &actionExpr{
				pos: position{line: 653, col: 5, offset: 19585},
				run: (*parser).callonMinusIntString1,
				expr: &seqExpr{
					pos: position{line: 653, col: 5, offset: 19585},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 653, col: 5, offset: 19585},
							val:        "-",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 653, col: 9, offset: 19589},
							name: "UIntString",
						},
					},
				},
			},
		},
		{
			name: "FloatString",
			pos:  position{line: 655, col: 1, offset: 19632},
			expr: &choiceExpr{
				pos: position{line: 656, col: 5, offset: 19648},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 656, col: 5, offset: 19648},
						run: (*parser).callonFloatString2,
						expr: &seqExpr{
							pos: position{line: 656, col: 5, offset: 19648},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 656, col: 5, offset: 19648},
									expr: &litMatcher{
										pos:        position{line: 656, col: 5, offset: 19648},
										val:        "-",
										ignoreCase: false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 656, col: 10, offset: 19653},
									expr: &charClassMatcher{
										pos:        position{line: 656, col: 10, offset: 19653},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&litMatcher{
									pos:        position{line: 656, col: 17, offset: 19660},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 656, col: 21, offset: 19664},
									expr: &charClassMatcher{
										pos:        position{line: 656, col: 21, offset: 19664},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 656, col: 28, offset: 19671},
									expr: &ruleRefExpr{
										pos:  position{line: 656, col: 28, offset: 19671},
										name: "ExponentPart",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 659, col: 5, offset: 19730},
						run: (*parser).callonFloatString13,
						expr: &seqExpr{
							pos: position{line: 659, col: 5, offset: 19730},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 659, col: 5, offset: 19730},
									expr: &litMatcher{
										pos:        position{line: 659, col: 5, offset: 19730},
										val:        "-",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 659, col: 10, offset: 19735},
									val:        ".",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 659, col: 14, offset: 19739},
									expr: &charClassMatcher{
										pos:        position{line: 659, col: 14, offset: 19739},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 659, col: 21, offset: 19746},
									expr: &ruleRefExpr{
										pos:  position{line: 659, col: 21, offset: 19746},
										name: "ExponentPart",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExponentPart",
			pos:  position{line: 663, col: 1, offset: 19802},
			expr: &seqExpr{
				pos: position{line: 663, col: 16, offset: 19817},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 663, col: 16, offset: 19817},
						val:        "e",
						ignoreCase: true,
					},
					&zeroOrOneExpr{
						pos: position{line: 663, col: 21, offset: 19822},
						expr: &charClassMatcher{
							pos:        position{line: 663, col: 21, offset: 19822},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 663, col: 27, offset: 19828},
						name: "UIntString",
					},
				},
			},
		},
		{
			name: "Hex",
			pos:  position{line: 665, col: 1, offset: 19840},
			expr: &actionExpr{
				pos: position{line: 665, col: 7, offset: 19846},
				run: (*parser).callonHex1,
				expr: &oneOrMoreExpr{
					pos: position{line: 665, col: 7, offset: 19846},
					expr: &ruleRefExpr{
						pos:  position{line: 665, col: 7, offset: 19846},
						name: "HexDigit",
					},
				},
			},
		},
		{
			name: "HexDigit",
			pos:  position{line: 667, col: 1, offset: 19888},
			expr: &charClassMatcher{
				pos:        position{line: 667, col: 12, offset: 19899},
				val:        "[0-9a-fA-F]",
				ranges:     []rune{'0', '9', 'a', 'f', 'A', 'F'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "KeyWord",
			pos:  position{line: 669, col: 1, offset: 19912},
			expr: &actionExpr{
				pos: position{line: 670, col: 5, offset: 19924},
				run: (*parser).callonKeyWord1,
				expr: &labeledExpr{
					pos:   position{line: 670, col: 5, offset: 19924},
					label: "chars",
					expr: &oneOrMoreExpr{
						pos: position{line: 670, col: 11, offset: 19930},
						expr: &ruleRefExpr{
							pos:  position{line: 670, col: 11, offset: 19930},
							name: "KeyWordPart",
						},
					},
				},
			},
		},
		{
			name: "KeyWordPart",
			pos:  position{line: 672, col: 1, offset: 19977},
			expr: &choiceExpr{
				pos: position{line: 673, col: 5, offset: 19993},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 673, col: 5, offset: 19993},
						run: (*parser).callonKeyWordPart2,
						expr: &seqExpr{
							pos: position{line: 673, col: 5, offset: 19993},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 673, col: 5, offset: 19993},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 673, col: 10, offset: 19998},
									label: "s",
									expr: &choiceExpr{
										pos: position{line: 673, col: 13, offset: 20001},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 673, col: 13, offset: 20001},
												name: "EscapeSequence",
											},
											&ruleRefExpr{
												pos:  position{line: 673, col: 30, offset: 20018},
												name: "SearchEscape",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 674, col: 5, offset: 20055},
						run: (*parser).callonKeyWordPart9,
						expr: &seqExpr{
							pos: position{line: 674, col: 5, offset: 20055},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 674, col: 5, offset: 20055},
									expr: &choiceExpr{
										pos: position{line: 674, col: 7, offset: 20057},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 674, col: 7, offset: 20057},
												val:        "[\\x00-\\x1F\\x5C(),!><=\\x22|\\x27;:]",
												chars:      []rune{'\\', '(', ')', ',', '!', '>', '<', '=', '"', '|', '\'', ';', ':'},
												ranges:     []rune{'\x00', '\x1f'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 674, col: 43, offset: 20093},
												name: "WhiteSpace",
											},
										},
									},
								},
								&anyMatcher{
									line: 674, col: 55, offset: 20105,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 676, col: 1, offset: 20139},
			expr: &choiceExpr{
				pos: position{line: 677, col: 5, offset: 20156},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 677, col: 5, offset: 20156},
						run: (*parser).callonQuotedString2,
						expr: &seqExpr{
							pos: position{line: 677, col: 5, offset: 20156},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 677, col: 5, offset: 20156},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 677, col: 9, offset: 20160},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 677, col: 11, offset: 20162},
										expr: &ruleRefExpr{
											pos:  position{line: 677, col: 11, offset: 20162},
											name: "DoubleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 677, col: 29, offset: 20180},
									val:        "\"",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 678, col: 5, offset: 20217},
						run: (*parser).callonQuotedString9,
						expr: &seqExpr{
							pos: position{line: 678, col: 5, offset: 20217},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 678, col: 5, offset: 20217},
									val:        "'",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 678, col: 9, offset: 20221},
									label: "v",
									expr: &zeroOrMoreExpr{
										pos: position{line: 678, col: 11, offset: 20223},
										expr: &ruleRefExpr{
											pos:  position{line: 678, col: 11, offset: 20223},
											name: "SingleQuotedChar",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 678, col: 29, offset: 20241},
									val:        "'",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedChar",
			pos:  position{line: 680, col: 1, offset: 20275},
			expr: &choiceExpr{
				pos: position{line: 681, col: 5, offset: 20296},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 681, col: 5, offset: 20296},
						run: (*parser).callonDoubleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 681, col: 5, offset: 20296},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 681, col: 5, offset: 20296},
									expr: &choiceExpr{
										pos: position{line: 681, col: 7, offset: 20298},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 681, col: 7, offset: 20298},
												val:        "\"",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 681, col: 13, offset: 20304},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 681, col: 26, offset: 20317,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 682, col: 5, offset: 20354},
						run: (*parser).callonDoubleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 682, col: 5, offset: 20354},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 682, col: 5, offset: 20354},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 682, col: 10, offset: 20359},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 682, col: 12, offset: 20361},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedChar",
			pos:  position{line: 684, col: 1, offset: 20395},
			expr: &choiceExpr{
				pos: position{line: 685, col: 5, offset: 20416},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 685, col: 5, offset: 20416},
						run: (*parser).callonSingleQuotedChar2,
						expr: &seqExpr{
							pos: position{line: 685, col: 5, offset: 20416},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 685, col: 5, offset: 20416},
									expr: &choiceExpr{
										pos: position{line: 685, col: 7, offset: 20418},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 685, col: 7, offset: 20418},
												val:        "'",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 685, col: 13, offset: 20424},
												name: "EscapedChar",
											},
										},
									},
								},
								&anyMatcher{
									line: 685, col: 26, offset: 20437,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 686, col: 5, offset: 20474},
						run: (*parser).callonSingleQuotedChar9,
						expr: &seqExpr{
							pos: position{line: 686, col: 5, offset: 20474},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 686, col: 5, offset: 20474},
									val:        "\\",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 686, col: 10, offset: 20479},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 686, col: 12, offset: 20481},
										name: "EscapeSequence",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 688, col: 1, offset: 20515},
			expr: &choiceExpr{
				pos: position{line: 689, col: 5, offset: 20534},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 689, col: 5, offset: 20534},
						run: (*parser).callonEscapeSequence2,
						expr: &seqExpr{
							pos: position{line: 689, col: 5, offset: 20534},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 689, col: 5, offset: 20534},
									val:        "x",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 689, col: 9, offset: 20538},
									name: "HexDigit",
								},
								&ruleRefExpr{
									pos:  position{line: 689, col: 18, offset: 20547},
									name: "HexDigit",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 690, col: 5, offset: 20598},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 691, col: 5, offset: 20619},
						name: "UnicodeEscape",
					},
				},
			},
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 693, col: 1, offset: 20634},
			expr: &choiceExpr{
				pos: position{line: 694, col: 5, offset: 20655},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 694, col: 5, offset: 20655},
						val:        "'",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 695, col: 5, offset: 20663},
						val:        "\"",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 696, col: 5, offset: 20671},
						val:        "\\",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 697, col: 5, offset: 20680},
						run: (*parser).callonSingleCharEscape5,
						expr: &litMatcher{
							pos:        position{line: 697, col: 5, offset: 20680},
							val:        "b",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 698, col: 5, offset: 20709},
						run: (*parser).callonSingleCharEscape7,
						expr: &litMatcher{
							pos:        position{line: 698, col: 5, offset: 20709},
							val:        "f",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 699, col: 5, offset: 20738},
						run: (*parser).callonSingleCharEscape9,
						expr: &litMatcher{
							pos:        position{line: 699, col: 5, offset: 20738},
							val:        "n",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 700, col: 5, offset: 20767},
						run: (*parser).callonSingleCharEscape11,
						expr: &litMatcher{
							pos:        position{line: 700, col: 5, offset: 20767},
							val:        "r",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 701, col: 5, offset: 20796},
						run: (*parser).callonSingleCharEscape13,
						expr: &litMatcher{
							pos:        position{line: 701, col: 5, offset: 20796},
							val:        "t",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 702, col: 5, offset: 20825},
						run: (*parser).callonSingleCharEscape15,
						expr: &litMatcher{
							pos:        position{line: 702, col: 5, offset: 20825},
							val:        "v",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SearchEscape",
			pos:  position{line: 704, col: 1, offset: 20851},
			expr: &choiceExpr{
				pos: position{line: 705, col: 5, offset: 20868},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 705, col: 5, offset: 20868},
						run: (*parser).callonSearchEscape2,
						expr: &litMatcher{
							pos:        position{line: 705, col: 5, offset: 20868},
							val:        "=",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 706, col: 5, offset: 20896},
						run: (*parser).callonSearchEscape4,
						expr: &litMatcher{
							pos:        position{line: 706, col: 5, offset: 20896},
							val:        "*",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 708, col: 1, offset: 20923},
			expr: &choiceExpr{
				pos: position{line: 709, col: 5, offset: 20941},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 709, col: 5, offset: 20941},
						run: (*parser).callonUnicodeEscape2,
						expr: &seqExpr{
							pos: position{line: 709, col: 5, offset: 20941},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 709, col: 5, offset: 20941},
									val:        "u",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 709, col: 9, offset: 20945},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 709, col: 16, offset: 20952},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 709, col: 16, offset: 20952},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 709, col: 25, offset: 20961},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 709, col: 34, offset: 20970},
												name: "HexDigit",
											},
											&ruleRefExpr{
												pos:  position{line: 709, col: 43, offset: 20979},
												name: "HexDigit",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 712, col: 5, offset: 21042},
						run: (*parser).callonUnicodeEscape11,
						expr: &seqExpr{
							pos: position{line: 712, col: 5, offset: 21042},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 712, col: 5, offset: 21042},
									val:        "u",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 712, col: 9, offset: 21046},
									val:        "{",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 712, col: 13, offset: 21050},
									label: "chars",
									expr: &seqExpr{
										pos: position{line: 712, col: 20, offset: 21057},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 712, col: 20, offset: 21057},
												name: "HexDigit",
											},
											&zeroOrOneExpr{
												pos: position{line: 712, col: 29, offset: 21066},
												expr: &ruleRefExpr{
													pos:  position{line: 712, col: 29, offset: 21066},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 712, col: 39, offset: 21076},
												expr: &ruleRefExpr{
													pos:  position{line: 712, col: 39, offset: 21076},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 712, col: 49, offset: 21086},
												expr: &ruleRefExpr{
													pos:  position{line: 712, col: 49, offset: 21086},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 712, col: 59, offset: 21096},
												expr: &ruleRefExpr{
													pos:  position{line: 712, col: 59, offset: 21096},
													name: "HexDigit",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 712, col: 69, offset: 21106},
												expr: &ruleRefExpr{
													pos:  position{line: 712, col: 69, offset: 21106},
													name: "HexDigit",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 712, col: 80, offset: 21117},
									val:        "}",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Regexp",
			pos:  position{line: 716, col: 1, offset: 21171},
			expr: &actionExpr{
				pos: position{line: 717, col: 5, offset: 21182},
				run: (*parser).callonRegexp1,
				expr: &seqExpr{
					pos: position{line: 717, col: 5, offset: 21182},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 717, col: 5, offset: 21182},
							val:        "/",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 717, col: 9, offset: 21186},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 14, offset: 21191},
								name: "RegexpBody",
							},
						},
						&litMatcher{
							pos:        position{line: 717, col: 25, offset: 21202},
							val:        "/",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "RegexpBody",
			pos:  position{line: 719, col: 1, offset: 21228},
			expr: &actionExpr{
				pos: position{line: 720, col: 5, offset: 21243},
				run: (*parser).callonRegexpBody1,
				expr: &oneOrMoreExpr{
					pos: position{line: 720, col: 5, offset: 21243},
					expr: &choiceExpr{
						pos: position{line: 720, col: 6, offset: 21244},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 720, col: 6, offset: 21244},
								val:        "[^/\\\\]",
								chars:      []rune{'/', '\\'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 720, col: 13, offset: 21251},
								val:        "\\/",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedChar",
			pos:  position{line: 722, col: 1, offset: 21291},
			expr: &charClassMatcher{
				pos:        position{line: 723, col: 5, offset: 21307},
				val:        "[\\x00-\\x1f\\\\]",
				chars:      []rune{'\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "_",
			pos:  position{line: 725, col: 1, offset: 21322},
			expr: &oneOrMoreExpr{
				pos: position{line: 725, col: 6, offset: 21327},
				expr: &ruleRefExpr{
					pos:  position{line: 725, col: 6, offset: 21327},
					name: "AnySpace",
				},
			},
		},
		{
			name: "__",
			pos:  position{line: 726, col: 1, offset: 21337},
			expr: &zeroOrMoreExpr{
				pos: position{line: 726, col: 6, offset: 21342},
				expr: &ruleRefExpr{
					pos:  position{line: 726, col: 6, offset: 21342},
					name: "AnySpace",
				},
			},
		},
		{
			name: "AnySpace",
			pos:  position{line: 728, col: 1, offset: 21353},
			expr: &choiceExpr{
				pos: position{line: 729, col: 5, offset: 21366},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 729, col: 5, offset: 21366},
						name: "WhiteSpace",
					},
					&ruleRefExpr{
						pos:  position{line: 730, col: 5, offset: 21381},
						name: "LineTerminator",
					},
					&ruleRefExpr{
						pos:  position{line: 731, col: 5, offset: 21400},
						name: "Comment",
					},
				},
			},
		},
		{
			name: "SourceCharacter",
			pos:  position{line: 733, col: 1, offset: 21409},
			expr: &anyMatcher{
				line: 734, col: 5, offset: 21429,
			},
		},
		{
			name:        "WhiteSpace",
			displayName: "\"whitespace\"",
			pos:         position{line: 736, col: 1, offset: 21432},
			expr: &choiceExpr{
				pos: position{line: 737, col: 5, offset: 21460},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 737, col: 5, offset: 21460},
						val:        "\t",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 738, col: 5, offset: 21469},
						val:        "\v",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 739, col: 5, offset: 21478},
						val:        "\f",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 740, col: 5, offset: 21487},
						val:        " ",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 741, col: 5, offset: 21495},
						val:        "\u00a0",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 742, col: 5, offset: 21508},
						val:        "\ufeff",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "LineTerminator",
			pos:  position{line: 744, col: 1, offset: 21518},
			expr: &charClassMatcher{
				pos:        position{line: 745, col: 5, offset: 21537},
				val:        "[\\n\\r\\u2028\\u2029]",
				chars:      []rune{'\n', '\r', '\u2028', '\u2029'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name:        "Comment",
			displayName: "\"comment\"",
			pos:         position{line: 751, col: 1, offset: 21867},
			expr: &ruleRefExpr{
				pos:  position{line: 754, col: 5, offset: 21938},
				name: "SingleLineComment",
			},
		},
		{
			name: "MultiLineComment",
			pos:  position{line: 756, col: 1, offset: 21957},
			expr: &seqExpr{
				pos: position{line: 757, col: 5, offset: 21978},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 757, col: 5, offset: 21978},
						val:        "/*",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 757, col: 10, offset: 21983},
						expr: &seqExpr{
							pos: position{line: 757, col: 11, offset: 21984},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 757, col: 11, offset: 21984},
									expr: &litMatcher{
										pos:        position{line: 757, col: 12, offset: 21985},
										val:        "*/",
										ignoreCase: false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 757, col: 17, offset: 21990},
									name: "SourceCharacter",
								},
							},
						},
					},
					&litMatcher{
						pos:        position{line: 757, col: 35, offset: 22008},
						val:        "*/",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 759, col: 1, offset: 22014},
			expr: &seqExpr{
				pos: position{line: 760, col: 5, offset: 22036},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 760, col: 5, offset: 22036},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 760, col: 10, offset: 22041},
						expr: &seqExpr{
							pos: position{line: 760, col: 11, offset: 22042},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 760, col: 11, offset: 22042},
									expr: &ruleRefExpr{
										pos:  position{line: 760, col: 12, offset: 22043},
										name: "LineTerminator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 760, col: 27, offset: 22058},
									name: "SourceCharacter",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 762, col: 1, offset: 22077},
			expr: &notExpr{
				pos: position{line: 762, col: 7, offset: 22083},
				expr: &anyMatcher{
					line: 762, col: 8, offset: 22084,
				},
			},
		},
	},
}

func (c *current) onstart1(ast interface{}) (interface{}, error) {
	return ast, nil
}

func (p *parser) callonstart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstart1(stack["ast"])
}

func (c *current) onQuery2(procs interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": procs}, nil

}

func (p *parser) callonQuery2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuery2(stack["procs"])
}

func (c *current) onQuery5(s, rest interface{}) (interface{}, error) {
	if len(rest.([]interface{})) == 0 {
		return s, nil
	} else {
		return map[string]interface{}{"op": "SequentialProc", "procs": append([]interface{}{s}, (rest.([]interface{}))...)}, nil
	}

}

func (p *parser) callonQuery5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuery5(stack["s"], stack["rest"])
}

func (c *current) onSearch1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonSearch1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearch1(stack["expr"])
}

func (c *current) onSearchExpr1(first, rest interface{}) (interface{}, error) {
	return makeChain(first, rest, "LogicalOr"), nil

}

func (p *parser) callonSearchExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchExpr1(stack["first"], stack["rest"])
}

func (c *current) onOredSearchTerm1(t interface{}) (interface{}, error) {
	return t, nil
}

func (p *parser) callonOredSearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOredSearchTerm1(stack["t"])
}

func (c *current) onSearchTerm1(first, rest interface{}) (interface{}, error) {
	return makeChain(first, rest, "LogicalAnd"), nil

}

func (p *parser) callonSearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchTerm1(stack["first"], stack["rest"])
}

func (c *current) onAndedSearchTerm1(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonAndedSearchTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndedSearchTerm1(stack["f"])
}

func (c *current) onSearchFactor2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "LogicalNot", "expr": e}, nil

}

func (p *parser) callonSearchFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor2(stack["e"])
}

func (c *current) onSearchFactor13(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSearchFactor13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor13(stack["s"])
}

func (c *current) onSearchFactor19(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonSearchFactor19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchFactor19(stack["expr"])
}

func (c *current) onSearchPred2(comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareAny", "comparator": comp, "recursive": false, "value": v}, nil

}

func (p *parser) callonSearchPred2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPred2(stack["comp"], stack["v"])
}

func (c *current) onSearchPred11(comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareAny", "comparator": comp, "recursive": true, "value": v}, nil

}

func (p *parser) callonSearchPred11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPred11(stack["comp"], stack["v"])
}

func (c *current) onSearchPred20(f, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareField", "comparator": comp, "field": f, "value": v}, nil

}

func (p *parser) callonSearchPred20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPred20(stack["f"], stack["comp"], stack["v"])
}

func (c *current) onSearchPred30(expr, comp, v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpression", "operator": comp, "lhs": expr, "rhs": v}, nil

}

func (p *parser) callonSearchPred30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPred30(stack["expr"], stack["comp"], stack["v"])
}

func (c *current) onSearchPred42(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareAny", "comparator": "in", "recursive": false, "value": v}, nil

}

func (p *parser) callonSearchPred42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPred42(stack["v"])
}

func (c *current) onSearchPred50(v, f interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CompareField", "comparator": "in", "field": f, "value": v}, nil

}

func (p *parser) callonSearchPred50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPred50(stack["v"], stack["f"])
}

func (c *current) onSearchPred59(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Search", "text": string(c.text), "value": v}, nil

}

func (p *parser) callonSearchPred59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPred59(stack["v"])
}

func (c *current) onSearchPred62(v interface{}) (interface{}, error) {
	var str = v.(string)
	if str == "*" {
		return map[string]interface{}{"op": "MatchAll"}, nil
	}
	var literal = map[string]interface{}{"op": "Literal", "type": "string", "value": v}
	if reglob.IsGlobby(str) {
		literal["type"] = "regexp"
		literal["value"] = reglob.Reglob(str)
	}
	return map[string]interface{}{"op": "Search", "text": string(c.text), "value": literal}, nil

}

func (p *parser) callonSearchPred62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchPred62(stack["v"])
}

func (c *current) onSearchValue3(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonSearchValue3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchValue3(stack["v"])
}

func (c *current) onSearchLiteral7(i interface{}) (interface{}, error) {
	return i, nil
}

func (p *parser) callonSearchLiteral7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchLiteral7(stack["i"])
}

func (c *current) onSearchLiteral13(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonSearchLiteral13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchLiteral13(stack["v"])
}

func (c *current) onSearchLiteral21(v interface{}) (interface{}, error) {
	return v, nil
}

func (p *parser) callonSearchLiteral21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchLiteral21(stack["v"])
}

func (c *current) onStringLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "string", "value": v}, nil

}

func (p *parser) callonStringLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringLiteral1(stack["v"])
}

func (c *current) onRegexpLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "regexp", "value": v}, nil

}

func (p *parser) callonRegexpLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpLiteral1(stack["v"])
}

func (c *current) onSubnetLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral2(stack["v"])
}

func (c *current) onSubnetLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "net", "value": v}, nil

}

func (p *parser) callonSubnetLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubnetLiteral8(stack["v"])
}

func (c *current) onAddressLiteral2(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral2(stack["v"])
}

func (c *current) onAddressLiteral8(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "ip", "value": v}, nil

}

func (p *parser) callonAddressLiteral8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddressLiteral8(stack["v"])
}

func (c *current) onFloatLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "float64", "value": v}, nil

}

func (p *parser) callonFloatLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatLiteral1(stack["v"])
}

func (c *current) onIntegerLiteral1(v interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "int64", "value": v}, nil

}

func (p *parser) callonIntegerLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIntegerLiteral1(stack["v"])
}

func (c *current) onBooleanLiteral2() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "true"}, nil
}

func (p *parser) callonBooleanLiteral2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral2()
}

func (c *current) onBooleanLiteral4() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "bool", "value": "false"}, nil
}

func (p *parser) callonBooleanLiteral4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBooleanLiteral4()
}

func (c *current) onNullLiteral1() (interface{}, error) {
	return map[string]interface{}{"op": "Literal", "type": "null", "value": ""}, nil
}

func (p *parser) callonNullLiteral1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNullLiteral1()
}

func (c *current) onSequentialProcs1(first, rest interface{}) (interface{}, error) {
	if rest != nil {
		return append([]interface{}{first}, (rest.([]interface{}))...), nil
	}
	return []interface{}{first}, nil

}

func (p *parser) callonSequentialProcs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialProcs1(stack["first"], stack["rest"])
}

func (c *current) onSequentialTail1(p interface{}) (interface{}, error) {
	return p, nil
}

func (p *parser) callonSequentialTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSequentialTail1(stack["p"])
}

func (c *current) onProc4(proc interface{}) (interface{}, error) {
	return proc, nil

}

func (p *parser) callonProc4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProc4(stack["proc"])
}

func (c *current) onProcs1(first, rest interface{}) (interface{}, error) {
	var fp = map[string]interface{}{"op": "SequentialProc", "procs": first}
	if rest != nil {
		return map[string]interface{}{"op": "ParallelProc", "procs": append([]interface{}{fp}, (rest.([]interface{}))...)}, nil
	} else {
		return fp, nil
	}

}

func (p *parser) callonProcs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onProcs1(stack["first"], stack["rest"])
}

func (c *current) onParallelTail1(ch interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "SequentialProc", "procs": ch}, nil
}

func (p *parser) callonParallelTail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParallelTail1(stack["ch"])
}

func (c *current) onGroupByProc2(every, keys, limit interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "GroupByProc", "keys": keys, "reducers": nil, "duration": every, "limit": limit}, nil

}

func (p *parser) callonGroupByProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByProc2(stack["every"], stack["keys"], stack["limit"])
}

func (c *current) onGroupByProc11(every, reducers, keys, limit interface{}) (interface{}, error) {
	var p = map[string]interface{}{"op": "GroupByProc", "keys": nil, "reducers": reducers, "duration": every, "limit": limit}
	if keys != nil {
		p["keys"] = keys.([]interface{})[1]
	}
	return p, nil

}

func (p *parser) callonGroupByProc11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByProc11(stack["every"], stack["reducers"], stack["keys"], stack["limit"])
}

func (c *current) onEveryDur1(dur interface{}) (interface{}, error) {
	return dur, nil
}

func (p *parser) callonEveryDur1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEveryDur1(stack["dur"])
}

func (c *current) onGroupByKeys1(columns interface{}) (interface{}, error) {
	return columns, nil
}

func (p *parser) callonGroupByKeys1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGroupByKeys1(stack["columns"])
}

func (c *current) onLimitArg2(limit interface{}) (interface{}, error) {
	return limit, nil
}

func (p *parser) callonLimitArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg2(stack["limit"])
}

func (c *current) onLimitArg11() (interface{}, error) {
	return 0, nil
}

func (p *parser) callonLimitArg11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLimitArg11()
}

func (c *current) onFlexAssignment3(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": expr}, nil
}

func (p *parser) callonFlexAssignment3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignment3(stack["expr"])
}

func (c *current) onFlexAssignments7(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonFlexAssignments7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments7(stack["expr"])
}

func (c *current) onFlexAssignments1(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonFlexAssignments1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFlexAssignments1(stack["first"], stack["rest"])
}

func (c *current) onReducerAssignment2(lval, reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lval, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment2(stack["lval"], stack["reducer"])
}

func (c *current) onReducerAssignment11(reducer interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": nil, "rhs": reducer}, nil

}

func (p *parser) callonReducerAssignment11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducerAssignment11(stack["reducer"])
}

func (c *current) onReducer1(op, expr, where interface{}) (interface{}, error) {
	var r = map[string]interface{}{"op": "Reducer", "operator": op, "expr": nil, "where": where}
	if expr != nil {
		r["expr"] = expr
	}
	return r, nil

}

func (p *parser) callonReducer1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducer1(stack["op"], stack["expr"], stack["where"])
}

func (c *current) onWhereClause1(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonWhereClause1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhereClause1(stack["expr"])
}

func (c *current) onReducers1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}
	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}
	return result, nil

}

func (p *parser) callonReducers1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReducers1(stack["first"], stack["rest"])
}

func (c *current) onSortProc8(l interface{}) (interface{}, error) {
	return l, nil
}

func (p *parser) callonSortProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc8(stack["l"])
}

func (c *current) onSortProc1(args, list interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"op": "SortProc", "fields": list, "sortdir": 1, "nullsfirst": false}
	if _, ok := argm["r"]; ok {
		proc["sortdir"] = -1
	}
	if _, ok := argm["nulls"]; ok {
		if argm["nulls"] == "first" {
			proc["nullsfirst"] = true
		}
	}
	return proc, nil

}

func (p *parser) callonSortProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortProc1(stack["args"], stack["list"])
}

func (c *current) onSortArgs4(a interface{}) (interface{}, error) {
	return a, nil
}

func (p *parser) callonSortArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs4(stack["a"])
}

func (c *current) onSortArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)
}

func (p *parser) callonSortArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArgs1(stack["args"])
}

func (c *current) onSortArg2() (interface{}, error) {
	return map[string]interface{}{"name": "r", "value": nil}, nil
}

func (p *parser) callonSortArg2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg2()
}

func (c *current) onSortArg9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSortArg9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg9()
}

func (c *current) onSortArg4(where interface{}) (interface{}, error) {
	return map[string]interface{}{"name": "nulls", "value": where}, nil
}

func (p *parser) callonSortArg4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSortArg4(stack["where"])
}

func (c *current) onTopProc6(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTopProc6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc6(stack["n"])
}

func (c *current) onTopProc18(f interface{}) (interface{}, error) {
	return f, nil
}

func (p *parser) callonTopProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc18(stack["f"])
}

func (c *current) onTopProc1(limit, flush, fields interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "TopProc", "limit": 0, "fields": nil, "flush": false}
	if limit != nil {
		proc["limit"] = limit
	}
	if fields != nil {
		proc["fields"] = fields
	}
	if flush != nil {
		proc["flush"] = true
	}
	return proc, nil

}

func (p *parser) callonTopProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTopProc1(stack["limit"], stack["flush"], stack["fields"])
}

func (c *current) onCutProc1(args, columns interface{}) (interface{}, error) {
	var argm = args.(map[string]interface{})
	var proc = map[string]interface{}{"op": "CutProc", "fields": columns, "complement": false}
	if _, ok := argm["c"]; ok {
		proc["complement"] = true
	}
	return proc, nil

}

func (p *parser) callonCutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutProc1(stack["args"], stack["columns"])
}

func (c *current) onCutArgs4() (interface{}, error) {
	return map[string]interface{}{"name": "c", "value": nil}, nil
}

func (p *parser) callonCutArgs4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutArgs4()
}

func (c *current) onCutArgs1(args interface{}) (interface{}, error) {
	return makeArgMap(args)

}

func (p *parser) callonCutArgs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCutArgs1(stack["args"])
}

func (c *current) onPickProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PickProc", "fields": columns}, nil

}

func (p *parser) callonPickProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPickProc1(stack["columns"])
}

func (c *current) onDropProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "DropProc", "fields": columns}, nil

}

func (p *parser) callonDropProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDropProc1(stack["columns"])
}

func (c *current) onHeadProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": count}, nil
}

func (p *parser) callonHeadProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc2(stack["count"])
}

func (c *current) onHeadProc8() (interface{}, error) {
	return map[string]interface{}{"op": "HeadProc", "count": 1}, nil
}

func (p *parser) callonHeadProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadProc8()
}

func (c *current) onTailProc2(count interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": count}, nil
}

func (p *parser) callonTailProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc2(stack["count"])
}

func (c *current) onTailProc8() (interface{}, error) {
	return map[string]interface{}{"op": "TailProc", "count": 1}, nil
}

func (p *parser) callonTailProc8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTailProc8()
}

func (c *current) onFilterProc1(expr interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FilterProc", "filter": expr}, nil

}

func (p *parser) callonFilterProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilterProc1(stack["expr"])
}

func (c *current) onUniqProc2() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": true}, nil

}

func (p *parser) callonUniqProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc2()
}

func (c *current) onUniqProc7() (interface{}, error) {
	return map[string]interface{}{"op": "UniqProc", "cflag": false}, nil

}

func (p *parser) callonUniqProc7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUniqProc7()
}

func (c *current) onPutProc1(columns interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "PutProc", "clauses": columns}, nil

}

func (p *parser) callonPutProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPutProc1(stack["columns"])
}

func (c *current) onRenameProc9(cl interface{}) (interface{}, error) {
	return cl, nil
}

func (p *parser) callonRenameProc9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc9(stack["cl"])
}

func (c *current) onRenameProc1(first, rest interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "RenameProc", "fields": append([]interface{}{first}, (rest.([]interface{}))...)}, nil

}

func (p *parser) callonRenameProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRenameProc1(stack["first"], stack["rest"])
}

func (c *current) onFuseProc1() (interface{}, error) {
	return map[string]interface{}{"op": "FuseProc"}, nil

}

func (p *parser) callonFuseProc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuseProc1()
}

func (c *current) onJoinProc2(leftKey, rightKey, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "JoinProc", "left_key": leftKey, "right_key": rightKey, "clauses": nil}
	if columns != nil {
		proc["clauses"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc2(stack["leftKey"], stack["rightKey"], stack["columns"])
}

func (c *current) onJoinProc18(key, columns interface{}) (interface{}, error) {
	var proc = map[string]interface{}{"op": "JoinProc", "left_key": key, "right_key": key, "clauses": nil}
	if columns != nil {
		proc["clauses"] = columns.([]interface{})[1]
	}
	return proc, nil

}

func (p *parser) callonJoinProc18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinProc18(stack["key"], stack["columns"])
}

func (c *current) onJoinKey3(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonJoinKey3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onJoinKey3(stack["expr"])
}

func (c *current) onRootField2(field interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "BinaryExpr", "operator": ".", "lhs": map[string]interface{}{"op": "RootRecord"}, "rhs": field}, nil
}

func (p *parser) callonRootField2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootField2(stack["field"])
}

func (c *current) onRootField12() (interface{}, error) {
	return map[string]interface{}{"op": "RootRecord"}, nil
}

func (p *parser) callonRootField12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRootField12()
}

func (c *current) onFieldExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonFieldExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldExprs1(stack["first"], stack["rest"])
}

func (c *current) onExprs1(first, rest interface{}) (interface{}, error) {
	var result = []interface{}{first}

	for _, r := range rest.([]interface{}) {
		result = append(result, r.([]interface{})[3])
	}

	return result, nil

}

func (p *parser) callonExprs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExprs1(stack["first"], stack["rest"])
}

func (c *current) onAssignment1(lhs, rhs interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "Assignment", "lhs": lhs, "rhs": rhs}, nil
}

func (p *parser) callonAssignment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignment1(stack["lhs"], stack["rhs"])
}

func (c *current) onConditionalExpr2(condition, thenClause, elseClause interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "ConditionalExpr", "condition": condition, "then": thenClause, "else": elseClause}, nil

}

func (p *parser) callonConditionalExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditionalExpr2(stack["condition"], stack["thenClause"], stack["elseClause"])
}

func (c *current) onLogicalOrExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalOrExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalOrExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalOrExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalOrExpr1(stack["first"], stack["rest"])
}

func (c *current) onLogicalAndExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonLogicalAndExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr7(stack["op"], stack["expr"])
}

func (c *current) onLogicalAndExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonLogicalAndExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLogicalAndExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityCompareExpr7(comp, expr interface{}) (interface{}, error) {
	return []interface{}{comp, expr}, nil
}

func (p *parser) callonEqualityCompareExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr7(stack["comp"], stack["expr"])
}

func (c *current) onEqualityCompareExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonEqualityCompareExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityCompareExpr1(stack["first"], stack["rest"])
}

func (c *current) onEqualityOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOperator1()
}

func (c *current) onEqualityComparator3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonEqualityComparator3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityComparator3()
}

func (c *current) onRelativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonRelativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onRelativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonRelativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onRelativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeOperator1()
}

func (c *current) onAdditiveExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonAdditiveExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr7(stack["op"], stack["expr"])
}

func (c *current) onAdditiveExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonAdditiveExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr1(stack["first"], stack["rest"])
}

func (c *current) onAdditiveOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAdditiveOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOperator1()
}

func (c *current) onMultiplicativeExpr7(op, expr interface{}) (interface{}, error) {
	return []interface{}{op, expr}, nil
}

func (p *parser) callonMultiplicativeExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr7(stack["op"], stack["expr"])
}

func (c *current) onMultiplicativeExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonMultiplicativeExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["first"], stack["rest"])
}

func (c *current) onMultiplicativeOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMultiplicativeOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOperator1()
}

func (c *current) onNotExpr2(e interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "UnaryExpr", "operator": "!", "operand": e}, nil

}

func (p *parser) callonNotExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotExpr2(stack["e"])
}

func (c *current) onCastExpr7(typ interface{}) (interface{}, error) {
	return typ, nil
}

func (p *parser) callonCastExpr7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpr7(stack["typ"])
}

func (c *current) onCastExpr2(e, typ interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "CastExpr", "expr": e, "type": typ}, nil

}

func (p *parser) callonCastExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCastExpr2(stack["e"], stack["typ"])
}

func (c *current) onPrimitiveType1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonPrimitiveType1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimitiveType1()
}

func (c *current) onFuncExpr2(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonFuncExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFuncExpr2(stack["first"], stack["rest"])
}

func (c *current) onFunction1(fn, args interface{}) (interface{}, error) {
	return map[string]interface{}{"op": "FunctionCall", "function": fn, "args": args}, nil

}

func (p *parser) callonFunction1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["fn"], stack["args"])
}

func (c *current) onDeprecatedName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDeprecatedName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeprecatedName1()
}

func (c *current) onArgumentList8(e interface{}) (interface{}, error) {
	return e, nil
}

func (p *parser) callonArgumentList8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList8(stack["e"])
}

func (c *current) onArgumentList2(first, rest interface{}) (interface{}, error) {
	return append([]interface{}{first}, (rest.([]interface{}))...), nil

}

func (p *parser) callonArgumentList2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList2(stack["first"], stack["rest"])
}

func (c *current) onArgumentList15() (interface{}, error) {
	return []interface{}{}, nil
}

func (p *parser) callonArgumentList15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgumentList15()
}

func (c *current) onDerefExpr1(first, rest interface{}) (interface{}, error) {
	return makeBinaryExprChain(first, rest), nil

}

func (p *parser) callonDerefExpr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDerefExpr1(stack["first"], stack["rest"])
}

func (c *current) onDeref2(expr interface{}) (interface{}, error) {
	return []interface{}{"[", expr}, nil
}

func (p *parser) callonDeref2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref2(stack["expr"])
}

func (c *current) onDeref8(id interface{}) (interface{}, error) {
	return []interface{}{".", id}, nil
}

func (p *parser) callonDeref8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDeref8(stack["id"])
}

func (c *current) onPrimary10(expr interface{}) (interface{}, error) {
	return expr, nil
}

func (p *parser) callonPrimary10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrimary10(stack["expr"])
}

func (c *current) onAndToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAndToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAndToken1()
}

func (c *current) onOrToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOrToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrToken1()
}

func (c *current) onInToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInToken1()
}

func (c *current) onNotToken1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNotToken1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNotToken1()
}

func (c *current) onIdentifierName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIdentifierName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifierName1()
}

func (c *current) onIdentifier1() (interface{}, error) {
	return map[string]interface{}{"op": "Identifier", "name": string(c.text)}, nil
}

func (p *parser) callonIdentifier1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onSeconds2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 1}, nil
}

func (p *parser) callonSeconds2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds2()
}

func (c *current) onSeconds4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num}, nil
}

func (p *parser) callonSeconds4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSeconds4(stack["num"])
}

func (c *current) onMinutes2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 60}, nil
}

func (p *parser) callonMinutes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes2()
}

func (c *current) onMinutes4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 60}, nil
}

func (p *parser) callonMinutes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinutes4(stack["num"])
}

func (c *current) onHours2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600}, nil
}

func (p *parser) callonHours2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours2()
}

func (c *current) onHours4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600}, nil
}

func (p *parser) callonHours4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHours4(stack["num"])
}

func (c *current) onDays2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24}, nil
}

func (p *parser) callonDays2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays2()
}

func (c *current) onDays4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": (num.(int) * 3600 * 24)}, nil
}

func (p *parser) callonDays4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDays4(stack["num"])
}

func (c *current) onWeeks2() (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks2()
}

func (c *current) onWeeks4(num interface{}) (interface{}, error) {
	return map[string]interface{}{"type": "Duration", "seconds": num.(int) * 3600 * 24 * 7}, nil
}

func (p *parser) callonWeeks4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeeks4(stack["num"])
}

func (c *current) onIP1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIP1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP1()
}

func (c *current) onIP62(a, b interface{}) (interface{}, error) {
	return joinChars(a) + b.(string), nil

}

func (p *parser) callonIP62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP62(stack["a"], stack["b"])
}

func (c *current) onIP69(a, b, d, e interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::" + joinChars(d) + e.(string), nil

}

func (p *parser) callonIP69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP69(stack["a"], stack["b"], stack["d"], stack["e"])
}

func (c *current) onIP622(a, b interface{}) (interface{}, error) {
	return "::" + joinChars(a) + b.(string), nil

}

func (p *parser) callonIP622() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP622(stack["a"], stack["b"])
}

func (c *current) onIP630(a, b interface{}) (interface{}, error) {
	return a.(string) + joinChars(b) + "::", nil

}

func (p *parser) callonIP630() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP630(stack["a"], stack["b"])
}

func (c *current) onIP638() (interface{}, error) {
	return "::", nil

}

func (p *parser) callonIP638() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP638()
}

func (c *current) onColonHex1(v interface{}) (interface{}, error) {
	return ":" + v.(string), nil
}

func (p *parser) callonColonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onColonHex1(stack["v"])
}

func (c *current) onHexColon1(v interface{}) (interface{}, error) {
	return v.(string) + ":", nil
}

func (p *parser) callonHexColon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHexColon1(stack["v"])
}

func (c *current) onIP4Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + fmt.Sprintf("%v", m), nil

}

func (p *parser) callonIP4Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP4Net1(stack["a"], stack["m"])
}

func (c *current) onIP6Net1(a, m interface{}) (interface{}, error) {
	return a.(string) + "/" + m.(string), nil

}

func (p *parser) callonIP6Net1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIP6Net1(stack["a"], stack["m"])
}

func (c *current) onUInt1(s interface{}) (interface{}, error) {
	return parseInt(s), nil
}

func (p *parser) callonUInt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUInt1(stack["s"])
}

func (c *current) onUIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUIntString1()
}

func (c *current) onMinusIntString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonMinusIntString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinusIntString1()
}

func (c *current) onFloatString2() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString2()
}

func (c *current) onFloatString13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFloatString13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloatString13()
}

func (c *current) onHex1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHex1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHex1()
}

func (c *current) onKeyWord1(chars interface{}) (interface{}, error) {
	return joinChars(chars), nil
}

func (p *parser) callonKeyWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWord1(stack["chars"])
}

func (c *current) onKeyWordPart2(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonKeyWordPart2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordPart2(stack["s"])
}

func (c *current) onKeyWordPart9() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonKeyWordPart9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyWordPart9()
}

func (c *current) onQuotedString2(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString2(stack["v"])
}

func (c *current) onQuotedString9(v interface{}) (interface{}, error) {
	return joinChars(v), nil
}

func (p *parser) callonQuotedString9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedString9(stack["v"])
}

func (c *current) onDoubleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar2()
}

func (c *current) onDoubleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDoubleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedChar9(stack["s"])
}

func (c *current) onSingleQuotedChar2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedChar2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar2()
}

func (c *current) onSingleQuotedChar9(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonSingleQuotedChar9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedChar9(stack["s"])
}

func (c *current) onEscapeSequence2() (interface{}, error) {
	return "\\" + string(c.text), nil
}

func (p *parser) callonEscapeSequence2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapeSequence2()
}

func (c *current) onSingleCharEscape5() (interface{}, error) {
	return "\b", nil
}

func (p *parser) callonSingleCharEscape5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape5()
}

func (c *current) onSingleCharEscape7() (interface{}, error) {
	return "\f", nil
}

func (p *parser) callonSingleCharEscape7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape7()
}

func (c *current) onSingleCharEscape9() (interface{}, error) {
	return "\n", nil
}

func (p *parser) callonSingleCharEscape9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape9()
}

func (c *current) onSingleCharEscape11() (interface{}, error) {
	return "\r", nil
}

func (p *parser) callonSingleCharEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape11()
}

func (c *current) onSingleCharEscape13() (interface{}, error) {
	return "\t", nil
}

func (p *parser) callonSingleCharEscape13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape13()
}

func (c *current) onSingleCharEscape15() (interface{}, error) {
	return "\v", nil
}

func (p *parser) callonSingleCharEscape15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleCharEscape15()
}

func (c *current) onSearchEscape2() (interface{}, error) {
	return "=", nil
}

func (p *parser) callonSearchEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchEscape2()
}

func (c *current) onSearchEscape4() (interface{}, error) {
	return "\\*", nil
}

func (p *parser) callonSearchEscape4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSearchEscape4()
}

func (c *current) onUnicodeEscape2(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape2(stack["chars"])
}

func (c *current) onUnicodeEscape11(chars interface{}) (interface{}, error) {
	return makeUnicodeChar(chars), nil

}

func (p *parser) callonUnicodeEscape11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnicodeEscape11(stack["chars"])
}

func (c *current) onRegexp1(body interface{}) (interface{}, error) {
	return body, nil
}

func (p *parser) callonRegexp1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexp1(stack["body"])
}

func (c *current) onRegexpBody1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRegexpBody1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegexpBody1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return fmt.Sprintf("%d:%d [%d]", p.line, p.col, p.offset)
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := make(storeDict, len(p.cur.state))
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return fmt.Sprintf("%s %s %s", strings.Join(list[:len(list)-1], sep), lastSep, list[len(list)-1])
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := fmt.Sprintf("%q%s", lit.val, ignoreCase)
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
