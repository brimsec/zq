#define DQUOTE \x22
#define SQUOTE \x27

#ifdef GO
{
    package zql
}
#define RETURN(x) return x, nil
#define VAR(x) var x
#define NULL nil
#define ARRAY(...) []interface{}{__VA_ARGS__}
#define ARRAY_LEN(a) len(a.([]interface{}))
#define FOREACH(arr, var) for _, var := range arr
#define APPEND(arr, value) arr = append(arr, value)
#define PREPEND(value, arr) append([]interface{}{value}, (arr.([]interface{}))...)
#define TEXT string(c.text)
#define TOSTRING(s) fmt.Sprintf("%v", s)
#define ISNOTNULL(n) n != nil
#define ASSERT_ARRAY(a) a.([]interface{})
#define ASSERT_STRING(s) s.(string)
#define ASSERT_INT(i) i.(int)
#define ASSERT_MAP(m) m.(map[string]interface{})
#define HAS(m, k) _, ok := m[k]; ok
#define MAP(...) map[string]interface{}{__VA_ARGS__}
#define PRINT(...) fmt.Println(__VA_ARGS__)
#else
{
#include "parser-support.js"
}
#define RETURN(x) return x
#define VAR(x) let x
#define NULL null
#define ARRAY(...) [__VA_ARGS__]
#define ARRAY_LEN(a) a.length
#define FOREACH(arr, var) for(let var of arr)
#define APPEND(arr, value) arr.push(value)
#define PREPEND(value, arr) [value, ...arr]
#define TEXT text()
#define ASSERT_INT(i) i
#define TOSTRING(s) s.toString()
#define ISNOTNULL(n) (n)
#define ASSERT_ARRAY(a) a
#define ASSERT_STRING(s) s
#define ASSERT_MAP(m) m
#define HAS(m, k) (k in m)
#define MAP(...) {__VA_ARGS__}
#define PRINT(...) console.log(__VAR_ARGS__)
#endif


start = _? ast:query _? EOF { RETURN(ast) }

query
  = procs:procChain {
      VAR(filt) = MAP("op": "FilterProc", "filter": MAP("op": "MatchAll"))
      RETURN(MAP("op": "SequentialProc", "procs": PREPEND(filt, procs)))
    }
  / s:search _? rest:chainedProc* {
      if (ARRAY_LEN(rest) == 0) {
          RETURN(s)
      } else {
          RETURN(MAP("op": "SequentialProc", "procs": PREPEND(s, rest)))
      }
    }
  / s:search {
      RETURN(MAP("op": "SequentialProc", "procs": ARRAY(s)))
    }

procChain
  = first:proc rest:chainedProc* {
      if ISNOTNULL(rest) {
        RETURN(PREPEND(first, rest))
      } else {
        RETURN(ARRAY(first))
      }
    }

chainedProc = _? "|" _? p:proc { RETURN(p) }

search
  = expr:searchExpr {
      RETURN(MAP("op": "FilterProc", "filter": expr))
    }

searchExpr
  = first:searchTerm rest:oredSearchTerm* {
      RETURN(makeChain(first, rest, "LogicalOr"))
    }

oredSearchTerm = _ orToken _ t:searchTerm { RETURN(t) }

searchTerm
  = first:searchFactor rest:andedSearchTerm* {
      RETURN(makeChain(first, rest, "LogicalAnd"))
    }

andedSearchTerm = _ (andToken _)? f:searchFactor { RETURN(f) }

searchFactor
  = (notToken _ / "!" _?) e:searchExpr {
      RETURN(MAP("op": "LogicalNot", "expr": e))
    }
  / !("-") s:searchPred { RETURN(s) }
  / "(" _? expr:searchExpr _? ")" { RETURN(expr) }

searchPred
  = "*" _? comp:equalityToken _? v:searchValue {
      RETURN(MAP("op": "CompareAny", "comparator": comp, "recursive": false, "value": v))
    }
  / "**" _? comp:equalityToken _? v:searchValue {
      RETURN(MAP("op": "CompareAny", "comparator": comp, "recursive": true, "value": v))
    }
  / f:fieldExpr _? comp:equalityToken _? v:searchValue {
      RETURN(MAP("op": "CompareField", "comparator": comp, "field": f, "value": v))
    }
  / v:searchValue _? inToken _? "*" {
      RETURN(MAP("op": "CompareAny", "comparator": "in", "recursive": false, "value": v))
    }
  / v:searchValue _? inToken _? f:fieldReference {
      RETURN(MAP("op": "CompareField", "comparator": "in", "field": f, "value": v))
    }
  / v:searchLiteral {
      RETURN(MAP("op": "Search", "text": TEXT, "value": v))
    }
  / !((searchKeywords) _ ) v:searchWord {
      VAR(str) = ASSERT_STRING(v)
      if (str == "*") {
        RETURN(MAP("op": "MatchAll"))
      }
      VAR(literal) = MAP("op": "Literal", "type": "string", "value": v)
      if (reglob.IsGlobby(str)) {
        literal["type"] = "regexp"
        literal["value"] = reglob.Reglob(str)
      }
      RETURN(MAP("op": "Search", "text": TEXT, "value": literal))
    }

searchLiteral
  = StringLiteral
  / RegexpLiteral
  / PortLiteral
  / SubnetLiteral
  / AddressLiteral
  / FloatLiteral

  // Careful not to use IntegerLiteral unconditionally or it will consume
  // the beginning of something like 1234abcd which is a valid search word
  / i:IntegerLiteral !searchWord { RETURN(i) }

  / !(searchKeywords _) v:BooleanLiteral { RETURN(v) }
  / !(searchKeywords _) v:NullLiteral { RETURN(v) }


searchValue
  = searchLiteral
  / !((searchKeywords) _) v:searchWord {
      RETURN(MAP("op": "Literal", "type": "string", "value": v))
    }

StringLiteral
  = v:quotedString {
      RETURN(MAP("op": "Literal", "type": "string", "value": v))
    }

RegexpLiteral
  = v:reString {
      RETURN(MAP("op": "Literal", "type": "regexp", "value": v))
    }

PortLiteral
  = v:port {
      RETURN(MAP("op": "Literal", "type": "port", "value": v))
    }

SubnetLiteral
  = v:ip6subnet {
      RETURN(MAP("op": "Literal", "type": "net", "value": v))
    }
  / v:subnet {
      RETURN(MAP("op": "Literal", "type": "net", "value": v))
    }

AddressLiteral
  = v:ip6addr {
      RETURN(MAP("op": "Literal", "type": "ip", "value": v))
    }
  / v:addr {
      RETURN(MAP("op": "Literal", "type": "ip", "value": v))
    }

FloatLiteral
  = v:sdouble {
      RETURN(MAP("op": "Literal", "type": "float64", "value": v))
    }

IntegerLiteral
  = v:sinteger {
      RETURN(MAP("op": "Literal", "type": "int64", "value": v))
    }

BooleanLiteral
  = "true"           { RETURN(MAP("op": "Literal", "type": "bool", "value": "true")) }
  / "false"          { RETURN(MAP("op": "Literal", "type": "bool", "value": "false")) }

NullLiteral
  = "null"           { RETURN(MAP("op": "Literal", "type": "null")) }

searchKeywords
  = andToken
  / orToken
  / inToken

procList
  = first:procChain rest:parallelChain* {
      VAR(fp) = MAP("op": "SequentialProc", "procs": first)
      if ISNOTNULL(rest) {
        RETURN(MAP("op": "ParallelProc", "procs": PREPEND(fp, rest)))
      } else {
        RETURN(fp)
      }
    }

parallelChain
  = _? ";" _? ch:procChain { RETURN(MAP("op": "SequentialProc", "procs": ch)) }

proc
  = simpleProc
  / groupByProc
  / "(" _? proc:procList _? ")" {
      RETURN(proc)
    }

groupByKeys
  = "by"i _ first:groupByKey rest:(__ "," __ cl:groupByKey { RETURN(cl) })* {
      RETURN(PREPEND(first, rest))
    }


groupByKey
  = ExpressionAssignment
  / field:fieldExpr { RETURN(MAP("op": "ExpressionAssignment", "target": TEXT, "expression": field)) }


everyDur
  = "every"i _ dur:duration { RETURN(dur) }

equalityToken
  = EqualityOperator / RelativeOperator

andToken = "and"i { RETURN(TEXT) }
orToken = "or"i { RETURN(TEXT) }
inToken = "in"i { RETURN(TEXT) }
notToken = "not"i { RETURN(TEXT) }

fieldName = fieldNameStart fieldNameRest* { RETURN(TEXT) }

fieldNameStart = [A-Za-z_$]
fieldNameRest = fieldNameStart / [0-9]

fieldReference
 = base:fieldName ds:(
       "." field:fieldName    { RETURN(MAP("op": "FieldCall", "fn": "RecordFieldRead", "field": NULL, "param": field)) }
     / "[" index:suint "]" { RETURN(MAP("op": "FieldCall", "fn": "Index", "field": NULL, "param": index)) }
   )* {
     VAR(ret) = MAP("op": "FieldRead", "field": base)
     FOREACH(ASSERT_ARRAY(ds), d) {
       VAR(derefs) = ASSERT_MAP(d)
       derefs["field"] = ret
       ret = derefs
     }
     RETURN(ret)
   }

fieldExpr
  = fn:fieldOp _? "(" _? field:fieldReference _? ")" {
      RETURN(MAP("op": "FieldCall", "fn": fn, "field": field, "param": NULL))
    }
  / fieldReference

fieldOp
  = "len"i { RETURN("Len") }

fieldExprList
  = first:fieldExpr rest:(_? "," _? fieldExpr)* {
      VAR(result) = ARRAY(first)

      FOREACH(ASSERT_ARRAY(rest), r) {
        APPEND(result, ASSERT_ARRAY(r)[3])
      }

      RETURN(result)
  }

fieldRefDotOnly
  = base:fieldName refs:("." field:fieldName)* { RETURN(TEXT) }

countOp
  = "count"i { RETURN("Count") }

fieldReducerOp
  = "sum"i  { RETURN("Sum") }
  / "avg"i  { RETURN("Avg") }
  / "stdev"i { RETURN("Stdev") }
  / "sd"i   { RETURN("Stdev") }
  / "var"i  { RETURN("Var") }
  / "entropy"i { RETURN("Entropy") }
  / "min"i  { RETURN("Min") }
  / "max"i  { RETURN("Max") }
  / "first"i  { RETURN("First") }
  / "last"i  { RETURN("Last") }
  / "countdistinct"i { RETURN("CountDistinct") }

paddedFieldExpr = _? field:fieldExpr _? { RETURN(field) }

countReducer
  = op:countOp _? "(" field:paddedFieldExpr?  _? ")" {
    VAR(r) = MAP("op": op, "var": "count")
    if ISNOTNULL(field) {
      r["field"] = field
    }
    RETURN(r)
  }

fieldReducer
  = op:fieldReducerOp _? "(" _? field:fieldExpr  _? ")" {
    VAR(r) = MAP("op": op, "var": toLowerCase(op))
    if ISNOTNULL(field) {
      r["field"] = field
    }
    RETURN(r)
  }

groupByProc
  = every:(everyDur _)? reducers:reducerList keys:(_ groupByKeys)? limit:procLimitArg? {
    if ISNOTNULL(OR(keys, every)) {
      if ISNOTNULL(keys) {
        keys = ASSERT_ARRAY(keys)[1]
      } else {
        keys = ARRAY()
      }

      if ISNOTNULL(every) {
        every = ASSERT_ARRAY(every)[0]
      }

      RETURN(MAP("op": "GroupByProc", "duration": every, "limit": limit, "keys": keys, "reducers": reducers))
    }
    RETURN(MAP("op": "GroupByProc", "reducers": reducers))
  }

reducerExpr
  = field:fieldName _? "=" _? f:reducer {
    VAR(r) = ASSERT_MAP(f)
    r["var"] = field
    RETURN(r)
  }
  / reducer

reducer
  = countReducer
  / fieldReducer

reducerList
  = first:reducerExpr rest:(_? "," _? reducerExpr)* {
      VAR(result) = ARRAY(first)
      FOREACH(ASSERT_ARRAY(rest), r) {
        APPEND(result, ASSERT_ARRAY(r)[3])
      }
      RETURN(result)
    }

simpleProc
  = sort
  / top
  / cut
  / head
  / tail
  / filter
  / uniq
  / put
  / rename
  / fuse

sort
  = "sort"i args:sortArgs list:(_ l:fieldExprList { RETURN(l) })? {
    VAR(argm) = ASSERT_MAP(args)
    VAR(proc) = MAP("op": "SortProc", "fields": list, "sortdir": 1, "nullsfirst": false)
    if HAS(argm, "r") {
      proc["sortdir"] = -1
    }
    if HAS(argm, "nulls") {
      if (argm["nulls"] == "first") {
        proc["nullsfirst"] = true
      }
    }
    RETURN(proc)
  }

sortArgs = args:(_ a:sortArg{ RETURN(a) })* {
    return makeArgMap(args)
}

sortArg
  = "-r" { RETURN(MAP("name": "r", "value": NULL)) }
  / "-nulls" _ where:(("first" / "last") { RETURN(TEXT) } ) { RETURN(MAP("name": "nulls", "value": where)) }

top
  = "top"i limit:(_ n:unsignedInteger { RETURN(n)})? flush:(_ "-flush")? fields:(_ f:fieldExprList { RETURN(f) })? {
    VAR(proc) = MAP("op": "TopProc")
    if ISNOTNULL(limit) {
      proc["limit"] = limit
    }
    if ISNOTNULL(fields) {
      proc["fields"] = fields
    }
    if ISNOTNULL(flush) {
      proc["flush"] = true
    }
    RETURN(proc)
  }

procLimitArg
  = _ "-limit" _ limit:unsignedInteger { RETURN(limit) }

cutArgs
  = args:(_ "-c" { RETURN(MAP("name": "c", "value": NULL)) })* {
    return makeArgMap(args)
  }

cutAssignment
  = FieldAssignment
  / field:fieldRefDotOnly {
    RETURN(MAP("target": "", "source": field))
  }

cut
  = "cut"i args:cutArgs _ first:cutAssignment rest:(__ "," __ cl:cutAssignment { RETURN(cl) })* {
    VAR(argm) = ASSERT_MAP(args)
    VAR(proc) = MAP("op": "CutProc", "fields": PREPEND(first, rest), "complement": false)
    if HAS(argm, "c") {
      proc["complement"] = true
    }
    RETURN(proc)
  }
head
  = "head"i _ count:unsignedInteger { RETURN(MAP("op": "HeadProc", "count": count)) }
  / "head"i { RETURN(MAP("op": "HeadProc", "count": 1)) }
tail
  = "tail"i _ count:unsignedInteger { RETURN(MAP("op": "TailProc", "count": count)) }
  / "tail"i { RETURN(MAP("op": "TailProc", "count": 1)) }

filter
  = "filter"i _ expr:searchExpr {
      RETURN(MAP("op": "FilterProc", "filter": expr))
    }
uniq
  = "uniq"i _ "-c" {
      RETURN(MAP("op": "UniqProc", "cflag": true))
    }
  / "uniq"i {
      RETURN(MAP("op": "UniqProc", "cflag": false))
    }

put
  = "put"i _ first:ExpressionAssignment rest:(__ "," __ cl:ExpressionAssignment { RETURN(cl) })* {
      RETURN(MAP("op": "PutProc", "clauses": PREPEND(first, rest)))
    }

rename
  = "rename"i _ first:FieldAssignment rest:(__ "," __ cl:FieldAssignment { RETURN(cl) })* {
      RETURN(MAP("op": "RenameProc", "fields": PREPEND(first, rest)))
    }

fuse
  = "fuse"i {
      RETURN(MAP("op": "FuseProc"))
  }

ExpressionAssignment
  = f:fieldName __ "=" __ e:Expression {
      RETURN(MAP("target": f, "expression": e))
    }

FieldAssignment
  = l:fieldRefDotOnly __ "=" __ r:fieldRefDotOnly {
      RETURN(MAP("target": l, "source": r))
    }

PrimaryExpression
  = StringLiteral
  / RegexpLiteral
  / PortLiteral
  / SubnetLiteral
  / AddressLiteral
  / FloatLiteral
  / IntegerLiteral
  / BooleanLiteral
  / NullLiteral
  / FieldReference
  / "(" __ expr:Expression __ ")" { RETURN(expr) }

FieldReference
  = f:fieldName {
      VAR(ret) = MAP("op": "FieldRead", "field": f)
      FOREACH(ARRAY(), d) {
        VAR(derefs) = ASSERT_MAP(d)
        derefs["field"] = ret
        ret = derefs
      }
      RETURN(ret)
    }

//
// Rules for parsing expressions.  Following standard practice, each
// level of operator precedence has a rule that references the next
// highest level of precedence.
//

Expression = ConditionalExpression

ConditionalExpression
  = condition:LogicalORExpression __ "?" __ thenClause:Expression __ ":" __ elseClause:Expression {
    RETURN(MAP("op": "ConditionalExpr", "condition": condition, "then": thenClause, "else": elseClause))
  }
  / LogicalORExpression

LogicalORExpression
  = first:LogicalANDExpression
    rest:(__ op:orToken __ expr:LogicalANDExpression{ RETURN(ARRAY(op, expr)) })* {
        RETURN(makeBinaryExprChain(first, rest))
    }

LogicalANDExpression
  = first:EqualityCompareExpression
    rest:(__ op:andToken __ expr:EqualityCompareExpression{ RETURN(ARRAY(op, expr)) })* {
        RETURN(makeBinaryExprChain(first, rest))
    }

EqualityCompareExpression
  = first:RelativeExpression
    rest:(__ comp:EqualityComparator __ expr:RelativeExpression{ RETURN(ARRAY(comp, expr)) })* {
        RETURN(makeBinaryExprChain(first, rest))
    }

EqualityOperator = ("=~" / "!~" / "=" / "!=") { RETURN(TEXT) }

EqualityComparator
  = EqualityOperator
  / "in" { RETURN(TEXT) }

RelativeExpression
  = first:AdditiveExpression
    rest:(__ op:RelativeOperator __ expr:AdditiveExpression{ RETURN(ARRAY(op, expr)) })* {
        RETURN(makeBinaryExprChain(first, rest))
    }

RelativeOperator = ("<=" / "<" / ">=" / ">") { RETURN(TEXT) }

AdditiveExpression
  = first:MultiplicativeExpression
    rest:(__ op:AdditiveOperator __ expr:MultiplicativeExpression{ RETURN(ARRAY(op, expr)) })* {
        RETURN(makeBinaryExprChain(first, rest))
    }

AdditiveOperator = ("+" / "-") { RETURN(TEXT) }

MultiplicativeExpression
  = first:NotExpression
    rest:(__ op:MultiplicativeOperator __ expr:NotExpression{ RETURN(ARRAY(op, expr)) })* {
        RETURN(makeBinaryExprChain(first, rest))
    }

MultiplicativeOperator = ("*" / "/") { RETURN(TEXT) }

NotExpression
  = "!" __ e:NotExpression {
        RETURN(MAP("op": "UnaryExpr", "operator": "!", "operand": e))
    }
  / CastExpression

CastExpression
  = e:CallExpression t:(__ ":" __ ct:ZngType { RETURN(ct) })? {
    if ISNOTNULL(t) {
      RETURN(MAP("op": "CastExpr", "expr": e, "type": t))
    } else {
      RETURN(e)
    }
  }

ZngType
 = ("bool" / "bytes" / "byte" / "int16" / "uint16" / "int32" / "uint32"
 / "int64" / "uint64" / "float64" / "string" / "bstring"
 / "ip" / "net" / "time" / "duration") { RETURN(TEXT) }

CallExpression
  = fn:FunctionName __ "(" args:ArgumentList ")" {
        RETURN(MAP("op": "FunctionCall", "function": fn, "args": args))
    }
  / DereferenceExpression

FunctionName
  = FunctionNameStart FunctionNameRest* { RETURN(TEXT) }

FunctionNameStart = [A-Za-z]
FunctionNameRest = FunctionNameStart / [.0-9]

ArgumentList
  = first:Expression rest:(__ "," __ e:Expression { RETURN(e) })* {
      RETURN(PREPEND(first, rest))
  }
  / __ { RETURN(ARRAY()) }

DereferenceExpression
  = base:PrimaryExpression
    derefs:(
        __ "[" __ index:Expression __ "]" {
          RETURN(ARRAY("[", index))
        }
      / __ "." __ field:fieldName {
          RETURN(ARRAY(".", MAP("op": "Literal", "type": "string", "value": field)))
        }
    )* {
        RETURN(makeBinaryExprChain(base, derefs))
    }

duration
  = seconds
  / minutes
  / hours
  / hours _ "and" _ minutes
  / days
  / weeks

sec_abbrev
  = "seconds"
  / "second"
  / "secs"
  / "sec"
  / "s"

min_abbrev
  = "minutes"
  / "minute"
  / "mins"
  / "min"
  / "m"

hour_abbrev
  = "hours"
  / "hrs"
  / "hr"
  / "h"
  / "hour"

day_abbrev = "days"/"day"/"d"
week_abbrev = "weeks"/"week"/"wks"/"wk"/"w"

seconds
  = "second" { RETURN(MAP("type": "Duration", "seconds": 1)) }
  / num:number _? sec_abbrev { RETURN(MAP("type": "Duration", "seconds": num)) }

minutes
  = "minute" { RETURN(MAP("type": "Duration", "seconds": 60)) }
  / num:number _? min_abbrev { RETURN(MAP("type": "Duration", "seconds": ASSERT_INT(num)*60)) }

hours
  = "hour" { RETURN(MAP("type": "Duration", "seconds": 3600)) }
  / num:number _? hour_abbrev { RETURN(MAP("type": "Duration", "seconds": ASSERT_INT(num)*3600)) }

days
  = "day" { RETURN(MAP("type": "Duration", "seconds": 3600*24)) }
  / num:number _? day_abbrev { RETURN(MAP("type": "Duration", "seconds": (ASSERT_INT(num)*3600*24))) }

weeks
  = num:number _? week_abbrev { RETURN(MAP("type": "Duration", "seconds": ASSERT_INT(num)*3600*24*7)) }

number = unsignedInteger


//XXX what about mac addrs?
addr
  = a:(unsignedInteger "." unsignedInteger "." unsignedInteger "." unsignedInteger) { RETURN(TEXT) }

port
  = ":" v:suint { RETURN(v) }

// this matches a superset of legal syntax for ip6 addresses but the compiler
// will catch any errors when translating the filter
ip6addr
  = a:(h_prepend)+ b:ip6tail {
      RETURN(joinChars(a) + ASSERT_STRING(b))
    }
  / a:h16 b:(h_append)* "::" d:(h_prepend)* e:ip6tail {
      RETURN(ASSERT_STRING(a) + joinChars(b) + "::" + joinChars(d) + ASSERT_STRING(e))
    }
  / "::" a:(h_prepend)* b:ip6tail {
      RETURN("::" + joinChars(a) + ASSERT_STRING(b))
    }
  / a:h16 b:(h_append)* "::" {
      RETURN(ASSERT_STRING(a) + joinChars(b) + "::")
    }
  / "::" {
      RETURN("::")
    }

ip6tail
  = addr
  / h16

h_append = ":" v:h16 { RETURN(":" + ASSERT_STRING(v)) }
h_prepend = v:h16 ":" { RETURN(ASSERT_STRING(v) + ":") }

subnet
  = a:addr '/' m:unsignedInteger {
      RETURN(ASSERT_STRING(a) + "/" + TOSTRING(m));
    }

ip6subnet
  = a:ip6addr '/' m:unsignedInteger {
      RETURN(ASSERT_STRING(a) + "/" + ASSERT_STRING(m));
    }

unsignedInteger
  = s:suint { RETURN(parseInt(s)) }

suint
  = [0-9]+ { RETURN(TEXT) }

integer
  = s:sinteger { RETURN(parseInt(s)) }

sinteger
  = [+-]? suint { RETURN(TEXT) }

double
  = s:sdouble {
      RETURN(parseFloat(s))
  }

sdouble
  = "-"? doubleInteger+ "." doubleDigit+ exponentPart? {
      RETURN(TEXT)
    }
  / "-"? "." doubleDigit+ exponentPart? {
      RETURN(TEXT)
    }

doubleInteger
  = "0"
  / [1-9] [0-9]*

doubleDigit = [0-9]

exponentPart = "e"i sinteger

h16 = chars:hexdigit+ { RETURN(TEXT) }

hexdigit = [0-9a-fA-F]

searchWord
  = chars:searchWordPart+ { RETURN(joinChars(chars)) }

searchWordPart
  = "\\" s:(escapeSequence / searchEscape)  { RETURN(s) }
  / !([\x00-\x1F\x5C(),!><=DQUOTE|SQUOTE;] / ws) . { RETURN(TEXT) }

quotedString
  = '"' v:doubleQuotedChar* '"' { RETURN(joinChars(v)) }
  / "'" v:singleQuotedChar* "'" { RETURN(joinChars(v)) }

doubleQuotedChar
  = !('"' / escapedChar) . { RETURN(TEXT) }
  / "\\" s:escapeSequence { RETURN(s) }

singleQuotedChar
  = !("'" / escapedChar) . { RETURN(TEXT) }
  / "\\" s:escapeSequence { RETURN(s) }

escapeSequence
  = "x" hexdigit hexdigit { RETURN("\\" + TEXT) }
  / singleCharEscape
  / unicodeEscape

singleCharEscape
  = "'"
  / '"'
  / "\\"
  / "b" { RETURN("\b") }
  / "f" { RETURN("\f") }
  / "n" { RETURN("\n") }
  / "r" { RETURN("\r") }
  / "t" { RETURN("\t") }
  / "v" { RETURN("\v") }

searchEscape
  = "=" { RETURN("=") }
  / "*" { RETURN("\\*") }

unicodeEscape
  = "u" chars:(hexdigit hexdigit hexdigit hexdigit) {
      RETURN(makeUnicodeChar(chars))
    }
  / "u" "{" chars:(hexdigit hexdigit? hexdigit? hexdigit? hexdigit? hexdigit?) "}" {
      RETURN(makeUnicodeChar(chars))
    }

reString
  = '/' v:reBody '/' { RETURN(v) }

reBody
  = ([^/\\]/"\\/")+ { RETURN(TEXT) }

escapedChar
  = [\x00-\x1f\\]

ws
  = "\t"
  / "\v"
  / "\f"
  / " "
  / "\u00A0"
  / "\uFEFF"

_ "whitespace" = ws+
__ = ws*

EOF = !.
